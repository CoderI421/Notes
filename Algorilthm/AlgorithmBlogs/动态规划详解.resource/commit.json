{"compress":true,"commitItems":[["2ce741d7-d0ca-4100-bb22-ec08649fecf9",1562850131500,"",[[1562850083969,["GJX@GJXAIOU",[[1,0,"# 动态规划详解\n\n\n\n"]],[0,0],[11,11]]],[1562850088111,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1562850089571,["GJX@GJXAIOU",[[1,0,"·"]],[0,0],[1,1]]],[1562850090497,["GJX@GJXAIOU",[[-1,0,"·"]],[1,1],[0,0]]],[1562850090844,["GJX@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1562850091010,["GJX@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1562850091123,["GJX@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1562850091146,["GJX@GJXAIOU",[[1,4,"\n---\n\n"]],[3,3],[4,4]]],[1562850102177,["GJX@GJXAIOU",[[1,4,"date: '2019-7-11'"]],[4,4],[21,21]]],[1562850123391,["GJX@GJXAIOU",[[1,37,"动态规划算法（Dynamic Programming，简称 DP）似乎是一种很高深莫测的算法，你会在一些面试或算法书籍的高级技巧部分看到相关内容，什么状态转移方程，重叠子问题，最优子结构等高大上的词汇也可能让你望而却步。\n\n而且，当你去看用动态规划解决某个问题的代码时，你会觉得这样解决问题竟然如此巧妙，但却难以理解，你可能惊讶于人家是怎么想到这种解法的。\n\n实际上，动态规划是一种常见的「算法设计技巧」，并没有什么高深莫测，至于各种高大上的术语，那是吓唬别人用的，只要你亲自体验几把，这些名词的含义其实显而易见，再简单不过了。\n\n至于为什么最终的解法看起来如此精妙，是因为动态规划遵循一套固定的流程：**递归的暴力解法 -> 带备忘录的递归解法 -> 非递归的动态规划解法**。这个过程是层层递进的解决问题的过程，你如果没有前面的铺垫，直接看最终的非递归动态规划解法，当然会觉得牛逼而不可及了。\n\n当然，见的多了，思考多了，是可以一步写出非递归的动态规划解法的。任何技巧都需要练习，我们先遵循这个流程走，算法设计也就这些套路，除此之外，真的没啥高深的。\n\n本文会通过两个个比较简单的例子：斐波那契和凑零钱问题，揭开动态规划的神秘面纱，描述上述三个流程。后续还会写几篇文章探讨如何使用动态规划技巧解决比较复杂的经典问题。\n\n首先，第一个快被举烂了的例子，斐波那契数列。请读者不要嫌弃这个例子简单，因为简单的例子才能让你把精力充分集中在算法背后的通用思想和技巧上，而不会被那些隐晦的细节问题搞的莫名其妙。后续，困难的例子有的是。\n\n**步骤一、暴力的递归算法**\n\n```\nint fib(int N) {    if (N == 1 || N == 2) return 1;    return fib(N - 1) + fib(N - 2);}\n```\n\n这个不用多说了，学校老师讲递归的时候似乎都是拿这个举例。我们也知道这样写代码虽然简洁易懂，但是十分低效，低效在哪里？假设 n = 20，请画出递归树。\n\nPS：但凡遇到需要递归的问题，最好都画出递归树，这对你分析算法的复杂度，寻找算法低效的原因都有巨大帮助。\n\n![](https://mmbiz.qpic.cn/mmbiz_png/map09icNxZ4mo8FONSnibO8wIRV6aBwGdXBxic1kgN5OseFPmy50jdyTDEfTVpPFjPZsKiaRyhBb63V3yv1gQqnHgg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n这个递归树怎么理解？就是说想要计算原问题 f(20)，我就得先计算出子问题 f(19) 和 f(18)，然后要计算 f(19)，我就要先算出子问题 f(18) 和 f(17)，以此类推。最后遇到 f(1) 或者 f(2) 的时候，结果已知，就能直接返回结果，递归树不再向下生长了。\n\n**递归算法的时间复杂度怎么计算？子问题个数乘以解决一个子问题需要的时间。**\n\n子问题个数，即递归树中节点的总数。显然二叉树节点总数为指数级别，所以子问题个数为 O(2^n)。\n\n解决一个子问题的时间，在本算法中，没有循环，只有 f(n - 1) + f(n - 2) 一个加法操作，时间为 O(1)。\n\n所以，这个算法的时间复杂度为 O(2^n)，指数级别，爆炸。\n\n观察递归树，很明显发现了算法低效的原因：存在大量重复计算，比如 f(18) 被计算了两次，而且你可以看到，以 f(18) 为根的这个递归树体量巨大，多算一遍，会耗费巨大的时间。更何况，还不止 f(18) 这一个节点被重复计算，所以这个算法及其低效。\n\n这就是动态规划问题的第一个性质：**重叠子问题**。下面，我们想办法解决这个问题。\n\n**步骤二、带备忘录的递归解法**\n\n明确了问题，其实就已经把问题解决了一半。即然耗时的原因是重复计算，那么我们可以造一个「备忘录」，每次算出某个子问题的答案后别急着返回，先记到「备忘录」里再返回；每次遇到一个子问题先去「备忘录」里查一查，如果发现之前已经解决过这个问题了，直接把答案拿出来用，不要再耗时去计算了。\n\n一般使用一个数组充当这个「备忘录」，当然你也可以使用哈希表（字典），思想都是一样的。\n\n```\nint fib(int N) {    if (N < 1) return 0;    // 备忘录全初始化为 0    vector<int> memo(N + 1, 0);    // 初始化最简情况    memo[1] = memo[2] = 1;    return helper(memo, N);}int helper(vector<int>& memo, int n) {    // 未被计算过    if (n > 0 && memo[n] == 0)         memo[n] = helper(memo, n - 1) + helper(memo, n - 2);    return memo[n];}\n```\n\n现在，画出递归树，你就知道「备忘录」到底做了什么。\n\n![](https://mmbiz.qpic.cn/mmbiz_png/map09icNxZ4mo8FONSnibO8wIRV6aBwGdXpibYjXibLMsGeX4serz0LsGFg7FcJ4wVAzIYDvWKia7PGKHPDcZ5ib56YA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n实际上，带「备忘录」的递归算法，把一棵存在巨量冗余的递归树通过「剪枝」，改造成了一幅不存在冗余的递归图，极大减少了子问题（即递归图中节点）的个数。\n\n递归算法的时间复杂度怎么算？子问题个数乘以解决一个子问题需要的时间。\n\n子问题个数，即图中节点的总数，由于本算法不存在冗余计算，子问题就是 f(1), f(2), f(3) ... f(20)，数量和输入规模 n = 20 成正比，所以子问题个数为 O(n)。\n\n解决一个子问题的时间，同上，没有什么循环，时间为 O(1)。\n\n所以，本算法的时间复杂度是 O(n)。比起暴力算法，是降维打击。\n\n至此，带备忘录的递归解法的效率已经和动态规划一样了。实际上，这种解法和动态规划的思想已经差不多了，只不过这种方法叫做「自顶向下」，动态规划叫做「自底向上」。\n\n啥叫「自顶向下」？注意我们刚才画的递归树（或者说图），是从上向下延伸，都是从一个规模较大的原问题比如说 f(20)，向下逐渐分解规模，直到 f(1) 和 f(2) 触底，然后逐层返回答案，这就叫「自顶向下」。\n\n啥叫「自底向上」？反过来，我们直接从最底下，最简单，问题规模最小的 f(1) 和 f(2) 开始往上推，直到推到我们想要的答案 f(20)，这就是动态规划的思路，这也是为什么动态规划一般都脱离了递归，而是由循环迭代完成计算。\n\n**步骤三、动态规划**\n\n有了上一步「备忘录」的启发，我们可以把这个「备忘录」独立出来成为一张表，就叫做 DP table 吧，在这张表上完成「自底向上」的推算岂不美哉！\n\n```\nint fib(int N) {    vector<int> dp(N + 1, 0);    dp[1] = dp[2] = 1;    for (int i = 3; i <= N; i++)        dp[i] = dp[i - 1] + dp[i - 2];    return dp[N];}\n```\n\n![](https://mmbiz.qpic.cn/mmbiz_png/map09icNxZ4mo8FONSnibO8wIRV6aBwGdXja5uw3bPZyR5RsunibhSHndx5INHkicB7Me432wyD48lHOVyfHFhKjkg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n画个图就很好理解了，而且你发现这个 DP table 特别像之前那个「剪枝」后的结果，只是反过来算而已。实际上，带备忘录的递归解法中的「备忘录」，最终完成后就是这个 DP table，所以说这两种解法其实是差不多的，大部分情况下，效率也基本相同。\n\n这里，引出「动态转移方程」这个名词，实际上就是描述问题结构的数学形式：\n\n![](https://mmbiz.qpic.cn/mmbiz_png/map09icNxZ4mo8FONSnibO8wIRV6aBwGdX8tDKIn3ZlIcut61MVCIY8kcEJfxVwnfUmsvlOibogDt27nxUa50cnDA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n为啥叫「状态转移方程」？为了听起来高端。你把 f(n) 想做一个状态 n，这个状态 n 是由状态 n - 1 和状态 n - 2 相加转移而来，这就叫状态转移，仅此而已。\n\n你会发现，上面的几种解法中的所有操作，例如 return f(n - 1) + f(n - 2)，dp[i] = dp[i - 1] + dp[i - 2]，以及对备忘录或 DP table 的初始化操作，都是围绕这个方程式的不同表现形式。可见列出「状态转移方程」的重要性，它是解决问题的核心。很容易发现，其实状态转移方程直接代表着暴力解法。\n\n**千万不要看不起暴力解，动态规划问题最困难的就是写出状态转移方程**，即这个暴力解。优化方法无非是用备忘录或者 DP table，再无奥妙可言。\n\n这个例子的最后，讲一个细节优化。细心的读者会发现，根据斐波那契数列的状态转移方程，当前状态只和之前的两个状态有关，其实并不需要那么长的一个 DP table 来存储所有的状态，只要想办法存储之前的两个状态就行了。所以，可以进一步优化，把空间复杂度降为 O(1)：\n\n```\nint fib(int n) {    if (n < 2) return n;    int prev = 0, curr = 1;    for (int i = 0; i < n - 1; i++) {        int sum = prev + curr;        prev = curr;        curr = sum;    }    return curr;}\n```\n\n有人会问，动态规划的另一个重要特性「最优子结构」，怎么没有涉及？下面会涉及。斐波那契数列的例子严格来说不算动态规划，以上旨在演示算法设计螺旋上升的过程。当问题中要求求一个最优解或在代码中看到循环和 max、min 等函数时，十有八九，需要动态规划大显身手。\n\n下面，看第二个例子，凑零钱问题，有了上面的详细铺垫，这个问题会很快解决。\n\n题目：给你 k 种面值的硬币，面值分别为 c1, c2 ... ck，再给一个总金额 n，问你最少需要几枚硬币凑出这个金额，如果不可能凑出，则回答 -1 。\n\n比如说，k = 3，面值分别为 1，2，5，总金额 n = 11，那么最少需要 3 枚硬币，即 11 = 5 + 5 + 1 。下面走流程。\n\n**一、暴力解法**\n\n首先是最困难的一步，写出状态转移方程，这个问题比较好写：\n\n![](https://mmbiz.qpic.cn/mmbiz_png/map09icNxZ4mo8FONSnibO8wIRV6aBwGdXMW60mQnobpZ4pwmjGZYKwjhC8zA4ckTibQksLicrLWazpuMktVZxksmg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n其实，这个方程就用到了**「最优子结构」性质：原问题的解由子问题的最优解构成。**即 f(11) 由 f(10), f(9), f(6) 的最优解转移而来。\n\n记住，**要符合「最优子结构」，子问题间必须互相独立。**啥叫相互独立？你肯定不想看数学证明，我用一个直观的例子来讲解。\n\n比如说，你的原问题是考出最高的总成绩，那么你的子问题就是要把语文考到最高，数学考到最高...... 为了每门课考到最高，你要把每门课相应的选择题分数拿到最高，填空题分数拿到最高...... 当然，最终就是你每门课都是满分，这就是最高的总成绩。\n\n得到了正确的结果：最高的总成绩就是总分。因为这个过程符合最优子结构，“每门科目考到最高”这些子问题是互相独立，互不干扰的。\n\n但是，如果加一个条件：你的语文成绩和数学成绩会互相制约，此消彼长。这样的话，显然你能考到的最高总成绩就达不到总分了，按刚才那个思路就会得到错误的结果。因为子问题并不独立，语文数学成绩无法同时最优，所以最优子结构被破坏。\n\n回到凑零钱问题，显然子问题之间没有相互制约，而是互相独立的。所以这个状态转移方程是可以得到正确答案的。\n\n之后就没啥难点了，按照方程写暴力递归算法即可。如果不太会写递归，参见前文 [递归详解](http://mp.weixin.qq.com/s?__biz=MzU0MDg5OTYyOQ==&mid=2247483761&idx=1&sn=a8ff4647e85f6a01b19e1786458b4394&chksm=fb336133cc44e82549cbbe47ff6d1cd3d3d4d9690bcee1d5349cc6c6a4d8ca6c3b0e1672a8a9&scene=21#wechat_redirect)。\n\n```\nint coinChange(vector<int>& coins, int amount) {    if (amount == 0) return 0;    int ans = INT_MAX;    for (int coin : coins) {        // 金额不可达        if (amount - coin < 0) continue;        int subProb = coinChange(coins, amount - coin);        // 子问题无解        if (subProb == -1) continue;        ans = min(ans, subProb + 1);    }    return ans == INT_MAX ? -1 : ans;}\n```\n\n画出递归树：\n\n![](https://mmbiz.qpic.cn/mmbiz_png/map09icNxZ4mo8FONSnibO8wIRV6aBwGdXJgqKoIoj4ye7gpybTibhL5sUIGOGuXxASQSCmxLkAxysq4ufZMY73Zw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n时间复杂度分析：子问题总数 x 每个子问题的时间。子问题总数为递归树节点个数，这个比较难看出来，是 O(n^k)，总之是指数级别的。每个子问题中含有一个 for 循环，复杂度为 O(k)。所以总时间复杂度为 O(k*n^k)，指数级别。\n\n**二、带备忘录的递归算法**\n\n```\nint coinChange(vector<int>& coins, int amount) {    // 备忘录初始化为 -2    vector<int> memo(amount + 1, -2);    return helper(coins, amount, memo);}int helper(vector<int>& coins, int amount, vector<int>& memo) {    if (amount == 0) return 0;    if (memo[amount] != -2) return memo[amount];    int ans = INT_MAX;    for (int coin : coins) {        // 金额不可达        if (amount - coin < 0) continue;        int subProb = helper(coins, amount - coin, memo);        // 子问题无解        if (subProb == -1) continue;        ans = min(ans, subProb + 1);    }    // 记录本轮答案    memo[amount] = (ans == INT_MAX) ? -1 : ans;    return memo[amount];}\n```\n\n不画图了，很显然「备忘录」大大减小了子问题数目，完全消除了子问题的冗余，所以子问题总数不会超过金额数 n，即子问题数目为 O(n)。处理一个子问题的时间不变，仍是 O(k)，所以总的时间复杂度是 O(kn)。\n\n**三、动态规划**\n\n```\nint coinChange(vector<int>& coins, int amount) {    vector<int> dp(amount + 1, INT_MAX);    dp[0] = 0;    for (int i = 0; i < dp.size(); i++) {        // 内层 for 在求所有子问题 + 1 的最小值        for (int coin : coins) {            if (i - coin < 0) continue;            dp[i] = min(dp[i], 1 + dp[i - coin]);        }    }    return dp[amount] == INT_MAX ? -1 : dp[amount];}\n```\n\n![](https://mmbiz.qpic.cn/mmbiz_png/map09icNxZ4mo8FONSnibO8wIRV6aBwGdXdvyW04eXG9n8S1gic8ybPmHe0GL0FRATFHJE6odaamvlss5vIGhjGcw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n**最后总结**\n\n如果你不太了解动态规划，还能看到这里，真得给你鼓掌，相信你已经掌握了这个算法的设计技巧。\n\n计算机解决问题其实没有任何奇技淫巧，它唯一的解决办法就是穷举，穷举所有可能性。算法设计无非就是先思考“如何穷举”，然后再追求“如何聪明地穷举”。\n\n列出动态转移方程，就是在解决“如何穷举”的问题。之所以说它难，一是因为很多穷举需要递归实现，二是因为有的问题本身的解空间复杂，不那么容易穷举完整。\n\n备忘录、DP table 就是在追求“如何聪明地穷举”。用空间换时间的思路，是降低时间复杂度的不二法门，除此之外，试问，还能玩出啥花活？\n\n本文终。后续计划出几篇动态规划解决经典问题的文章。如果本文对你有帮助，能点个在看/转发/打个赏的话，十分感谢。\n\nPS：关于打赏/在看/转发，说真的，如果文章带给你一点帮助，希望读者能任选一项，留下点痕迹让我知道自己的付出能够为别人创造价值。关于打赏，不必超过 2 元，你我都不在乎这点钱，但这代表着你的认可，写文字的人明白它的意义。以上，对我都是极大的鼓励。"]],[37,37],[8134,8134]]],[1562850142240,["GJX@GJXAIOU",[[1,739,"\n"],[1,774,"\n"],[1,809,"\n"]],[723,810],[813,813]]],[1562850179812,["GJX@GJXAIOU",[[1,1849,"\n"],[1,1873,"\n"],[1,1890,"\n"],[1,1921,"\n"],[1,1935,"\n"],[1,1961,"\n"],[1,1988,"\n"],[1,1989,"\n\n"],[1,2027,"\n"],[1,2039,"\n"],[1,2070,"\n"],[1,2130,"\n"],[1,2149,"\n"]],[1833,2150],[2164,2164]]],[1562850194274,["GJX@GJXAIOU",[[1,3059,"\n"],[1,3088,"\n"],[1,3110,"\n"],[1,3142,"\n"],[1,3180,"\n"],[1,3197,"\n"]],[3043,3198],[3204,3204]]],[1562850205313,["GJX@GJXAIOU",[[1,4217,"\n"],[1,4241,"\n"],[1,4268,"\n"],[1,4305,"\n"],[1,4335,"\n"],[1,4355,"\n"],[1,4374,"\n"],[1,4379,"\n"],[1,4395,"\n"]],[4201,4396],[4405,4405]]],[1562850220220,["GJX@GJXAIOU",[[1,5757,"\n"],[1,5787,"\n"],[1,5809,"\n"],[1,5837,"\n"],[1,5853,"\n"],[1,5893,"\n"],[1,5948,"\n"],[1,5964,"\n"],[1,6000,"\n"],[1,6036,"\n"],[1,6041,"\n"],[1,6078,"\n"]],[5709,6079],[6091,6091]]],[1562850232020,["GJX@GJXAIOU",[[1,6472,"\n"],[1,6489,"\n"],[1,6526,"\n"],[1,6565,"\n"],[1,6566,"\n\n"],[1,6629,"\n"],[1,6659,"\n"],[1,6707,"\n"],[1,6729,"\n"],[1,6757,"\n"],[1,6773,"\n"],[1,6813,"\n"],[1,6870,"\n"],[1,6886,"\n"],[1,6922,"\n"],[1,6958,"\n"],[1,6963,"\n"],[1,6976,"\n"],[1,7023,"\n"],[1,7047,"\n"]],[6424,7048],[7069,7069]]],[1562850241505,["GJX@GJXAIOU",[[1,7245,"\n"],[1,7285,"\n"],[1,7299,"\n"],[1,7340,"\n"],[1,7374,"\n"],[1,7406,"\n"],[1,7445,"\n"],[1,7494,"\n"],[1,7503,"\n"],[1,7508,"\n"],[1,7559,"\n"]],[7197,7560],[7571,7571]]]],null,"GJX@GJXAIOU"],["efac7a5d-1535-4528-9f91-8ff14a3e0688",1562893366089,"---\ndate: '2019-7-11'\n---\n\n# 动态规划详解\n\n动态规划算法（Dynamic Programming，简称 DP）似乎是一种很高深莫测的算法，你会在一些面试或算法书籍的高级技巧部分看到相关内容，什么状态转移方程，重叠子问题，最优子结构等高大上的词汇也可能让你望而却步。\n\n而且，当你去看用动态规划解决某个问题的代码时，你会觉得这样解决问题竟然如此巧妙，但却难以理解，你可能惊讶于人家是怎么想到这种解法的。\n\n实际上，动态规划是一种常见的「算法设计技巧」，并没有什么高深莫测，至于各种高大上的术语，那是吓唬别人用的，只要你亲自体验几把，这些名词的含义其实显而易见，再简单不过了。\n\n至于为什么最终的解法看起来如此精妙，是因为动态规划遵循一套固定的流程：**递归的暴力解法 -> 带备忘录的递归解法 -> 非递归的动态规划解法**。这个过程是层层递进的解决问题的过程，你如果没有前面的铺垫，直接看最终的非递归动态规划解法，当然会觉得牛逼而不可及了。\n\n当然，见的多了，思考多了，是可以一步写出非递归的动态规划解法的。任何技巧都需要练习，我们先遵循这个流程走，算法设计也就这些套路，除此之外，真的没啥高深的。\n\n本文会通过两个个比较简单的例子：斐波那契和凑零钱问题，揭开动态规划的神秘面纱，描述上述三个流程。后续还会写几篇文章探讨如何使用动态规划技巧解决比较复杂的经典问题。\n\n首先，第一个快被举烂了的例子，斐波那契数列。请读者不要嫌弃这个例子简单，因为简单的例子才能让你把精力充分集中在算法背后的通用思想和技巧上，而不会被那些隐晦的细节问题搞的莫名其妙。后续，困难的例子有的是。\n\n**步骤一、暴力的递归算法**\n\n```\nint fib(int N) {\n    if (N == 1 || N == 2) return 1;\n    return fib(N - 1) + fib(N - 2);\n}\n```\n\n这个不用多说了，学校老师讲递归的时候似乎都是拿这个举例。我们也知道这样写代码虽然简洁易懂，但是十分低效，低效在哪里？假设 n = 20，请画出递归树。\n\nPS：但凡遇到需要递归的问题，最好都画出递归树，这对你分析算法的复杂度，寻找算法低效的原因都有巨大帮助。\n\n![](https://mmbiz.qpic.cn/mmbiz_png/map09icNxZ4mo8FONSnibO8wIRV6aBwGdXBxic1kgN5OseFPmy50jdyTDEfTVpPFjPZsKiaRyhBb63V3yv1gQqnHgg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n这个递归树怎么理解？就是说想要计算原问题 f(20)，我就得先计算出子问题 f(19) 和 f(18)，然后要计算 f(19)，我就要先算出子问题 f(18) 和 f(17)，以此类推。最后遇到 f(1) 或者 f(2) 的时候，结果已知，就能直接返回结果，递归树不再向下生长了。\n\n**递归算法的时间复杂度怎么计算？子问题个数乘以解决一个子问题需要的时间。**\n\n子问题个数，即递归树中节点的总数。显然二叉树节点总数为指数级别，所以子问题个数为 O(2^n)。\n\n解决一个子问题的时间，在本算法中，没有循环，只有 f(n - 1) + f(n - 2) 一个加法操作，时间为 O(1)。\n\n所以，这个算法的时间复杂度为 O(2^n)，指数级别，爆炸。\n\n观察递归树，很明显发现了算法低效的原因：存在大量重复计算，比如 f(18) 被计算了两次，而且你可以看到，以 f(18) 为根的这个递归树体量巨大，多算一遍，会耗费巨大的时间。更何况，还不止 f(18) 这一个节点被重复计算，所以这个算法及其低效。\n\n这就是动态规划问题的第一个性质：**重叠子问题**。下面，我们想办法解决这个问题。\n\n**步骤二、带备忘录的递归解法**\n\n明确了问题，其实就已经把问题解决了一半。即然耗时的原因是重复计算，那么我们可以造一个「备忘录」，每次算出某个子问题的答案后别急着返回，先记到「备忘录」里再返回；每次遇到一个子问题先去「备忘录」里查一查，如果发现之前已经解决过这个问题了，直接把答案拿出来用，不要再耗时去计算了。\n\n一般使用一个数组充当这个「备忘录」，当然你也可以使用哈希表（字典），思想都是一样的。\n\n```\nint fib(int N) {\n    if (N < 1) return 0;\n    // 备忘录全初始化为 0\n    vector<int> memo(N + 1, 0);\n    // 初始化最简情况\n    memo[1] = memo[2] = 1;\n    return helper(memo, N);\n}\n\nint helper(vector<int>& memo, int n) {\n    // 未被计算过\n    if (n > 0 && memo[n] == 0) \n        memo[n] = helper(memo, n - 1) + helper(memo, n - 2);\n    return memo[n];\n}\n```\n\n现在，画出递归树，你就知道「备忘录」到底做了什么。\n\n![](https://mmbiz.qpic.cn/mmbiz_png/map09icNxZ4mo8FONSnibO8wIRV6aBwGdXpibYjXibLMsGeX4serz0LsGFg7FcJ4wVAzIYDvWKia7PGKHPDcZ5ib56YA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n实际上，带「备忘录」的递归算法，把一棵存在巨量冗余的递归树通过「剪枝」，改造成了一幅不存在冗余的递归图，极大减少了子问题（即递归图中节点）的个数。\n\n递归算法的时间复杂度怎么算？子问题个数乘以解决一个子问题需要的时间。\n\n子问题个数，即图中节点的总数，由于本算法不存在冗余计算，子问题就是 f(1), f(2), f(3) ... f(20)，数量和输入规模 n = 20 成正比，所以子问题个数为 O(n)。\n\n解决一个子问题的时间，同上，没有什么循环，时间为 O(1)。\n\n所以，本算法的时间复杂度是 O(n)。比起暴力算法，是降维打击。\n\n至此，带备忘录的递归解法的效率已经和动态规划一样了。实际上，这种解法和动态规划的思想已经差不多了，只不过这种方法叫做「自顶向下」，动态规划叫做「自底向上」。\n\n啥叫「自顶向下」？注意我们刚才画的递归树（或者说图），是从上向下延伸，都是从一个规模较大的原问题比如说 f(20)，向下逐渐分解规模，直到 f(1) 和 f(2) 触底，然后逐层返回答案，这就叫「自顶向下」。\n\n啥叫「自底向上」？反过来，我们直接从最底下，最简单，问题规模最小的 f(1) 和 f(2) 开始往上推，直到推到我们想要的答案 f(20)，这就是动态规划的思路，这也是为什么动态规划一般都脱离了递归，而是由循环迭代完成计算。\n\n**步骤三、动态规划**\n\n有了上一步「备忘录」的启发，我们可以把这个「备忘录」独立出来成为一张表，就叫做 DP table 吧，在这张表上完成「自底向上」的推算岂不美哉！\n\n```\nint fib(int N) {\n    vector<int> dp(N + 1, 0);\n    dp[1] = dp[2] = 1;\n    for (int i = 3; i <= N; i++)\n        dp[i] = dp[i - 1] + dp[i - 2];\n    return dp[N];\n}\n```\n\n![](https://mmbiz.qpic.cn/mmbiz_png/map09icNxZ4mo8FONSnibO8wIRV6aBwGdXja5uw3bPZyR5RsunibhSHndx5INHkicB7Me432wyD48lHOVyfHFhKjkg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n画个图就很好理解了，而且你发现这个 DP table 特别像之前那个「剪枝」后的结果，只是反过来算而已。实际上，带备忘录的递归解法中的「备忘录」，最终完成后就是这个 DP table，所以说这两种解法其实是差不多的，大部分情况下，效率也基本相同。\n\n这里，引出「动态转移方程」这个名词，实际上就是描述问题结构的数学形式：\n\n![](https://mmbiz.qpic.cn/mmbiz_png/map09icNxZ4mo8FONSnibO8wIRV6aBwGdX8tDKIn3ZlIcut61MVCIY8kcEJfxVwnfUmsvlOibogDt27nxUa50cnDA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n为啥叫「状态转移方程」？为了听起来高端。你把 f(n) 想做一个状态 n，这个状态 n 是由状态 n - 1 和状态 n - 2 相加转移而来，这就叫状态转移，仅此而已。\n\n你会发现，上面的几种解法中的所有操作，例如 return f(n - 1) + f(n - 2)，dp[i] = dp[i - 1] + dp[i - 2]，以及对备忘录或 DP table 的初始化操作，都是围绕这个方程式的不同表现形式。可见列出「状态转移方程」的重要性，它是解决问题的核心。很容易发现，其实状态转移方程直接代表着暴力解法。\n\n**千万不要看不起暴力解，动态规划问题最困难的就是写出状态转移方程**，即这个暴力解。优化方法无非是用备忘录或者 DP table，再无奥妙可言。\n\n这个例子的最后，讲一个细节优化。细心的读者会发现，根据斐波那契数列的状态转移方程，当前状态只和之前的两个状态有关，其实并不需要那么长的一个 DP table 来存储所有的状态，只要想办法存储之前的两个状态就行了。所以，可以进一步优化，把空间复杂度降为 O(1)：\n\n```\nint fib(int n) {\n    if (n < 2) return n;\n    int prev = 0, curr = 1;\n    for (int i = 0; i < n - 1; i++) {\n        int sum = prev + curr;\n        prev = curr;\n        curr = sum;\n    }\n    return curr;\n}\n```\n\n有人会问，动态规划的另一个重要特性「最优子结构」，怎么没有涉及？下面会涉及。斐波那契数列的例子严格来说不算动态规划，以上旨在演示算法设计螺旋上升的过程。当问题中要求求一个最优解或在代码中看到循环和 max、min 等函数时，十有八九，需要动态规划大显身手。\n\n下面，看第二个例子，凑零钱问题，有了上面的详细铺垫，这个问题会很快解决。\n\n题目：给你 k 种面值的硬币，面值分别为 c1, c2 ... ck，再给一个总金额 n，问你最少需要几枚硬币凑出这个金额，如果不可能凑出，则回答 -1 。\n\n比如说，k = 3，面值分别为 1，2，5，总金额 n = 11，那么最少需要 3 枚硬币，即 11 = 5 + 5 + 1 。下面走流程。\n\n**一、暴力解法**\n\n首先是最困难的一步，写出状态转移方程，这个问题比较好写：\n\n![](https://mmbiz.qpic.cn/mmbiz_png/map09icNxZ4mo8FONSnibO8wIRV6aBwGdXMW60mQnobpZ4pwmjGZYKwjhC8zA4ckTibQksLicrLWazpuMktVZxksmg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n其实，这个方程就用到了**「最优子结构」性质：原问题的解由子问题的最优解构成。**即 f(11) 由 f(10), f(9), f(6) 的最优解转移而来。\n\n记住，**要符合「最优子结构」，子问题间必须互相独立。**啥叫相互独立？你肯定不想看数学证明，我用一个直观的例子来讲解。\n\n比如说，你的原问题是考出最高的总成绩，那么你的子问题就是要把语文考到最高，数学考到最高...... 为了每门课考到最高，你要把每门课相应的选择题分数拿到最高，填空题分数拿到最高...... 当然，最终就是你每门课都是满分，这就是最高的总成绩。\n\n得到了正确的结果：最高的总成绩就是总分。因为这个过程符合最优子结构，“每门科目考到最高”这些子问题是互相独立，互不干扰的。\n\n但是，如果加一个条件：你的语文成绩和数学成绩会互相制约，此消彼长。这样的话，显然你能考到的最高总成绩就达不到总分了，按刚才那个思路就会得到错误的结果。因为子问题并不独立，语文数学成绩无法同时最优，所以最优子结构被破坏。\n\n回到凑零钱问题，显然子问题之间没有相互制约，而是互相独立的。所以这个状态转移方程是可以得到正确答案的。\n\n之后就没啥难点了，按照方程写暴力递归算法即可。如果不太会写递归，参见前文 [递归详解](http://mp.weixin.qq.com/s?__biz=MzU0MDg5OTYyOQ==&mid=2247483761&idx=1&sn=a8ff4647e85f6a01b19e1786458b4394&chksm=fb336133cc44e82549cbbe47ff6d1cd3d3d4d9690bcee1d5349cc6c6a4d8ca6c3b0e1672a8a9&scene=21#wechat_redirect)。\n\n```\nint coinChange(vector<int>& coins, int amount) {\n    if (amount == 0) return 0;\n    int ans = INT_MAX;\n    for (int coin : coins) {\n        // 金额不可达\n        if (amount - coin < 0) continue;\n        int subProb = coinChange(coins, amount - coin);\n        // 子问题无解\n        if (subProb == -1) continue;\n        ans = min(ans, subProb + 1);\n    }\n    return ans == INT_MAX ? -1 : ans;\n}\n```\n\n画出递归树：\n\n![](https://mmbiz.qpic.cn/mmbiz_png/map09icNxZ4mo8FONSnibO8wIRV6aBwGdXJgqKoIoj4ye7gpybTibhL5sUIGOGuXxASQSCmxLkAxysq4ufZMY73Zw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n时间复杂度分析：子问题总数 x 每个子问题的时间。子问题总数为递归树节点个数，这个比较难看出来，是 O(n^k)，总之是指数级别的。每个子问题中含有一个 for 循环，复杂度为 O(k)。所以总时间复杂度为 O(k*n^k)，指数级别。\n\n**二、带备忘录的递归算法**\n\n```\nint coinChange(vector<int>& coins, int amount) {\n    // 备忘录初始化为 -2\n    vector<int> memo(amount + 1, -2);\n    return helper(coins, amount, memo);\n}\n\nint helper(vector<int>& coins, int amount, vector<int>& memo) {\n    if (amount == 0) return 0;\n    if (memo[amount] != -2) return memo[amount];\n    int ans = INT_MAX;\n    for (int coin : coins) {\n        // 金额不可达\n        if (amount - coin < 0) continue;\n        int subProb = helper(coins, amount - coin, memo);\n        // 子问题无解\n        if (subProb == -1) continue;\n        ans = min(ans, subProb + 1);\n    }\n    // 记录本轮答案\n    memo[amount] = (ans == INT_MAX) ? -1 : ans;\n    return memo[amount];\n}\n```\n\n不画图了，很显然「备忘录」大大减小了子问题数目，完全消除了子问题的冗余，所以子问题总数不会超过金额数 n，即子问题数目为 O(n)。处理一个子问题的时间不变，仍是 O(k)，所以总的时间复杂度是 O(kn)。\n\n**三、动态规划**\n\n```\nint coinChange(vector<int>& coins, int amount) {\n    vector<int> dp(amount + 1, INT_MAX);\n    dp[0] = 0;\n    for (int i = 0; i < dp.size(); i++) {\n        // 内层 for 在求所有子问题 + 1 的最小值\n        for (int coin : coins) {\n            if (i - coin < 0) continue;\n            dp[i] = min(dp[i], 1 + dp[i - coin]);\n        }\n    }\n    return dp[amount] == INT_MAX ? -1 : dp[amount];\n}\n```\n\n![](https://mmbiz.qpic.cn/mmbiz_png/map09icNxZ4mo8FONSnibO8wIRV6aBwGdXdvyW04eXG9n8S1gic8ybPmHe0GL0FRATFHJE6odaamvlss5vIGhjGcw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n**最后总结**\n\n如果你不太了解动态规划，还能看到这里，真得给你鼓掌，相信你已经掌握了这个算法的设计技巧。\n\n计算机解决问题其实没有任何奇技淫巧，它唯一的解决办法就是穷举，穷举所有可能性。算法设计无非就是先思考“如何穷举”，然后再追求“如何聪明地穷举”。\n\n列出动态转移方程，就是在解决“如何穷举”的问题。之所以说它难，一是因为很多穷举需要递归实现，二是因为有的问题本身的解空间复杂，不那么容易穷举完整。\n\n备忘录、DP table 就是在追求“如何聪明地穷举”。用空间换时间的思路，是降低时间复杂度的不二法门，除此之外，试问，还能玩出啥花活？\n\n本文终。后续计划出几篇动态规划解决经典问题的文章。如果本文对你有帮助，能点个在看/转发/打个赏的话，十分感谢。\n\nPS：关于打赏/在看/转发，说真的，如果文章带给你一点帮助，希望读者能任选一项，留下点痕迹让我知道自己的付出能够为别人创造价值。关于打赏，不必超过 2 元，你我都不在乎这点钱，但这代表着你的认可，写文字的人明白它的意义。以上，对我都是极大的鼓励。\n\n",[[1562893338495,["GJX@GJXAIOU",[[1,899,"**"],[1,947,"**"]],[899,947],[899,951]]],[1562893345213,["GJX@GJXAIOU",[[1,702,"## "]],[702,702],[720,720]]],[1562893353010,["GJX@GJXAIOU",[[1,1633,"## "]],[1633,1633],[1653,1653]]],[1562893357898,["GJX@GJXAIOU",[[1,2961,"## "]],[2961,2961],[2976,2976]]],[1562893371020,["GJX@GJXAIOU",[[1,7768,"## "]],[7768,7768],[7779,7779]]],[1562893374780,["GJX@GJXAIOU",[[1,7194,"## "]],[7194,7194],[7207,7207]]],[1562893380058,["GJX@GJXAIOU",[[1,6416,"## "]],[6416,6416],[6434,6434]]],[1562893384995,["GJX@GJXAIOU",[[1,4744,"## "]],[4744,4744],[4757,4757]]],[1562893515187,["GJX@GJXAIOU",[[1,1319,"**"],[1,1324,"**"]],[1319,1324],[1319,1328]]],[1562893536889,["GJX@GJXAIOU",[[-1,1328,"，"]],[1329,1329],[1328,1328]]],[1562893537920,["GJX@GJXAIOU",[[-1,729," "],[1,730," "],[-1,737," N) {\n    if (N == 1 || N == 2) "],[1,769," N) {\n    if (N == 1 || N == 2) "],[-1,775," 1;\n    "],[1,783," 1;\n    "],[-1,789," "],[1,790," "],[-1,795," - 1) + "],[1,803," - 1) + "],[-1,808," - "],[1,811," - "],[-1,1328,""],[1,1328,":"],[-1,1849," "],[1,1850," "],[-1,1857," N) {\n    if (N < 1) "],[1,1878," N) {\n    if (N < 1) "],[-1,1884," 0;\n    // "],[1,1895," 0;\n    // "],[-1,1903," 0\n    "],[1,1910," 0\n    "],[-1,1921," "],[1,1922," "],[-1,1928," + 1, "],[1,1934," + 1, "],[-1,1938,"    // "],[1,1945,"    // "],[-1,1953,"    "],[1,1957,"    "],[-1,1964," = "],[1,1967," = "],[-1,1974," = 1;\n    "],[1,1984," = 1;\n    "],[-1,1990," "],[1,1991," "],[-1,2003," "],[1,2004," "],[-1,2014," "],[1,2015," "],[-1,2034," "],[1,2035," "],[-1,2040," int n) {\n    // "],[1,2057," int n) {\n    // "],[-1,2063,"    if (n > 0 && "],[1,2080,"    if (n > 0 && "],[-1,2087," == 0) \n        "],[1,2103," == 0) \n        "],[-1,2110," = "],[1,2113," = "],[-1,2125," n - 1) + "],[1,2135," n - 1) + "],[-1,2147," n - "],[1,2152," n - "],[-1,2156,"    "],[1,2160,"    "],[-1,2166," "],[1,2167," "],[-1,3062," "],[1,3063," "],[-1,3070," N) {\n    "],[1,3080," N) {\n    "],[-1,3091," "],[1,3092," "],[-1,3096," + 1, "],[1,3102," + 1, "],[-1,3106,"    "],[1,3110,"    "],[-1,3115," = "],[1,3118," = "],[-1,3123," = 1;\n    for "],[1,3137," = 1;\n    for "],[-1,3141," i = 3; i <= N; "],[1,3157," i = 3; i <= N; "],[-1,3162,"        "],[1,3170,"        "],[-1,3175," = "],[1,3178," = "],[-1,3182," - 1] + "],[1,3190," - 1] + "],[-1,3194," - "],[1,3197," - "],[-1,3201,"    "],[1,3205,"    "],[-1,3211," "],[1,3212," "],[-1,4220," "],[1,4221," "],[-1,4228," n) {\n    if (n < 2) "],[1,4249," n) {\n    if (n < 2) "],[-1,4255," n;\n    int "],[1,4267," n;\n    int "],[-1,4271," = 0, "],[1,4277," = 0, "],[-1,4281," = 1;\n    for "],[1,4295," = 1;\n    for "],[-1,4299," i = 0; i < n - 1; "],[1,4318," i = 0; i < n - 1; "],[-1,4322," {\n        int sum = "],[1,4343," {\n        int sum = "],[-1,4347," + "],[1,4350," + "],[-1,4356,"        "],[1,4364,"        "],[-1,4368," = "],[1,4371," = "],[-1,4377,"        "],[1,4385,"        "],[-1,4389," = "],[1,4392," = "],[-1,4397,"    }\n    "],[1,4407,"    }\n    "],[-1,4413," "],[1,4414," "],[-1,5499," "],[1,5500," "],[-1,5731," "],[1,5732," "],[-1,5755," "],[1,5756," "],[-1,5762," int "],[1,5767," int "],[-1,5774," {\n    if "],[1,5784," {\n    if "],[-1,5791," == 0) "],[1,5798," == 0) "],[-1,5804," 0;\n    int ans = "],[1,5822," 0;\n    int ans = "],[-1,5831,"    for "],[1,5839,"    for "],[-1,5843," "],[1,5844," "],[-1,5848," : "],[1,5851," : "],[-1,5857," {\n        // "],[1,5871," {\n        // "],[-1,5877,"        if "],[1,5888,"        if "],[-1,5895," - "],[1,5898," - "],[-1,5902," < 0) "],[1,5908," < 0) "],[-1,5918,"        int "],[1,5930,"        int "],[-1,5937," = "],[1,5940," = "],[-1,5957," "],[1,5958," "],[-1,5964," - "],[1,5967," - "],[-1,5974,"        // "],[1,5985,"        // "],[-1,5991,"        if "],[1,6002,"        if "],[-1,6010," == -1) "],[1,6018," == -1) "],[-1,6028,"        ans = "],[1,6042,"        ans = "],[-1,6050," "],[1,6051," "],[-1,6058," + "],[1,6061," + "],[-1,6065,"    }\n    "],[1,6075,"    }\n    "],[-1,6081," ans == "],[1,6089," ans == "],[-1,6096," ? -1 : "],[1,6104," ? -1 : "],[-1,6449," "],[1,6450," "],[-1,6473," "],[1,6474," "],[-1,6480," int "],[1,6485," int "],[-1,6492," {\n    // "],[1,6502," {\n    // "],[-1,6509," -2\n    "],[1,6517," -2\n    "],[-1,6528," "],[1,6529," "],[-1,6540," + 1, "],[1,6546," + 1, "],[-1,6551,"    "],[1,6555,"    "],[-1,6561," "],[1,6562," "],[-1,6575," "],[1,6576," "],[-1,6583," "],[1,6584," "],[-1,6597," "],[1,6598," "],[-1,6617," "],[1,6618," "],[-1,6624," int "],[1,6629," int "],[-1,6636," "],[1,6637," "],[-1,6649," "],[1,6650," "],[-1,6655," {\n    if "],[1,6665," {\n    if "],[-1,6672," == 0) "],[1,6679," == 0) "],[-1,6685," 0;\n    if "],[1,6696," 0;\n    if "],[-1,6709," != -2) "],[1,6717," != -2) "],[-1,6723," "],[1,6724," "],[-1,6738,"    int ans = "],[1,6752,"    int ans = "],[-1,6761,"    for "],[1,6769,"    for "],[-1,6773," "],[1,6774," "],[-1,6778," : "],[1,6781," : "],[-1,6787," {\n        // "],[1,6801," {\n        // "],[-1,6807,"        if "],[1,6818,"        if "],[-1,6825," - "],[1,6828," - "],[-1,6832," < 0) "],[1,6838," < 0) "],[-1,6848,"        int "],[1,6860,"        int "],[-1,6867," = "],[1,6870," = "],[-1,6883," "],[1,6884," "],[-1,6890," - "],[1,6893," - "],[-1,6898," "],[1,6899," "],[-1,6906,"        // "],[1,6917,"        // "],[-1,6923,"        if "],[1,6934,"        if "],[-1,6942," == -1) "],[1,6950," == -1) "],[-1,6960,"        ans = "],[1,6974,"        ans = "],[-1,6982," "],[1,6983," "],[-1,6990," + "],[1,6993," + "],[-1,6997,"    }\n    // "],[1,7010,"    }\n    // "],[-1,7017,"    "],[1,7021,"    "],[-1,7033," = "],[1,7036," = "],[-1,7040," == "],[1,7044," == "],[-1,7052," ? -1 : "],[1,7060," ? -1 : "],[-1,7065,"    "],[1,7069,"    "],[-1,7075," "],[1,7076," "],[-1,7225," "],[1,7226," "],[-1,7249," "],[1,7250," "],[-1,7256," int "],[1,7261," int "],[-1,7268," {\n    "],[1,7275," {\n    "],[-1,7286," "],[1,7287," "],[-1,7296," + 1, "],[1,7302," + 1, "],[-1,7312,"    "],[1,7316,"    "],[-1,7321," = 0;\n    for "],[1,7335," = 0;\n    for "],[-1,7339," i = 0; i < "],[1,7351," i = 0; i < "],[-1,7361," "],[1,7362," "],[-1,7366," {\n        // 内层 for "],[1,7387," {\n        // 内层 for "],[-1,7394," + 1 "],[1,7399," + 1 "],[-1,7404,"        for "],[1,7416,"        for "],[-1,7420," "],[1,7421," "],[-1,7425," : "],[1,7428," : "],[-1,7434," {\n            if (i - "],[1,7457," {\n            if (i - "],[-1,7461," < 0) "],[1,7467," < 0) "],[-1,7477,"            "],[1,7489,"            "],[-1,7494," = "],[1,7497," = "],[-1,7507," 1 + "],[1,7512," 1 + "],[-1,7516," - "],[1,7519," - "],[-1,7527,"        }\n    }\n    "],[1,7547,"        }\n    }\n    "],[-1,7553," "],[1,7554," "],[-1,7564," == "],[1,7568," == "],[-1,7575," ? -1 : "],[1,7583," ? -1 : "]],[1328,1328],[1329,1329]]],[1562893541209,["GJX@GJXAIOU",[[-1,1328,":"]],[1329,1329],[1328,1328]]],[1562893543260,["GJX@GJXAIOU",[[1,1326,":"]],[1326,1326],[1327,1327]]],[1562893545083,["GJX@GJXAIOU",[[1,1329," "]],[1329,1329],[1330,1330]]]],null,"GJX@GJXAIOU"]]}