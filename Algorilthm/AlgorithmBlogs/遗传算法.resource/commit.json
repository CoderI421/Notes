{"compress":true,"commitItems":[["b6614e76-4cbb-4d9f-b7d7-cea28e36be95",1562764212360,"",[[1562764170796,["GJX@GJXAIOU",[[1,0,"# 遗传算法\n\n\n\n"]],[0,0],[9,9]]],[1562765582264,["GJX@GJXAIOU",[[1,9,"![1]($resource/1.jpg)\n"]],[9,9],[31,31]]],[1562765772243,["GJX@GJXAIOU",[[-1,9,"![1]($resource/1.jpg)"]],[9,30],[9,9]]],[1562765774500,["GJX@GJXAIOU",[[1,7,"三：遗传算法\n\n        照例先给出科学定义：\n\n       遗传算法（Genetic Algorithm, GA）起源于对生物系统所进行的计算机模拟研究。它是模仿自然界生物进化机制发展起来的随机全局搜索和优化方法，借鉴了达尔文的进化论和孟德尔的遗传学说。其本质是一种高效、并行、全局搜索的方法，能在搜索过程中自动获取和积累有关搜索空间的知识，并自适应地控制搜索过程以求得最佳解。\n\n \n\n     再给出相关术语：（各位看看就好，后面都会涉及到，再细说）\n\n基因型(genotype)：性状染色体的内部表现；\n\n表现型(phenotype)：染色体决定的性状的外部表现，或者说，根据基因型形成的个体的外部表现；\n\n进化(evolution)：种群逐渐适应生存环境，品质不断得到改良。生物的进化是以种群的形式进行的。\n\n适应度(fitness)：度量某个物种对于生存环境的适应程度。\n\n选择(selection)：以一定的概率从种群中选择若干个个体。一般，选择过程是一种基于适应度的优胜劣汰的过程。\n\n复制(reproduction)：细胞分裂时，遗传物质DNA通过复制而转移到新产生的细胞中，新细胞就继承了旧细胞的基因。\n\n交叉(crossover)：两个染色体的某一相同位置处DNA被切断，前后两串分别交叉组合形成两个新的染色体。也称基因重组或杂交；\n\n变异(mutation)：复制时可能（很小的概率）产生某些复制差错，变异产生新的染色体，表现出新的性状。\n\n编码(coding)：DNA中遗传信息在一个长链上按一定的模式排列。遗传编码可看作从表现型到基因型的映射。\n\n解码(decoding)：基因型到表现型的映射。\n\n个体（individual）：指染色体带有特征的实体；\n种群（population）：个体的集合，该集合内个体数称为种群\n\n                  的大小。        \n\n \n\n       遗传算法的有趣应用很多，诸如寻路问题，8数码问题，囚犯困境，动作控制，找圆心问题（在一个不规则的多边形中，寻找一个包含在该多边形内的最大圆圈的圆心），TSP问题，生产调度问题，人工生命模拟等。下面我以袋鼠为例子讲讲遗传算法。（因为袋鼠会跳）\n\n \n\n     遗传算法中每一条染色体，对应着遗传算法的一个解决方案，一般我们用适应性函数（fitness function）来衡量这个解决方案的优劣。所以从一个基因组到其解的适应度形成一个映射。可以把遗传算法的过程看作是一个在多元函数里面求最优解的过程。可以这样想象，这个多维曲面里面有数不清的“山峰”，而这些山峰所对应的就是局部最优解。而其中也会有一个“山峰”的海拔最高的，那么这个就是全局最优解。而遗传算法的任务就是尽量爬到最高峰，而不是陷落在一些小山峰。（另外，值得注意的是遗传算法不一定要找“最高的山峰”，如果问题的适应度评价越小越好的话，那么全局最优解就是函数的最小值，对应的，遗传算法所要找的就是“最深的谷底”）\n                                                          \n\n\n\n问题的提出与解决方案：\n\n   让我们先来考虑考虑下面这个问题的解决办法。\n\n           已知一元函数：\n\n      \n\n现在要求在既定的区间内找出函数的最大值  \n\n\n\n                                                    \n“袋鼠跳”问题\n\n        既然我们把函数曲线理解成一个一个山峰和山谷组成的山脉。那么我们可以设想所得到的每一个解就是一只袋鼠，我们希望它们不断的向着更高处跳去，直到跳到最高的山峰（尽管袋鼠本身不见得愿意那么做）。所以求最大值的过程就转化成一个“袋鼠跳”的过程。\n\n作为对比下面简单介绍“袋鼠跳”的几种方式。\n\n 1. 爬山法（最速上升爬山法）：\n\n      从搜索空间中随机产生邻近的点，从中选择对应解最优的个体，替换原来的个体，不断重复上述过程。因为爬山法只对“邻近”的点作比较，所以目光比较“短浅”，常常只能收敛到离开初始位置比较近的局部最优解上面。对于存在很多局部最优点的问题，通过一个简单的迭代找出全局最优解的机会非常渺茫。（在爬山法中，袋鼠最有希望到达最靠近它出发点的山顶，但不能保证该山顶是珠穆朗玛峰，或者是一个非常高的山峰。因为一路上它只顾上坡，没有下坡。）\n\n2. 模拟退火：\n\n     这个方法来自金属热加工过程的启发。在金属热加工过程中，当金属的温度超过它的熔点（Melting Point）时，原子就会激烈地随机运动。与所有的其它的物理系统相类似，原子的这种运动趋向于寻找其能量的极小状态。在这个能量的变迁过程中，开始时，温度非常高， 使得原子具有很高的能量。随着温度不断降低，金属逐渐冷却，金属中的原子的能量就越来越小，最后达到所有可能的最低点。利用模拟退火的时候，让算法从较大的跳跃开始，使到它有足够的“能量”逃离可能“路过”的局部最优解而不至于限制在其中，当它停在全局最优解附近的时候，逐渐的减小跳跃量，以便使其“落脚 ”到全局最优解上。（在模拟退火中，袋鼠喝醉了，而且随机地大跳跃了很长时间。运气好的话，它从一个山峰跳过山谷，到了另外一个更高的山峰上。但最后，它渐渐清醒了并朝着它所在的峰顶跳去。）\n\n3. 遗传算法：\n\n    模拟物竞天择的生物进化过程，通过维护一个潜在解的群体执行了多方向的搜索，并支持这些方向上的信息构成和交换。是以面为单位的搜索，比以点为单位的搜索，更能发现全局最优解。（在遗传算法中，有很多袋鼠，它们降落到喜玛拉雅山脉的任意地方。这些袋鼠并不知道它们的任务是寻找珠穆朗玛峰。但每过几年，就在一些海拔高度较低的地方射杀一些袋鼠，并希望存活下来的袋鼠是多产的，在它们所处的地方生儿育女。）（或者换个说法。从前，有一大群袋鼠，它们被莫名其妙的零散地遗弃于喜马拉雅山脉。于是只好在那里艰苦的生活。海拔低的地方弥漫着一种无色无味的毒气，海拔越高毒气越稀薄。可是可怜的袋鼠们对此全然不觉，还是习惯于活蹦乱跳。于是，不断有袋鼠死于海拔较低的地方，而越是在海拔高的袋鼠越是能活得更久，也越有机会生儿育女。就这样经过许多年，这些袋鼠们竟然都不自觉地聚拢到了一个个的山峰上，可是在所有的袋鼠中，只有聚拢到珠穆朗玛峰的袋鼠被带回了美丽的澳洲。）\n\n \n\n \n\n遗传算法的实现过程\n\n        遗传算法的实现过程实际上就像自然界的进化过程那样。首先寻找一种对问题潜在解进行“数字化”编码的方案。（建立表现型和基因型的映射关系）然后用随机数初始化一个种群（那么第一批袋鼠就被随意地分散在山脉上），种群里面的个体就是这些数字化的编码。接下来，通过适当的解码过程之后（得到袋鼠的位置坐标），用适应性函数对每一个基因个体作一次适应度评估（袋鼠爬得越高，越是受我们的喜爱，所以适应度相应越高）。用选择函数按照某种规定择优选择（我们要每隔一段时间，在山上射杀一些所在海拔较低的袋鼠，以保证袋鼠总体数目持平。）。让个体基因变异（让袋鼠随机地跳一跳）。然后产生子代（希望存活下来的袋鼠是多产的，并在那里生儿育女）。遗传算法并不保证你能获得问题的最优解，但是使用遗传算法的最大优点在于你不必去了解和操心如何去“找”最优解。（你不必去指导袋鼠向那边跳，跳多远。）而只要简单的“否定”一些表现不好的个体就行了。（把那些总是爱走下坡路的袋鼠射杀，这就是遗传算法的精粹！）\n\n \n\n 所以我们总结出遗传算法的一般步骤：\n\n       开始循环直至找到满意的解。\n\n1.评估每条染色体所对应个体的适应度。\n\n2.遵照适应度越高，选择概率越大的原则，从种群中选择两个个体作为父方和母方。\n\n3.抽取父母双方的染色体，进行交叉，产生子代。\n\n4.对子代的染色体进行变异。\n\n5.重复2，3，4步骤，直到新种群的产生。\n\n结束循环。\n\n                                                \n接下来，我们将详细地剖析遗传算法过程的每一个细节。\n\n编制袋鼠的染色体----基因的编码方式\n\n      受到人类染色体结构的启发，我们可以设想一下，假设目前只有“0”，“1”两种碱基，我们也用一条链条把他们有序的串连在一起，因为每一个单位都能表现出 1 bit的信息量，所以一条足够长的染色体就能为我们勾勒出一个个体的所有特征。这就是二进制编码法，染色体大致如下：\n\n010010011011011110111110\n\n     上面的编码方式虽然简单直观，但明显地，当个体特征比较复杂的时候，需要大量的编码才能精确地描述，相应的解码过程（类似于生物学中的DNA翻译过程，就是把基因型映射到表现型的过程。）将过分繁复，为改善遗传算法的计算复杂性、提高运算效率，提出了浮点数编码。染色体大致如下：\n\n1.2 –3.3 – 2.0 –5.4 – 2.7 – 4.3\n\n（注：还有一种编码方式叫符号编码）\n\n      那么我们如何利用这两种编码方式来为袋鼠的染色体编码呢？因为编码的目的是建立表现型到基因型的映射关系，而表现型一般就被理解为个体的特征。比如人的基因型是46条染色体所描述的却能解码成一个眼，耳，口，鼻等特征各不相同的活生生的人。所以我们要想为“袋鼠”的染色体编码，我们必须先来考虑“袋鼠”的“个体特征”是什么。也许有的人会说，袋鼠的特征很多，比如性别，身长，体重，也许它喜欢吃什么也能算作其中一个特征。但具体在解决这个问题的情况下，我们应该进一步思考：无论这只袋鼠是长短，肥瘦，黑白只要它在低海拔就会被射杀，同时也没有规定身长的袋鼠能跳得远一些，身短的袋鼠跳得近一些。当然它爱吃什么就更不相关了。我们由始至终都只关心一件事情：袋鼠在哪里。因为只要我们知道袋鼠在那里，我们就能做两件必须去做的事情：\n\n（1）通过查阅喜玛拉雅山脉的地图来得知袋鼠所在的海拔高度（通过自变量求适应函数的值。）以判断我们有没必要把它射杀。\n\n（2）知道袋鼠跳一跳（交叉和变异）后去到哪个新位置。\n\n      如果我们一时无法准确的判断哪些“个体特征”是必要的，哪些是非必要的，我们常常可以用到这样一种思维方式：比如你认为袋鼠的爱吃什么东西非常必要，那么你就想一想，有两只袋鼠，它们其它的个体特征完全同等的情况下，一只长得黑，另外一只长得不是那么黑。你会马上发现，这不会对它们的命运有丝毫的影响，它们应该有同等的概率被射杀！只因它们处于同一个地方。（值得一提的是，如果你的基因编码设计中包含了袋鼠黑不黑的信息，这其实不会影响到袋鼠的进化的过程，而那只攀到珠穆朗玛峰的袋鼠黑与白什么的也完全是随机的，但是它所在的位置却是非常确定的。）\n\n   以上是对遗传算法编码过程中经常经历的思维过程，必须把具体问题抽象成数学模型，突出主要矛盾，舍弃次要矛盾。只有这样才能简洁而有效的解决问题。\n\n     既然确定了袋鼠的位置作为个体特征，具体来说位置就是横坐标。那么接下来，我们就要建立表现型到基因型的映射关系。就是说如何用编码来表现出袋鼠所在的横坐标。由于横坐标是一个实数，所以说透了我们就是要对这个实数编码。回顾我们上面所介绍的两种编码方式，最先想到的应该就是，对于二进制编码方式来说，编码会比较复杂，而对于浮点数编码方式来说，则会比较简洁。恩，正如你所想的，用浮点数编码，仅仅需要一个浮点数而已。而下面则介绍如何建立二进制编码到一个实数的映射。\n\n  明显地，一定长度的二进制编码序列，只能表示一定精度的浮点数。譬如我们要求解精确到六位小数，由于区间长度为2 – (-1) = 3 ,为了保证精度要求，至少把区间[-1,2]分为3 × 106等份。又因为\n\n           \n\n所以编码的二进制串至少需要22位。\n\n       把一个二进制串（b0,b1,....bn)转化位区间里面对应的实数值通过下面两个步骤。\n\n    （1）将一个二进制串代表的二进制数转化为10进制数：\n\n                 \n\n    （2）对应区间内的实数：\n\n                          \n\n      （像极了模数转换）\n\n   例如一个二进制串<1000101110110101000111>表示实数值0.637197。\n\n         \n\n（纠正一个错误，这里是-1）  \n\n       二进制串<0000000000000000000000>和<1111111111111111111111>则分别表示区间的两个端点值-1和2。\n\n     好了，目前为止我们把袋鼠的染色体给研究透了，让我们继续跟进袋鼠的进化旅程\n物竞天择－－适应性评分与及选择函数。\n\n1.物竞――适应度函数（fitness function）\n\n   自然界生物竞争过程往往包含两个方面：生物相互间的搏斗与及生物与客观环境的搏斗过程。但在我们这个实例里面，你可以想象到，袋鼠相互之间是非常友好的，它们并不需要互相搏斗以争取生存的权利。它们的生死存亡更多是取决于你的判断。因为你要衡量哪只袋鼠该杀，哪只袋鼠不该杀，所以你必须制定一个衡量的标准。而对于这个问题，这个衡量的标准比较容易制定：袋鼠所在的海拔高度。（因为你单纯地希望袋鼠爬得越高越好。）所以我们直接用袋鼠的海拔高度作为它们的适应性评分。即适应度函数直接返回函数值就行了。\n\n2.天择――选择函数（selection）\n\n    自然界中，越适应的个体就越有可能繁殖后代。但是也不能说适应度越高的就肯定后代越多，只能是从概率上来说更多。（毕竟有些所处海拔高度较低的袋鼠很幸运，逃过了你的眼睛。）那么我们怎么来建立这种概率关系呢？下面我们介绍一种常用的选择方法――轮盘赌（Roulette Wheel Selection）选择法。                                 \n\n     比如我们有5条染色体，他们所对应的适应度评分分别为：5，7，10，13，15。\n\n       所以累计总适应度为：\n\n                                  \n\n       所以各个个体被选中的概率分别为：\n\n                                    \n  \n\n你可以想象一下，我们转动轮盘，轮盘停下来的时候，指针会随机地指向某一个个体所代表的区域，那么非常幸运地，这个个体被选中了。（很明显，适应度评分越高的个体被选中的概率越大。）\n\n注：还有精英选择机制\n\n \n\n遗传变异――基因重组（交叉）与基因突变。\n\n  应该说这两个步骤就是使得子代不同于父代的根本原因（注意，我没有说是子代优于父代，只有经过自然的选择后，才会出现子代优于父代的倾向。）。对于这两种遗传操作，二进制编码和浮点型编码在处理上有很大的差异，其中二进制编码的遗传操作过程，比较类似于自然界里面的过程，下面将分开讲述。\n\n1.基因重组/交叉(recombination/crossover)\n\n   （1）二进制编码\n\n    二进制编码的基因交换过程非常类似高中生物中所讲的同源染色体的联会过程――随机把其中几个位于同一位置的编码进行交换，产生新的个体。\n\n\n\n\n（2）浮点数编码\n\n     如果一条基因中含有多个浮点数编码，那么也可以用跟上面类似的方法进行基因交叉，不同的是进行交叉的基本单位不是二进制码，而是浮点数。而如果对于单个浮点数的基因交叉，就有其它不同的重组方式了，比如中间重组：随机产生就能得到介于父代基因编码值和母代基因编码值之间的值作为子代基因编码的值。比如5.5和6交叉，产生5.7，5.6。\n\n   考虑到“袋鼠跳”问题的具体情况――袋鼠的个体特征仅仅表现为它所处的位置。可以想象，同一个位置的袋鼠的基因是完全相同的，而两条相同的基因进行交叉后，相当于什么都没有做，所以我们不打算在这个例子里面使用交叉这一个遗传操作步骤。（当然硬要这个操作步骤也不是不行的，你可以把两只异地的袋鼠捉到一起，让它们交配，然后产生子代，再把它们送到它们应该到的地方。）\n\n2.基因突变(Mutation)\n\n  （1）二进制编码\n\n     基因突变过程：基因突变是染色体的某一个位点上基因的改变。基因突变使一个基因变成它的等位基因，并且通常会引起一定的表现型变化。正如上面所说，二进制编码的遗传操作过程和生物学中的过程非常相类似，基因串上的“ 0”或“ 1”有一定几率变成与之相反的“ 1”或“ 0”。例如下面这串二进制编码：\n\n101101001011001\n\n经过基因突变后，可能变成以下这串新的编码：\n\n001101011011001\n\n（2）浮点型编码\n\n      浮点型编码的基因突变过程一般是对原来的浮点数增加或者减少一个小随机数。比如原来的浮点数串如下：\n\n1.2,3.4,5.1, 6.0, 4.5\n\n变异后，可能得到如下的浮点数串：\n\n1.3,3.1,4.9, 6.3, 4.4\n\n  当然，这个小随机数也有大小之分，我们一般管它叫“步长”。（想想“袋鼠跳”问题，袋鼠跳的长短就是这个步长。）一般来说步长越大，开始时进化的速度会比较快，但是后来比较难收敛到精确的点上。而小步长却能较精确的收敛到一个点上。所以很多时候为了加快遗传算法的进化速度，而又能保证后期能够比较精确地收敛到最优解上面，会采取动态改变步长的方法。其实这个过程与前面介绍的模拟退火过程比较相类似。\n\n  到此为止，基因编码，基因适应度评估，基因选择，基因变异都一一实现了，剩下来的就是把这些遗传过程的“零件”装配起来了。（写成代码）\n\n \n\n下面是上例的运行结果：\n\n\n红点代表真实的最大点，由求导法可求的为f(1.85)=3.85\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n总结：\n\n编码原则\n完备性（completeness）：问题空间的所有解都能表示为所设计的基因型；\n健全性（soundness）：任何一个基因型都对应于一个可能解；\n非冗余性（non-redundancy）：问题空间和表达空间一一对应。\n\n适应度函数的重要性\n     适应度函数的选取直接影响遗传算法的收敛速度以及能否找到最优解。一般而言，适应度函数是由目标函数变换而成的。\n\n适应度函数设计不当有可能出现欺骗问题：\n（1）进化初期，个别超常个体控制选择过程；\n（2）进化末期，个体差异太小导致陷入局部极值。\n\n欺骗问题举例：\n\n还是袋鼠问题，如果低海拔的地方出现毒雾，会杀死袋鼠，只有爬上珠穆朗玛峰顶端的袋鼠才能生存下来。\n\n因为喜马拉雅山脉有很多山峰，我们以高度作为适应度，case（1）：如果不在珠峰的猴子若比在珠峰半山腰的猴子要高，因为种群大小不变，在珠峰的猴子可能就会被淘汰；case（2）：100只猴子都不在珠峰；\n\n1. 选择的作用：优胜劣汰，适者生存；\n\n2. 交叉的作用：保证种群的稳定性，朝着最优解的方向进化；\n\n3. 变异的作用：保证种群的多样性，避免交叉可能产生的局部收敛。"]],[7,7],[7881,7881]]],[1562765779153,["GJX@GJXAIOU",[[-1,7,"三：遗传算法\n\n        照例先给出科学定义：\n\n       遗传算法（Genetic Algorithm, GA）起源于对生物系统所进行的计算机模拟研究。它是模仿自然界生物进化机制发展起来的随机全局搜索和优化方法，借鉴了达尔文的进化论和孟德尔的遗传学说。其本质是一种高效、并行、全局搜索的方法，能在搜索过程中自动获取和积累有关搜索空间的知识，并自适应地控制搜索过程以求得最佳解。\n\n \n\n     再给出相关术语：（各位看看就好，后面都会涉及到，再细说）\n\n基因型(genotype)：性状染色体的内部表现；\n\n表现型(phenotype)：染色体决定的性状的外部表现，或者说，根据基因型形成的个体的外部表现；\n\n进化(evolution)：种群逐渐适应生存环境，品质不断得到改良。生物的进化是以种群的形式进行的。\n\n适应度(fitness)：度量某个物种对于生存环境的适应程度。\n\n选择(selection)：以一定的概率从种群中选择若干个个体。一般，选择过程是一种基于适应度的优胜劣汰的过程。\n\n复制(reproduction)：细胞分裂时，遗传物质DNA通过复制而转移到新产生的细胞中，新细胞就继承了旧细胞的基因。\n\n交叉(crossover)：两个染色体的某一相同位置处DNA被切断，前后两串分别交叉组合形成两个新的染色体。也称基因重组或杂交；\n\n变异(mutation)：复制时可能（很小的概率）产生某些复制差错，变异产生新的染色体，表现出新的性状。\n\n编码(coding)：DNA中遗传信息在一个长链上按一定的模式排列。遗传编码可看作从表现型到基因型的映射。\n\n解码(decoding)：基因型到表现型的映射。\n\n个体（individual）：指染色体带有特征的实体；\n种群（population）：个体的集合，该集合内个体数称为种群\n\n                  的大小。        \n\n \n\n       遗传算法的有趣应用很多，诸如寻路问题，8数码问题，囚犯困境，动作控制，找圆心问题（在一个不规则的多边形中，寻找一个包含在该多边形内的最大圆圈的圆心），TSP问题，生产调度问题，人工生命模拟等。下面我以袋鼠为例子讲讲遗传算法。（因为袋鼠会跳）\n\n \n\n     遗传算法中每一条染色体，对应着遗传算法的一个解决方案，一般我们用适应性函数（fitness function）来衡量这个解决方案的优劣。所以从一个基因组到其解的适应度形成一个映射。可以把遗传算法的过程看作是一个在多元函数里面求最优解的过程。可以这样想象，这个多维曲面里面有数不清的“山峰”，而这些山峰所对应的就是局部最优解。而其中也会有一个“山峰”的海拔最高的，那么这个就是全局最优解。而遗传算法的任务就是尽量爬到最高峰，而不是陷落在一些小山峰。（另外，值得注意的是遗传算法不一定要找“最高的山峰”，如果问题的适应度评价越小越好的话，那么全局最优解就是函数的最小值，对应的，遗传算法所要找的就是“最深的谷底”）\n                                                          \n\n\n\n问题的提出与解决方案：\n\n   让我们先来考虑考虑下面这个问题的解决办法。\n\n           已知一元函数：\n\n      \n\n现在要求在既定的区间内找出函数的最大值  \n\n\n\n                                                    \n“袋鼠跳”问题\n\n        既然我们把函数曲线理解成一个一个山峰和山谷组成的山脉。那么我们可以设想所得到的每一个解就是一只袋鼠，我们希望它们不断的向着更高处跳去，直到跳到最高的山峰（尽管袋鼠本身不见得愿意那么做）。所以求最大值的过程就转化成一个“袋鼠跳”的过程。\n\n作为对比下面简单介绍“袋鼠跳”的几种方式。\n\n 1. 爬山法（最速上升爬山法）：\n\n      从搜索空间中随机产生邻近的点，从中选择对应解最优的个体，替换原来的个体，不断重复上述过程。因为爬山法只对“邻近”的点作比较，所以目光比较“短浅”，常常只能收敛到离开初始位置比较近的局部最优解上面。对于存在很多局部最优点的问题，通过一个简单的迭代找出全局最优解的机会非常渺茫。（在爬山法中，袋鼠最有希望到达最靠近它出发点的山顶，但不能保证该山顶是珠穆朗玛峰，或者是一个非常高的山峰。因为一路上它只顾上坡，没有下坡。）\n\n2. 模拟退火：\n\n     这个方法来自金属热加工过程的启发。在金属热加工过程中，当金属的温度超过它的熔点（Melting Point）时，原子就会激烈地随机运动。与所有的其它的物理系统相类似，原子的这种运动趋向于寻找其能量的极小状态。在这个能量的变迁过程中，开始时，温度非常高， 使得原子具有很高的能量。随着温度不断降低，金属逐渐冷却，金属中的原子的能量就越来越小，最后达到所有可能的最低点。利用模拟退火的时候，让算法从较大的跳跃开始，使到它有足够的“能量”逃离可能“路过”的局部最优解而不至于限制在其中，当它停在全局最优解附近的时候，逐渐的减小跳跃量，以便使其“落脚 ”到全局最优解上。（在模拟退火中，袋鼠喝醉了，而且随机地大跳跃了很长时间。运气好的话，它从一个山峰跳过山谷，到了另外一个更高的山峰上。但最后，它渐渐清醒了并朝着它所在的峰顶跳去。）\n\n3. 遗传算法：\n\n    模拟物竞天择的生物进化过程，通过维护一个潜在解的群体执行了多方向的搜索，并支持这些方向上的信息构成和交换。是以面为单位的搜索，比以点为单位的搜索，更能发现全局最优解。（在遗传算法中，有很多袋鼠，它们降落到喜玛拉雅山脉的任意地方。这些袋鼠并不知道它们的任务是寻找珠穆朗玛峰。但每过几年，就在一些海拔高度较低的地方射杀一些袋鼠，并希望存活下来的袋鼠是多产的，在它们所处的地方生儿育女。）（或者换个说法。从前，有一大群袋鼠，它们被莫名其妙的零散地遗弃于喜马拉雅山脉。于是只好在那里艰苦的生活。海拔低的地方弥漫着一种无色无味的毒气，海拔越高毒气越稀薄。可是可怜的袋鼠们对此全然不觉，还是习惯于活蹦乱跳。于是，不断有袋鼠死于海拔较低的地方，而越是在海拔高的袋鼠越是能活得更久，也越有机会生儿育女。就这样经过许多年，这些袋鼠们竟然都不自觉地聚拢到了一个个的山峰上，可是在所有的袋鼠中，只有聚拢到珠穆朗玛峰的袋鼠被带回了美丽的澳洲。）\n\n \n\n \n\n遗传算法的实现过程\n\n        遗传算法的实现过程实际上就像自然界的进化过程那样。首先寻找一种对问题潜在解进行“数字化”编码的方案。（建立表现型和基因型的映射关系）然后用随机数初始化一个种群（那么第一批袋鼠就被随意地分散在山脉上），种群里面的个体就是这些数字化的编码。接下来，通过适当的解码过程之后（得到袋鼠的位置坐标），用适应性函数对每一个基因个体作一次适应度评估（袋鼠爬得越高，越是受我们的喜爱，所以适应度相应越高）。用选择函数按照某种规定择优选择（我们要每隔一段时间，在山上射杀一些所在海拔较低的袋鼠，以保证袋鼠总体数目持平。）。让个体基因变异（让袋鼠随机地跳一跳）。然后产生子代（希望存活下来的袋鼠是多产的，并在那里生儿育女）。遗传算法并不保证你能获得问题的最优解，但是使用遗传算法的最大优点在于你不必去了解和操心如何去“找”最优解。（你不必去指导袋鼠向那边跳，跳多远。）而只要简单的“否定”一些表现不好的个体就行了。（把那些总是爱走下坡路的袋鼠射杀，这就是遗传算法的精粹！）\n\n \n\n 所以我们总结出遗传算法的一般步骤：\n\n       开始循环直至找到满意的解。\n\n1.评估每条染色体所对应个体的适应度。\n\n2.遵照适应度越高，选择概率越大的原则，从种群中选择两个个体作为父方和母方。\n\n3.抽取父母双方的染色体，进行交叉，产生子代。\n\n4.对子代的染色体进行变异。\n\n5.重复2，3，4步骤，直到新种群的产生。\n\n结束循环。\n\n                                                \n接下来，我们将详细地剖析遗传算法过程的每一个细节。\n\n编制袋鼠的染色体----基因的编码方式\n\n      受到人类染色体结构的启发，我们可以设想一下，假设目前只有“0”，“1”两种碱基，我们也用一条链条把他们有序的串连在一起，因为每一个单位都能表现出 1 bit的信息量，所以一条足够长的染色体就能为我们勾勒出一个个体的所有特征。这就是二进制编码法，染色体大致如下：\n\n010010011011011110111110\n\n     上面的编码方式虽然简单直观，但明显地，当个体特征比较复杂的时候，需要大量的编码才能精确地描述，相应的解码过程（类似于生物学中的DNA翻译过程，就是把基因型映射到表现型的过程。）将过分繁复，为改善遗传算法的计算复杂性、提高运算效率，提出了浮点数编码。染色体大致如下：\n\n1.2 –3.3 – 2.0 –5.4 – 2.7 – 4.3\n\n（注：还有一种编码方式叫符号编码）\n\n      那么我们如何利用这两种编码方式来为袋鼠的染色体编码呢？因为编码的目的是建立表现型到基因型的映射关系，而表现型一般就被理解为个体的特征。比如人的基因型是46条染色体所描述的却能解码成一个眼，耳，口，鼻等特征各不相同的活生生的人。所以我们要想为“袋鼠”的染色体编码，我们必须先来考虑“袋鼠”的“个体特征”是什么。也许有的人会说，袋鼠的特征很多，比如性别，身长，体重，也许它喜欢吃什么也能算作其中一个特征。但具体在解决这个问题的情况下，我们应该进一步思考：无论这只袋鼠是长短，肥瘦，黑白只要它在低海拔就会被射杀，同时也没有规定身长的袋鼠能跳得远一些，身短的袋鼠跳得近一些。当然它爱吃什么就更不相关了。我们由始至终都只关心一件事情：袋鼠在哪里。因为只要我们知道袋鼠在那里，我们就能做两件必须去做的事情：\n\n（1）通过查阅喜玛拉雅山脉的地图来得知袋鼠所在的海拔高度（通过自变量求适应函数的值。）以判断我们有没必要把它射杀。\n\n（2）知道袋鼠跳一跳（交叉和变异）后去到哪个新位置。\n\n      如果我们一时无法准确的判断哪些“个体特征”是必要的，哪些是非必要的，我们常常可以用到这样一种思维方式：比如你认为袋鼠的爱吃什么东西非常必要，那么你就想一想，有两只袋鼠，它们其它的个体特征完全同等的情况下，一只长得黑，另外一只长得不是那么黑。你会马上发现，这不会对它们的命运有丝毫的影响，它们应该有同等的概率被射杀！只因它们处于同一个地方。（值得一提的是，如果你的基因编码设计中包含了袋鼠黑不黑的信息，这其实不会影响到袋鼠的进化的过程，而那只攀到珠穆朗玛峰的袋鼠黑与白什么的也完全是随机的，但是它所在的位置却是非常确定的。）\n\n   以上是对遗传算法编码过程中经常经历的思维过程，必须把具体问题抽象成数学模型，突出主要矛盾，舍弃次要矛盾。只有这样才能简洁而有效的解决问题。\n\n     既然确定了袋鼠的位置作为个体特征，具体来说位置就是横坐标。那么接下来，我们就要建立表现型到基因型的映射关系。就是说如何用编码来表现出袋鼠所在的横坐标。由于横坐标是一个实数，所以说透了我们就是要对这个实数编码。回顾我们上面所介绍的两种编码方式，最先想到的应该就是，对于二进制编码方式来说，编码会比较复杂，而对于浮点数编码方式来说，则会比较简洁。恩，正如你所想的，用浮点数编码，仅仅需要一个浮点数而已。而下面则介绍如何建立二进制编码到一个实数的映射。\n\n  明显地，一定长度的二进制编码序列，只能表示一定精度的浮点数。譬如我们要求解精确到六位小数，由于区间长度为2 – (-1) = 3 ,为了保证精度要求，至少把区间[-1,2]分为3 × 106等份。又因为\n\n           \n\n所以编码的二进制串至少需要22位。\n\n       把一个二进制串（b0,b1,....bn)转化位区间里面对应的实数值通过下面两个步骤。\n\n    （1）将一个二进制串代表的二进制数转化为10进制数：\n\n                 \n\n    （2）对应区间内的实数：\n\n                          \n\n      （像极了模数转换）\n\n   例如一个二进制串<1000101110110101000111>表示实数值0.637197。\n\n         \n\n（纠正一个错误，这里是-1）  \n\n       二进制串<0000000000000000000000>和<1111111111111111111111>则分别表示区间的两个端点值-1和2。\n\n     好了，目前为止我们把袋鼠的染色体给研究透了，让我们继续跟进袋鼠的进化旅程\n物竞天择－－适应性评分与及选择函数。\n\n1.物竞――适应度函数（fitness function）\n\n   自然界生物竞争过程往往包含两个方面：生物相互间的搏斗与及生物与客观环境的搏斗过程。但在我们这个实例里面，你可以想象到，袋鼠相互之间是非常友好的，它们并不需要互相搏斗以争取生存的权利。它们的生死存亡更多是取决于你的判断。因为你要衡量哪只袋鼠该杀，哪只袋鼠不该杀，所以你必须制定一个衡量的标准。而对于这个问题，这个衡量的标准比较容易制定：袋鼠所在的海拔高度。（因为你单纯地希望袋鼠爬得越高越好。）所以我们直接用袋鼠的海拔高度作为它们的适应性评分。即适应度函数直接返回函数值就行了。\n\n2.天择――选择函数（selection）\n\n    自然界中，越适应的个体就越有可能繁殖后代。但是也不能说适应度越高的就肯定后代越多，只能是从概率上来说更多。（毕竟有些所处海拔高度较低的袋鼠很幸运，逃过了你的眼睛。）那么我们怎么来建立这种概率关系呢？下面我们介绍一种常用的选择方法――轮盘赌（Roulette Wheel Selection）选择法。                                 \n\n     比如我们有5条染色体，他们所对应的适应度评分分别为：5，7，10，13，15。\n\n       所以累计总适应度为：\n\n                                  \n\n       所以各个个体被选中的概率分别为：\n\n                                    \n  \n\n你可以想象一下，我们转动轮盘，轮盘停下来的时候，指针会随机地指向某一个个体所代表的区域，那么非常幸运地，这个个体被选中了。（很明显，适应度评分越高的个体被选中的概率越大。）\n\n注：还有精英选择机制\n\n \n\n遗传变异――基因重组（交叉）与基因突变。\n\n  应该说这两个步骤就是使得子代不同于父代的根本原因（注意，我没有说是子代优于父代，只有经过自然的选择后，才会出现子代优于父代的倾向。）。对于这两种遗传操作，二进制编码和浮点型编码在处理上有很大的差异，其中二进制编码的遗传操作过程，比较类似于自然界里面的过程，下面将分开讲述。\n\n1.基因重组/交叉(recombination/crossover)\n\n   （1）二进制编码\n\n    二进制编码的基因交换过程非常类似高中生物中所讲的同源染色体的联会过程――随机把其中几个位于同一位置的编码进行交换，产生新的个体。\n\n\n\n\n（2）浮点数编码\n\n     如果一条基因中含有多个浮点数编码，那么也可以用跟上面类似的方法进行基因交叉，不同的是进行交叉的基本单位不是二进制码，而是浮点数。而如果对于单个浮点数的基因交叉，就有其它不同的重组方式了，比如中间重组：随机产生就能得到介于父代基因编码值和母代基因编码值之间的值作为子代基因编码的值。比如5.5和6交叉，产生5.7，5.6。\n\n   考虑到“袋鼠跳”问题的具体情况――袋鼠的个体特征仅仅表现为它所处的位置。可以想象，同一个位置的袋鼠的基因是完全相同的，而两条相同的基因进行交叉后，相当于什么都没有做，所以我们不打算在这个例子里面使用交叉这一个遗传操作步骤。（当然硬要这个操作步骤也不是不行的，你可以把两只异地的袋鼠捉到一起，让它们交配，然后产生子代，再把它们送到它们应该到的地方。）\n\n2.基因突变(Mutation)\n\n  （1）二进制编码\n\n     基因突变过程：基因突变是染色体的某一个位点上基因的改变。基因突变使一个基因变成它的等位基因，并且通常会引起一定的表现型变化。正如上面所说，二进制编码的遗传操作过程和生物学中的过程非常相类似，基因串上的“ 0”或“ 1”有一定几率变成与之相反的“ 1”或“ 0”。例如下面这串二进制编码：\n\n101101001011001\n\n经过基因突变后，可能变成以下这串新的编码：\n\n001101011011001\n\n（2）浮点型编码\n\n      浮点型编码的基因突变过程一般是对原来的浮点数增加或者减少一个小随机数。比如原来的浮点数串如下：\n\n1.2,3.4,5.1, 6.0, 4.5\n\n变异后，可能得到如下的浮点数串：\n\n1.3,3.1,4.9, 6.3, 4.4\n\n  当然，这个小随机数也有大小之分，我们一般管它叫“步长”。（想想“袋鼠跳”问题，袋鼠跳的长短就是这个步长。）一般来说步长越大，开始时进化的速度会比较快，但是后来比较难收敛到精确的点上。而小步长却能较精确的收敛到一个点上。所以很多时候为了加快遗传算法的进化速度，而又能保证后期能够比较精确地收敛到最优解上面，会采取动态改变步长的方法。其实这个过程与前面介绍的模拟退火过程比较相类似。\n\n  到此为止，基因编码，基因适应度评估，基因选择，基因变异都一一实现了，剩下来的就是把这些遗传过程的“零件”装配起来了。（写成代码）\n\n \n\n下面是上例的运行结果：\n\n\n红点代表真实的最大点，由求导法可求的为f(1.85)=3.85\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n总结：\n\n编码原则\n完备性（completeness）：问题空间的所有解都能表示为所设计的基因型；\n健全性（soundness）：任何一个基因型都对应于一个可能解；\n非冗余性（non-redundancy）：问题空间和表达空间一一对应。\n\n适应度函数的重要性\n     适应度函数的选取直接影响遗传算法的收敛速度以及能否找到最优解。一般而言，适应度函数是由目标函数变换而成的。\n\n适应度函数设计不当有可能出现欺骗问题：\n（1）进化初期，个别超常个体控制选择过程；\n（2）进化末期，个体差异太小导致陷入局部极值。\n\n欺骗问题举例：\n\n还是袋鼠问题，如果低海拔的地方出现毒雾，会杀死袋鼠，只有爬上珠穆朗玛峰顶端的袋鼠才能生存下来。\n\n因为喜马拉雅山脉有很多山峰，我们以高度作为适应度，case（1）：如果不在珠峰的猴子若比在珠峰半山腰的猴子要高，因为种群大小不变，在珠峰的猴子可能就会被淘汰；case（2）：100只猴子都不在珠峰；\n\n1. 选择的作用：优胜劣汰，适者生存；\n\n2. 交叉的作用：保证种群的稳定性，朝着最优解的方向进化；\n\n3. 变异的作用：保证种群的多样性，避免交叉可能产生的局部收敛。"]],[7881,7881],[7,7]]],[1562765781836,["GJX@GJXAIOU",[[1,8,"三：遗传算法\n\n        照例先给出科学定义：\n\n       遗传算法（Genetic Algorithm, GA）起源于对生物系统所进行的计算机模拟研究。它是模仿自然界生物进化机制发展起来的随机全局搜索和优化方法，借鉴了达尔文的进化论和孟德尔的遗传学说。其本质是一种高效、并行、全局搜索的方法，能在搜索过程中自动获取和积累有关搜索空间的知识，并自适应地控制搜索过程以求得最佳解。\n\n \n\n     再给出相关术语：（各位看看就好，后面都会涉及到，再细说）\n\n基因型(genotype)：性状染色体的内部表现；\n\n表现型(phenotype)：染色体决定的性状的外部表现，或者说，根据基因型形成的个体的外部表现；\n\n进化(evolution)：种群逐渐适应生存环境，品质不断得到改良。生物的进化是以种群的形式进行的。\n\n适应度(fitness)：度量某个物种对于生存环境的适应程度。\n\n选择(selection)：以一定的概率从种群中选择若干个个体。一般，选择过程是一种基于适应度的优胜劣汰的过程。\n\n复制(reproduction)：细胞分裂时，遗传物质DNA通过复制而转移到新产生的细胞中，新细胞就继承了旧细胞的基因。\n\n交叉(crossover)：两个染色体的某一相同位置处DNA被切断，前后两串分别交叉组合形成两个新的染色体。也称基因重组或杂交；\n\n变异(mutation)：复制时可能（很小的概率）产生某些复制差错，变异产生新的染色体，表现出新的性状。\n\n编码(coding)：DNA中遗传信息在一个长链上按一定的模式排列。遗传编码可看作从表现型到基因型的映射。\n\n解码(decoding)：基因型到表现型的映射。\n\n个体（individual）：指染色体带有特征的实体；\n种群（population）：个体的集合，该集合内个体数称为种群\n\n                  的大小。        \n\n \n\n       遗传算法的有趣应用很多，诸如寻路问题，8数码问题，囚犯困境，动作控制，找圆心问题（在一个不规则的多边形中，寻找一个包含在该多边形内的最大圆圈的圆心），TSP问题，生产调度问题，人工生命模拟等。下面我以袋鼠为例子讲讲遗传算法。（因为袋鼠会跳）\n\n \n\n     遗传算法中每一条染色体，对应着遗传算法的一个解决方案，一般我们用适应性函数（fitness function）来衡量这个解决方案的优劣。所以从一个基因组到其解的适应度形成一个映射。可以把遗传算法的过程看作是一个在多元函数里面求最优解的过程。可以这样想象，这个多维曲面里面有数不清的“山峰”，而这些山峰所对应的就是局部最优解。而其中也会有一个“山峰”的海拔最高的，那么这个就是全局最优解。而遗传算法的任务就是尽量爬到最高峰，而不是陷落在一些小山峰。（另外，值得注意的是遗传算法不一定要找“最高的山峰”，如果问题的适应度评价越小越好的话，那么全局最优解就是函数的最小值，对应的，遗传算法所要找的就是“最深的谷底”）\n                                                          \n\n\n\n问题的提出与解决方案：\n\n   让我们先来考虑考虑下面这个问题的解决办法。\n\n           已知一元函数：\n\n      \n\n现在要求在既定的区间内找出函数的最大值  \n\n\n\n                                                    \n“袋鼠跳”问题\n\n        既然我们把函数曲线理解成一个一个山峰和山谷组成的山脉。那么我们可以设想所得到的每一个解就是一只袋鼠，我们希望它们不断的向着更高处跳去，直到跳到最高的山峰（尽管袋鼠本身不见得愿意那么做）。所以求最大值的过程就转化成一个“袋鼠跳”的过程。\n\n作为对比下面简单介绍“袋鼠跳”的几种方式。\n\n 1. 爬山法（最速上升爬山法）：\n\n      从搜索空间中随机产生邻近的点，从中选择对应解最优的个体，替换原来的个体，不断重复上述过程。因为爬山法只对“邻近”的点作比较，所以目光比较“短浅”，常常只能收敛到离开初始位置比较近的局部最优解上面。对于存在很多局部最优点的问题，通过一个简单的迭代找出全局最优解的机会非常渺茫。（在爬山法中，袋鼠最有希望到达最靠近它出发点的山顶，但不能保证该山顶是珠穆朗玛峰，或者是一个非常高的山峰。因为一路上它只顾上坡，没有下坡。）\n\n2. 模拟退火：\n\n     这个方法来自金属热加工过程的启发。在金属热加工过程中，当金属的温度超过它的熔点（Melting Point）时，原子就会激烈地随机运动。与所有的其它的物理系统相类似，原子的这种运动趋向于寻找其能量的极小状态。在这个能量的变迁过程中，开始时，温度非常高， 使得原子具有很高的能量。随着温度不断降低，金属逐渐冷却，金属中的原子的能量就越来越小，最后达到所有可能的最低点。利用模拟退火的时候，让算法从较大的跳跃开始，使到它有足够的“能量”逃离可能“路过”的局部最优解而不至于限制在其中，当它停在全局最优解附近的时候，逐渐的减小跳跃量，以便使其“落脚 ”到全局最优解上。（在模拟退火中，袋鼠喝醉了，而且随机地大跳跃了很长时间。运气好的话，它从一个山峰跳过山谷，到了另外一个更高的山峰上。但最后，它渐渐清醒了并朝着它所在的峰顶跳去。）\n\n3. 遗传算法：\n\n    模拟物竞天择的生物进化过程，通过维护一个潜在解的群体执行了多方向的搜索，并支持这些方向上的信息构成和交换。是以面为单位的搜索，比以点为单位的搜索，更能发现全局最优解。（在遗传算法中，有很多袋鼠，它们降落到喜玛拉雅山脉的任意地方。这些袋鼠并不知道它们的任务是寻找珠穆朗玛峰。但每过几年，就在一些海拔高度较低的地方射杀一些袋鼠，并希望存活下来的袋鼠是多产的，在它们所处的地方生儿育女。）（或者换个说法。从前，有一大群袋鼠，它们被莫名其妙的零散地遗弃于喜马拉雅山脉。于是只好在那里艰苦的生活。海拔低的地方弥漫着一种无色无味的毒气，海拔越高毒气越稀薄。可是可怜的袋鼠们对此全然不觉，还是习惯于活蹦乱跳。于是，不断有袋鼠死于海拔较低的地方，而越是在海拔高的袋鼠越是能活得更久，也越有机会生儿育女。就这样经过许多年，这些袋鼠们竟然都不自觉地聚拢到了一个个的山峰上，可是在所有的袋鼠中，只有聚拢到珠穆朗玛峰的袋鼠被带回了美丽的澳洲。）\n\n \n\n \n\n遗传算法的实现过程\n\n        遗传算法的实现过程实际上就像自然界的进化过程那样。首先寻找一种对问题潜在解进行“数字化”编码的方案。（建立表现型和基因型的映射关系）然后用随机数初始化一个种群（那么第一批袋鼠就被随意地分散在山脉上），种群里面的个体就是这些数字化的编码。接下来，通过适当的解码过程之后（得到袋鼠的位置坐标），用适应性函数对每一个基因个体作一次适应度评估（袋鼠爬得越高，越是受我们的喜爱，所以适应度相应越高）。用选择函数按照某种规定择优选择（我们要每隔一段时间，在山上射杀一些所在海拔较低的袋鼠，以保证袋鼠总体数目持平。）。让个体基因变异（让袋鼠随机地跳一跳）。然后产生子代（希望存活下来的袋鼠是多产的，并在那里生儿育女）。遗传算法并不保证你能获得问题的最优解，但是使用遗传算法的最大优点在于你不必去了解和操心如何去“找”最优解。（你不必去指导袋鼠向那边跳，跳多远。）而只要简单的“否定”一些表现不好的个体就行了。（把那些总是爱走下坡路的袋鼠射杀，这就是遗传算法的精粹！）\n\n \n\n 所以我们总结出遗传算法的一般步骤：\n\n       开始循环直至找到满意的解。\n\n1.评估每条染色体所对应个体的适应度。\n\n2.遵照适应度越高，选择概率越大的原则，从种群中选择两个个体作为父方和母方。\n\n3.抽取父母双方的染色体，进行交叉，产生子代。\n\n4.对子代的染色体进行变异。\n\n5.重复2，3，4步骤，直到新种群的产生。\n\n结束循环。\n\n                                                \n接下来，我们将详细地剖析遗传算法过程的每一个细节。\n\n编制袋鼠的染色体----基因的编码方式\n\n      受到人类染色体结构的启发，我们可以设想一下，假设目前只有“0”，“1”两种碱基，我们也用一条链条把他们有序的串连在一起，因为每一个单位都能表现出 1 bit的信息量，所以一条足够长的染色体就能为我们勾勒出一个个体的所有特征。这就是二进制编码法，染色体大致如下：\n\n010010011011011110111110\n\n     上面的编码方式虽然简单直观，但明显地，当个体特征比较复杂的时候，需要大量的编码才能精确地描述，相应的解码过程（类似于生物学中的DNA翻译过程，就是把基因型映射到表现型的过程。）将过分繁复，为改善遗传算法的计算复杂性、提高运算效率，提出了浮点数编码。染色体大致如下：\n\n1.2 –3.3 – 2.0 –5.4 – 2.7 – 4.3\n\n（注：还有一种编码方式叫符号编码）\n\n      那么我们如何利用这两种编码方式来为袋鼠的染色体编码呢？因为编码的目的是建立表现型到基因型的映射关系，而表现型一般就被理解为个体的特征。比如人的基因型是46条染色体所描述的却能解码成一个眼，耳，口，鼻等特征各不相同的活生生的人。所以我们要想为“袋鼠”的染色体编码，我们必须先来考虑“袋鼠”的“个体特征”是什么。也许有的人会说，袋鼠的特征很多，比如性别，身长，体重，也许它喜欢吃什么也能算作其中一个特征。但具体在解决这个问题的情况下，我们应该进一步思考：无论这只袋鼠是长短，肥瘦，黑白只要它在低海拔就会被射杀，同时也没有规定身长的袋鼠能跳得远一些，身短的袋鼠跳得近一些。当然它爱吃什么就更不相关了。我们由始至终都只关心一件事情：袋鼠在哪里。因为只要我们知道袋鼠在那里，我们就能做两件必须去做的事情：\n\n（1）通过查阅喜玛拉雅山脉的地图来得知袋鼠所在的海拔高度（通过自变量求适应函数的值。）以判断我们有没必要把它射杀。\n\n（2）知道袋鼠跳一跳（交叉和变异）后去到哪个新位置。\n\n      如果我们一时无法准确的判断哪些“个体特征”是必要的，哪些是非必要的，我们常常可以用到这样一种思维方式：比如你认为袋鼠的爱吃什么东西非常必要，那么你就想一想，有两只袋鼠，它们其它的个体特征完全同等的情况下，一只长得黑，另外一只长得不是那么黑。你会马上发现，这不会对它们的命运有丝毫的影响，它们应该有同等的概率被射杀！只因它们处于同一个地方。（值得一提的是，如果你的基因编码设计中包含了袋鼠黑不黑的信息，这其实不会影响到袋鼠的进化的过程，而那只攀到珠穆朗玛峰的袋鼠黑与白什么的也完全是随机的，但是它所在的位置却是非常确定的。）\n\n   以上是对遗传算法编码过程中经常经历的思维过程，必须把具体问题抽象成数学模型，突出主要矛盾，舍弃次要矛盾。只有这样才能简洁而有效的解决问题。\n\n     既然确定了袋鼠的位置作为个体特征，具体来说位置就是横坐标。那么接下来，我们就要建立表现型到基因型的映射关系。就是说如何用编码来表现出袋鼠所在的横坐标。由于横坐标是一个实数，所以说透了我们就是要对这个实数编码。回顾我们上面所介绍的两种编码方式，最先想到的应该就是，对于二进制编码方式来说，编码会比较复杂，而对于浮点数编码方式来说，则会比较简洁。恩，正如你所想的，用浮点数编码，仅仅需要一个浮点数而已。而下面则介绍如何建立二进制编码到一个实数的映射。\n\n  明显地，一定长度的二进制编码序列，只能表示一定精度的浮点数。譬如我们要求解精确到六位小数，由于区间长度为2 – (-1) = 3 ,为了保证精度要求，至少把区间[-1,2]分为3 × 106等份。又因为\n\n           \n\n所以编码的二进制串至少需要22位。\n\n       把一个二进制串（b0,b1,....bn)转化位区间里面对应的实数值通过下面两个步骤。\n\n    （1）将一个二进制串代表的二进制数转化为10进制数：\n\n                 \n\n    （2）对应区间内的实数：\n\n                          \n\n      （像极了模数转换）\n\n   例如一个二进制串<1000101110110101000111>表示实数值0.637197。\n\n         \n\n（纠正一个错误，这里是-1）  \n\n       二进制串<0000000000000000000000>和<1111111111111111111111>则分别表示区间的两个端点值-1和2。\n\n     好了，目前为止我们把袋鼠的染色体给研究透了，让我们继续跟进袋鼠的进化旅程\n物竞天择－－适应性评分与及选择函数。\n\n1.物竞――适应度函数（fitness function）\n\n   自然界生物竞争过程往往包含两个方面：生物相互间的搏斗与及生物与客观环境的搏斗过程。但在我们这个实例里面，你可以想象到，袋鼠相互之间是非常友好的，它们并不需要互相搏斗以争取生存的权利。它们的生死存亡更多是取决于你的判断。因为你要衡量哪只袋鼠该杀，哪只袋鼠不该杀，所以你必须制定一个衡量的标准。而对于这个问题，这个衡量的标准比较容易制定：袋鼠所在的海拔高度。（因为你单纯地希望袋鼠爬得越高越好。）所以我们直接用袋鼠的海拔高度作为它们的适应性评分。即适应度函数直接返回函数值就行了。\n\n2.天择――选择函数（selection）\n\n    自然界中，越适应的个体就越有可能繁殖后代。但是也不能说适应度越高的就肯定后代越多，只能是从概率上来说更多。（毕竟有些所处海拔高度较低的袋鼠很幸运，逃过了你的眼睛。）那么我们怎么来建立这种概率关系呢？下面我们介绍一种常用的选择方法――轮盘赌（Roulette Wheel Selection）选择法。                                 \n\n     比如我们有5条染色体，他们所对应的适应度评分分别为：5，7，10，13，15。\n\n       所以累计总适应度为：\n\n                                  \n\n       所以各个个体被选中的概率分别为：\n\n                                    \n  \n\n你可以想象一下，我们转动轮盘，轮盘停下来的时候，指针会随机地指向某一个个体所代表的区域，那么非常幸运地，这个个体被选中了。（很明显，适应度评分越高的个体被选中的概率越大。）\n\n注：还有精英选择机制\n\n \n\n遗传变异――基因重组（交叉）与基因突变。\n\n  应该说这两个步骤就是使得子代不同于父代的根本原因（注意，我没有说是子代优于父代，只有经过自然的选择后，才会出现子代优于父代的倾向。）。对于这两种遗传操作，二进制编码和浮点型编码在处理上有很大的差异，其中二进制编码的遗传操作过程，比较类似于自然界里面的过程，下面将分开讲述。\n\n1.基因重组/交叉(recombination/crossover)\n\n   （1）二进制编码\n\n    二进制编码的基因交换过程非常类似高中生物中所讲的同源染色体的联会过程――随机把其中几个位于同一位置的编码进行交换，产生新的个体。\n\n\n\n\n（2）浮点数编码\n\n     如果一条基因中含有多个浮点数编码，那么也可以用跟上面类似的方法进行基因交叉，不同的是进行交叉的基本单位不是二进制码，而是浮点数。而如果对于单个浮点数的基因交叉，就有其它不同的重组方式了，比如中间重组：随机产生就能得到介于父代基因编码值和母代基因编码值之间的值作为子代基因编码的值。比如5.5和6交叉，产生5.7，5.6。\n\n   考虑到“袋鼠跳”问题的具体情况――袋鼠的个体特征仅仅表现为它所处的位置。可以想象，同一个位置的袋鼠的基因是完全相同的，而两条相同的基因进行交叉后，相当于什么都没有做，所以我们不打算在这个例子里面使用交叉这一个遗传操作步骤。（当然硬要这个操作步骤也不是不行的，你可以把两只异地的袋鼠捉到一起，让它们交配，然后产生子代，再把它们送到它们应该到的地方。）\n\n2.基因突变(Mutation)\n\n  （1）二进制编码\n\n     基因突变过程：基因突变是染色体的某一个位点上基因的改变。基因突变使一个基因变成它的等位基因，并且通常会引起一定的表现型变化。正如上面所说，二进制编码的遗传操作过程和生物学中的过程非常相类似，基因串上的“ 0”或“ 1”有一定几率变成与之相反的“ 1”或“ 0”。例如下面这串二进制编码：\n\n101101001011001\n\n经过基因突变后，可能变成以下这串新的编码：\n\n001101011011001\n\n（2）浮点型编码\n\n      浮点型编码的基因突变过程一般是对原来的浮点数增加或者减少一个小随机数。比如原来的浮点数串如下：\n\n1.2,3.4,5.1, 6.0, 4.5\n\n变异后，可能得到如下的浮点数串：\n\n1.3,3.1,4.9, 6.3, 4.4\n\n  当然，这个小随机数也有大小之分，我们一般管它叫“步长”。（想想“袋鼠跳”问题，袋鼠跳的长短就是这个步长。）一般来说步长越大，开始时进化的速度会比较快，但是后来比较难收敛到精确的点上。而小步长却能较精确的收敛到一个点上。所以很多时候为了加快遗传算法的进化速度，而又能保证后期能够比较精确地收敛到最优解上面，会采取动态改变步长的方法。其实这个过程与前面介绍的模拟退火过程比较相类似。\n\n  到此为止，基因编码，基因适应度评估，基因选择，基因变异都一一实现了，剩下来的就是把这些遗传过程的“零件”装配起来了。（写成代码）\n\n \n\n下面是上例的运行结果：\n\n\n红点代表真实的最大点，由求导法可求的为f(1.85)=3.85\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n总结：\n\n编码原则\n完备性（completeness）：问题空间的所有解都能表示为所设计的基因型；\n健全性（soundness）：任何一个基因型都对应于一个可能解；\n非冗余性（non-redundancy）：问题空间和表达空间一一对应。\n\n适应度函数的重要性\n     适应度函数的选取直接影响遗传算法的收敛速度以及能否找到最优解。一般而言，适应度函数是由目标函数变换而成的。\n\n适应度函数设计不当有可能出现欺骗问题：\n（1）进化初期，个别超常个体控制选择过程；\n（2）进化末期，个体差异太小导致陷入局部极值。\n\n欺骗问题举例：\n\n还是袋鼠问题，如果低海拔的地方出现毒雾，会杀死袋鼠，只有爬上珠穆朗玛峰顶端的袋鼠才能生存下来。\n\n因为喜马拉雅山脉有很多山峰，我们以高度作为适应度，case（1）：如果不在珠峰的猴子若比在珠峰半山腰的猴子要高，因为种群大小不变，在珠峰的猴子可能就会被淘汰；case（2）：100只猴子都不在珠峰；\n\n1. 选择的作用：优胜劣汰，适者生存；\n\n2. 交叉的作用：保证种群的稳定性，朝着最优解的方向进化；\n\n3. 变异的作用：保证种群的多样性，避免交叉可能产生的局部收敛。"]],[8,8],[7882,7882]]],[1562765800301,["GJX@GJXAIOU",[[-1,8,"三：遗传算法\n\n        照例先给出"]],[8,14],[8,8]]],[1562765808414,["GJX@GJXAIOU",[[1,87,"**"],[1,98,"**"]],[87,98],[87,102]]],[1562765826259,["GJX@GJXAIOU",[[-1,203,"（各位看看就好，后面都会涉及到，再细说）"]],[203,223],[203,203]]],[1562765827867,["GJX@GJXAIOU",[[-1,190,"     再给出"]],[190,198],[190,190]]],[1562765830860,["GJX@GJXAIOU",[[1,8,"## "]],[8,8],[16,16]]],[1562765833172,["GJX@GJXAIOU",[[1,193,"## "]],[193,193],[201,201]]],[1562765836293,["GJX@GJXAIOU",[[-1,189,"\n"]],[190,190],[189,189]]],[1562765839629,["GJX@GJXAIOU",[[-1,228,"\n"]],[228,228],[227,227]]],[1562765840381,["GJX@GJXAIOU",[[-1,278,"\n"]],[278,278],[277,277]]],[1562765841371,["GJX@GJXAIOU",[[-1,329,"\n"]],[329,329],[328,328]]],[1562765842531,["GJX@GJXAIOU",[[-1,361,"\n"]],[361,361],[360,360]]],[1562765844022,["GJX@GJXAIOU",[[-1,418,"\n"]],[418,418],[417,417]]],[1562765844693,["GJX@GJXAIOU",[[-1,479,"\n"]],[479,479],[478,478]]],[1562765845427,["GJX@GJXAIOU",[[-1,544,"\n"]],[544,544],[543,543]]],[1562765846132,["GJX@GJXAIOU",[[-1,597,"\n"]],[597,597],[596,596]]],[1562765846964,["GJX@GJXAIOU",[[-1,651,"\n"]],[651,651],[650,650]]],[1562765848243,["GJX@GJXAIOU",[[-1,676,"\n"]],[676,676],[675,675]]],[1562765851899,["GJX@GJXAIOU",[[-1,736,"\n\n                  "]],[736,756],[736,736]]],[1562765855431,["GJX@GJXAIOU",[[1,202,"* "],[1,228,"* "],[1,278,"* "],[1,329,"* "],[1,361,"* "],[1,418,"* "],[1,479,"* "],[1,544,"* "],[1,597,"* "],[1,651,"* "],[1,676,"* "],[1,704,"* "]],[202,740],[204,764]]],[1562765893811,["GJX@GJXAIOU",[[1,945,"**"],[1,981,"**"]],[945,981],[945,985]]],[1562766636122,["GJX@GJXAIOU",[[1,1283,"![20160419105834575]($resource/20160419105834575.png)"]],[1283,1283],[1337,1337]]],[1562766665306,["GJX@GJXAIOU",[[1,1339,"## "]],[1339,1339],[1353,1353]]],[1562766672803,["GJX@GJXAIOU",[[1,1341,"#"]],[1341,1341],[1354,1354]]],[1562766679146,["GJX@GJXAIOU",[[-1,1356,"   "]],[1356,1359],[1356,1356]]],[1562766684961,["GJX@GJXAIOU",[[-1,1379,"           "]],[1379,1390],[1379,1379]]],[1562766685354,["GJX@GJXAIOU",[[-1,1378,"\n"]],[1379,1379],[1378,1378]]],[1562766685849,["GJX@GJXAIOU",[[-1,1377,"\n"]],[1378,1378],[1377,1377]]],[1562766718741,["GJX@GJXAIOU",[[1,1384,"$f(x)=x \\sin (10 \\pi x)+2 \\quad x \\in[-1,2]$"]],[1384,1384],[1428,1428]]],[1562766729338,["GJX@GJXAIOU",[[1,1377,"\n"]],[1377,1377],[1378,1378]]],[1562766738778,["GJX@GJXAIOU",[[-1,1438,"\n"]],[1438,1438],[1437,1437]]],[1562766740209,["GJX@GJXAIOU",[[-1,1431,"      "]],[1437,1437],[1431,1431]]],[1562766740508,["GJX@GJXAIOU",[[-1,1431,"\n"]],[1431,1431],[1430,1430]]],[1562766740740,["GJX@GJXAIOU",[[-1,1430,"\n"]],[1430,1430],[1429,1429]]],[1562766752758,["GJX@GJXAIOU",[[1,1452,"![20160419105954545]($resource/20160419105954545.png)"]],[1452,1452],[1506,1506]]],[1562766763210,["GJX@GJXAIOU",[[1,1561,"### "]],[1561,1561],[1572,1572]]],[1562766791995,["GJX@GJXAIOU",[[-1,18,"       "],[1,25,"       "],[-1,189," "],[1,190," "],[-1,764,"        \n\n \n\n       "],[1,784,"        \n\n \n\n       "],[-1,906," \n\n     "],[1,914," \n\n     "],[-1,1224,"                                                          "],[1,1282,"                                                          "],[-1,1449,"  "],[1,1451,"  "],[-1,1508,"                                                    "],[1,1560,"                                                    "],[-1,1574,"       "],[1,1581,"       "],[-1,1724," "],[1,1725," -"],[-1,1743,"     "],[1,1748,"     "],[-1,1968,"     "],[1,1973,"     "],[-1,2347,"    "],[1,2351,"    "],[-1,2763," \n\n "],[1,2767," \n\n "],[-1,2780,"        "],[1,2788,"        "],[-1,3216," \n\n "],[1,3220," \n\n "],[-1,3239,"      "],[1,3245,"      "],[-1,3393,"                                                "],[1,3441,"                                                "],[-1,3490,"     "],[1,3495,"     "],[-1,3654,"     "],[1,3659,"     "],[-1,3845,"      "],[1,3851,"      "],[-1,4287,"      "],[1,4293,"      "],[-1,4556,"   "],[1,4559,"   "],[-1,4630,"     "],[1,4635,"     "],[-1,4860,"  "],[1,4862,"  "],[-1,4965,"           "],[1,4976,"           "],[-1,4997,"      "],[1,5003,"      "],[-1,5049,"    "],[1,5053,"    "],[-1,5081,"                 \n\n    "],[1,5104,"                 \n\n    "],[-1,5118,"                          \n\n      "],[1,5152,"                          \n\n      "],[-1,5163,"   "],[1,5166,"   "],[-1,5214,"         "],[1,5223,"         "],[-1,5239,"  \n\n       "],[1,5250,"  \n\n       "],[-1,5323,"     "],[1,5328,"     "],[-1,5416,"   "],[1,5419,"   "],[-1,5682,"    "],[1,5686,"    "],[-1,5835,"                                 \n\n     "],[1,5875,"                                 \n\n     "],[-1,5916,"       "],[1,5923,"       "],[-1,5935,"                                  \n\n       "],[1,5978,"                                  \n\n       "],[-1,5996,"                                    \n  "],[1,6035,"                                    \n  "],[-1,6137," "],[1,6138," "],[-1,6162,"  "],[1,6164,"  "],[-1,6338,"   "],[1,6341,"   "],[-1,6351,"    "],[1,6355,"    "],[-1,6434,"     "],[1,6439,"     "],[-1,6601,"   "],[1,6604,"   "],[-1,6798,"  "],[1,6800,"  "],[-1,6810,"     "],[1,6815,"     "],[-1,7027,"      "],[1,7033,"      "],[-1,7146,"  "],[1,7148,"  "],[-1,7339,"  "],[1,7341,"  "],[-1,7407," "],[1,7408," "],[-1,7604,"    "],[1,7608,"    "]],[1725,1725],[1726,1726]]],[1562766795428,["GJX@GJXAIOU",[[-1,1724," "]],[1725,1725],[1724,1724]]],[1562766796431,["GJX@GJXAIOU",[[1,1725," "]],[1725,1725],[1726,1726]]],[1562766800923,["GJX@GJXAIOU",[[-1,1748,"  "]],[1750,1750],[1748,1748]]],[1562766802331,["GJX@GJXAIOU",[[-1,1970,"  "]],[1972,1972],[1970,1970]]],[1562766804758,["GJX@GJXAIOU",[[-1,1745,"   "]],[1748,1748],[1745,1745]]],[1562766807038,["GJX@GJXAIOU",[[-1,1965,"  "]],[1967,1967],[1965,1965]]],[1562766810898,["GJX@GJXAIOU",[[-1,1574,"        "]],[1574,1582],[1574,1574]]],[1562766812710,["GJX@GJXAIOU",[[-1,1556,"    "]],[1512,1512],[1508,1508]]],[1562766813154,["GJX@GJXAIOU",[[-1,1507,"\n"]],[1508,1508],[1507,1507]]],[1562766815010,["GJX@GJXAIOU",[[-1,1506,"\n"]],[1507,1507],[1506,1506]]],[1562766817492,["GJX@GJXAIOU",[[-1,912,"  "]],[913,913],[911,911]]],[1562766819907,["GJX@GJXAIOU",[[-1,779,"     "]],[784,784],[779,779]]],[1562766825085,["GJX@GJXAIOU",[[-1,19,"      "]],[25,25],[19,19]]],[1562766831109,["GJX@GJXAIOU",[[1,1927,"- "]],[1927,1927],[1929,1929]]],[1562766841355,["GJX@GJXAIOU",[[-1,2315,"   "]],[2315,2318],[2315,2315]]],[1562766844252,["GJX@GJXAIOU",[[1,2304,"- "]],[2304,2304],[2306,2306]]],[1562766853729,["GJX@GJXAIOU",[[1,2346,"**"],[1,2352,"**"]],[2346,2352],[2346,2356]]],[1562766859053,["GJX@GJXAIOU",[[1,2358,"**"],[1,2373,"**"]],[2358,2373],[2358,2377]]],[1562766907755,["GJX@GJXAIOU",[[-1,2742,"\n"]],[2742,2742],[2741,2741]]],[1562766907938,["GJX@GJXAIOU",[[-1,2740," "]],[2741,2741],[2740,2740]]],[1562766908274,["GJX@GJXAIOU",[[-1,2740,"\n"]],[2740,2740],[2739,2739]]],[1562766908521,["GJX@GJXAIOU",[[-1,2739,"\n"]],[2739,2739],[2738,2738]]],[1562766911445,["GJX@GJXAIOU",[[1,2739,"## "]],[2739,2739],[2751,2751]]],[1562766915506,["GJX@GJXAIOU",[[-1,2756,"     "]],[2756,2760],[2755,2755]]],[1562766978197,["GJX@GJXAIOU",[[1,3077,"**"],[1,3152,"**"]],[3077,3152],[3077,3156]]],[1562766983467,["GJX@GJXAIOU",[[1,3191,"## "]],[3192,3192],[3212,3212]]],[1562766986770,["GJX@GJXAIOU",[[-1,3214,"       "]],[3214,3221],[3214,3214]]],[1562766990450,["GJX@GJXAIOU",[[-1,3249,"\n"]],[3249,3249],[3248,3248]]],[1562766993810,["GJX@GJXAIOU",[[-1,3288,"\n"]],[3288,3288],[3287,3287]]],[1562766995036,["GJX@GJXAIOU",[[-1,3312,"\n"]],[3312,3312],[3311,3311]]],[1562766997289,["GJX@GJXAIOU",[[-1,3327,"\n"]],[3327,3327],[3326,3326]]],[1562767001369,["GJX@GJXAIOU",[[1,3229,"* "],[1,3249,"* "],[1,3288,"* "],[1,3312,"* "],[1,3327,"* "]],[3229,3348],[3231,3358]]],[1562767005538,["GJX@GJXAIOU",[[-1,3228,"\n"]],[3228,3228],[3227,3227]]],[1562767007850,["GJX@GJXAIOU",[[-1,3358,"\n"]],[3358,3358],[3357,3357]]],[1562767010257,["GJX@GJXAIOU",[[-1,3412," "]],[3366,3366],[3365,3365]]],[1562767010665,["GJX@GJXAIOU",[[-1,3364,"\n"]],[3365,3365],[3364,3364]]],[1562767016553,["GJX@GJXAIOU",[[1,3439,"### "]],[3439,3439],[3462,3462]]],[1562767032953,["GJX@GJXAIOU",[[-1,3464,"      "]],[3464,3470],[3464,3464]]],[1562767053692,["GJX@GJXAIOU",[[-1,3595,"\n"]],[3596,3596],[3595,3595]]],[1562767053842,["GJX@GJXAIOU",[[-1,3594,"\n"]],[3595,3595],[3594,3594]]],[1562767055204,["GJX@GJXAIOU",[[1,3594,"·"]],[3594,3594],[3595,3595]]],[1562767056396,["GJX@GJXAIOU",[[-1,3594,"·"]],[3595,3595],[3594,3594]]],[1562767056843,["GJX@GJXAIOU",[[1,3594,"`"]],[3594,3594],[3595,3595]]],[1562767058699,["GJX@GJXAIOU",[[1,3619,"`"]],[3619,3619],[3620,3620]]],[1562767061154,["GJX@GJXAIOU",[[-1,3622,"     "]],[3622,3627],[3622,3622]]],[1562767104364,["GJX@GJXAIOU",[[-1,3755,"\n"]],[3756,3756],[3755,3755]]],[1562767104954,["GJX@GJXAIOU",[[-1,3754,"\n"]],[3755,3755],[3754,3754]]],[1562767106355,["GJX@GJXAIOU",[[1,3754,"`"]],[3754,3754],[3755,3755]]],[1562767108210,["GJX@GJXAIOU",[[1,3786,"`"]],[3786,3786],[3787,3787]]],[1562767115171,["GJX@GJXAIOU",[[-1,3637,"明显地，"]],[3641,3641],[3637,3637]]],[1562767132242,["GJX@GJXAIOU",[[-1,3630,"然"]],[3631,3631],[3630,3630]]],[1562767141370,["GJX@GJXAIOU",[[-1,3663,"，"]],[3664,3664],[3663,3663]]],[1562767148858,["GJX@GJXAIOU",[[-1,3805,"   "]],[3808,3808],[3805,3805]]],[1562767152058,["GJX@GJXAIOU",[[1,3625,"**"],[1,3627,"**"]],[3625,3627],[3625,3631]]],[1562767154891,["GJX@GJXAIOU",[[1,3670,"**"],[1,3672,"**"]],[3670,3672],[3670,3676]]],[1562767160354,["GJX@GJXAIOU",[[-1,3810,"   "]],[3810,3813],[3810,3810]]],[1562767204020,["GJX@GJXAIOU",[[-1,4217,"\n"]],[4217,4217],[4216,4216]]],[1562767206586,["GJX@GJXAIOU",[[-1,4248,"   "]],[4251,4251],[4248,4248]]],[1562767208490,["GJX@GJXAIOU",[[-1,4247," "]],[4248,4248],[4247,4247]]],[1562767228978,["GJX@GJXAIOU",[[-1,4587,"  "]],[4589,4589],[4587,4587]]],[1562767235036,["GJX@GJXAIOU",[[-1,4813," "]],[4814,4814],[4813,4813]]],[1562767265925,["GJX@GJXAIOU",[[1,4914,"``"]],[4914,4914],[4916,4916]]],[1562767267874,["GJX@GJXAIOU",[[1,4915,"$2097152=2^{21}<3^{*} 10^{6}<2^{22}=4194304$"]],[4915,4915],[4959,4959]]],[1562767272547,["GJX@GJXAIOU",[[-1,4961,"\n"]],[4962,4962],[4961,4961]]],[1562767279010,["GJX@GJXAIOU",[[-1,4914,"`"]],[4915,4915],[4914,4914]]],[1562767280043,["GJX@GJXAIOU",[[-1,4958,"`"]],[4959,4959],[4958,4958]]],[1562767286250,["GJX@GJXAIOU",[[1,4914,"\n "]],[4914,4914],[4916,4916]]],[1562767292434,["GJX@GJXAIOU",[[-1,4995,"     "]],[4995,5000],[4995,4995]]],[1562767293413,["GJX@GJXAIOU",[[-1,5043," "]],[5044,5044],[5043,5043]]],[1562767294037,["GJX@GJXAIOU",[[-1,5087," "]],[5075,5075],[5074,5074]]],[1562767295418,["GJX@GJXAIOU",[[-1,5070,"\n"]],[5071,5071],[5070,5070]]],[1562767296435,["GJX@GJXAIOU",[[-1,5091," "]],[5089,5089],[5088,5088]]],[1562767297445,["GJX@GJXAIOU",[[-1,5130," "]],[5106,5106],[5105,5105]]],[1562767297865,["GJX@GJXAIOU",[[-1,5104,"\n"]],[5105,5105],[5104,5104]]],[1562767298794,["GJX@GJXAIOU",[[-1,5136," "]],[5132,5132],[5131,5131]]],[1562767299266,["GJX@GJXAIOU",[[-1,5130,"\n"]],[5131,5131],[5130,5130]]],[1562767326730,["GJX@GJXAIOU",[[1,5081,"$\\left(b_{0} \\cdots b_{20} b_{21}\\right)_{2}=\\left(\\sum_{i=0}^{21} b_{i} \\cdot 2^{i}\\right)_{10}=x^{t}$"]],[5081,5081],[5184,5184]]],[1562767377068,["GJX@GJXAIOU",[[1,5218,"$x=-1+x^{t} \\frac{(2-(-1))}{2^{22}-1}$"]],[5218,5218],[5256,5256]]],[1562767382202,["GJX@GJXAIOU",[[-1,5337,"\n"]],[5338,5338],[5337,5337]]],[1562767426213,["GJX@GJXAIOU",[[-1,5368,"     "]],[5373,5373],[5368,5368]]],[1562767434514,["GJX@GJXAIOU",[[-1,5441,"     "]],[5446,5446],[5441,5441]]],[1562767437836,["GJX@GJXAIOU",[[1,5477,"。"]],[5477,5477],[5478,5478]]],[1562767438180,["GJX@GJXAIOU",[[1,5479,"\n"]],[5478,5478],[5479,5479]]],[1562767439275,["GJX@GJXAIOU",[[1,5480,"\n"]],[5479,5479],[5480,5480]]],[1562767446226,["GJX@GJXAIOU",[[1,5346,"$x^{\\prime}=(1000101110110101000111)_{2}=2288967$\n$x=-0.1+2288967 \\cdot \\frac{3}{2^{22}-1}=0.637197$"]],[5346,5346],[5446,5446]]],[1562767486075,["GJX@GJXAIOU",[[-1,5351,"prime"],[1,5356,"t"]],[5351,5356],[5352,5352]]],[1562767492258,["GJX@GJXAIOU",[[-1,5351,"t"],[1,5352,"prime"]],[5351,5352],[5356,5356]]],[1562767498516,["GJX@GJXAIOU",[[1,5356,"t"]],[5356,5356],[5357,5357]]],[1562767512725,["GJX@GJXAIOU",[[-1,5350,"\\prime"]],[5350,5357],[5351,5351]]],[1562767524266,["GJX@GJXAIOU",[[1,5576,"## "]],[5576,5576],[5597,5597]]],[1562767527922,["GJX@GJXAIOU",[[1,5599,"### "]],[5599,5599],[5632,5632]]],[1562767532826,["GJX@GJXAIOU",[[1,5877,"### "]],[5877,5877],[5902,5902]]],[1562767535849,["GJX@GJXAIOU",[[-1,5907," "]],[5908,5908],[5907,5907]]],[1562767538178,["GJX@GJXAIOU",[[-1,6094,"  "]],[6096,6096],[6094,6094]]],[1562767559883,["GJX@GJXAIOU",[[-1,6137,"     "]],[6137,6142],[6137,6137]]],[1562767561594,["GJX@GJXAIOU",[[-1,6091,"   "]],[6094,6094],[6091,6091]]],[1562767564708,["GJX@GJXAIOU",[[1,6144,"$F=\\sum_{i=1}^{n} f_{i}=5+7+10+13+15=50$"]],[6144,6144],[6184,6184]]],[1562767610413,["GJX@GJXAIOU",[[-1,6185,"\n"]],[6186,6186],[6185,6185]]],[1562767611482,["GJX@GJXAIOU",[[-1,6184,"\n"]],[6185,6185],[6184,6184]]],[1562767614618,["GJX@GJXAIOU",[[-1,6221,"      所以"]],[6221,6229],[6221,6221]]],[1562767616142,["GJX@GJXAIOU",[[1,6221,"      所以"]],[6221,6221],[6221,6229]]],[1562767618483,["GJX@GJXAIOU",[[-1,6222,"     "]],[6227,6227],[6222,6222]]],[1562767620698,["GJX@GJXAIOU",[[-1,6273,"   "]],[6243,6243],[6240,6240]]],[1562767621085,["GJX@GJXAIOU",[[-1,6239,"\n"]],[6240,6240],[6239,6239]]],[1562767623476,["GJX@GJXAIOU",[[1,6239,"$P_{1}=\\frac{f_{1}}{F} \\times 100 \\%=\\frac{2}{50} \\times 100 \\%=10 \\%$\n$P_{2}=\\frac{f_{2}}{F} \\times 100 \\%=\\frac{7}{50} \\times 100 \\%=14 \\%$\n$P_{3}=\\frac{f_{3}}{F} \\times 100 \\%=\\frac{10}{50} \\times 100 \\%=20 \\%$\n$P_{4}=\\frac{f_{4}}{F} \\times 100 \\%=\\frac{13}{50} \\times 100 \\%=26 \\%$\n$P_{5}=\\frac{f_{5}}{F} \\times 100 \\%=\\frac{15}{5 n} \\times 100 \\%=30 \\%$"]],[6239,6239],[6597,6597]]],[1562767626850,["GJX@GJXAIOU",[[-1,6282,"2"]],[6283,6283],[6282,6282]]],[1562767627268,["GJX@GJXAIOU",[[1,6282,"5"]],[6282,6282],[6283,6283]]],[1562767671986,["GJX@GJXAIOU",[[1,6634,"![20160419110611554 (1)]($resource/20160419110611554%20(1).jpg)"]],[6634,6634],[6698,6698]]],[1562767681777,["GJX@GJXAIOU",[[1,6801,"### "]],[6801,6801],[6825,6825]]],[1562767689249,["GJX@GJXAIOU",[[1,6833,"**"],[1,6893,"**"]],[6833,6893],[6833,6897]]],[1562767697147,["GJX@GJXAIOU",[[1,6971,"#### "]],[6971,6971],[7010,7010]]],[1562767703464,["GJX@GJXAIOU",[[-1,7024,"\n"]],[7024,7024],[7023,7023]]],[1562767739757,["GJX@GJXAIOU",[[1,7093,"![20160419110643602]($resource/20160419110643602.jpg)"]],[7093,7093],[7147,7147]]],[1562767744641,["GJX@GJXAIOU",[[-1,7163,"  "]],[7164,7164],[7162,7162]]],[1562767750321,["GJX@GJXAIOU",[[1,7504,"#### "]],[7504,7504],[7525,7525]]],[1562767754689,["GJX@GJXAIOU",[[-1,7542,"  "]],[7544,7544],[7542,7542]]],[1562767755609,["GJX@GJXAIOU",[[-1,7686,"\n"]],[7686,7686],[7685,7685]]],[1562767756913,["GJX@GJXAIOU",[[-1,7685,"\n"]],[7686,7686],[7685,7685]]],[1562767761569,["GJX@GJXAIOU",[[-1,7724,"\n"]],[7725,7725],[7724,7724]]],[1562767761937,["GJX@GJXAIOU",[[-1,7723,"\n"]],[7724,7724],[7723,7723]]],[1562767767224,["GJX@GJXAIOU",[[-1,7753,"   "]],[7756,7756],[7753,7753]]],[1562767776329,["GJX@GJXAIOU",[[-1,7801,"\n"]],[7802,7802],[7801,7801]]],[1562767776707,["GJX@GJXAIOU",[[-1,7800,"\n"]],[7801,7801],[7800,7800]]],[1562767779305,["GJX@GJXAIOU",[[-1,7840,"\n"]],[7841,7841],[7840,7840]]],[1562767779609,["GJX@GJXAIOU",[[-1,7839,"\n"]],[7840,7840],[7839,7839]]],[1562767786337,["GJX@GJXAIOU",[[1,7869,"**"],[1,7891,"**"]],[7869,7891],[7869,7895]]],[1562767794202,["GJX@GJXAIOU",[[1,7925,"**"],[1,7958,"**"]],[7925,7958],[7925,7962]]],[1562767799329,["GJX@GJXAIOU",[[1,8070,"**"],[1,8098,"**"]],[8070,8098],[8070,8102]]],[1562767820329,["GJX@GJXAIOU",[[-1,8137,"\n"]],[8137,8137],[8136,8136]]],[1562767820458,["GJX@GJXAIOU",[[-1,8135," "]],[8136,8136],[8135,8135]]],[1562767831526,["GJX@GJXAIOU",[[1,8148,"![20160419110727716]($resource/20160419110727716.png)\n![20160419110801498]($resource/20160419110801498.jpg)"]],[8148,8148],[8256,8256]]],[1562767845593,["GJX@GJXAIOU",[[-1,8202,"![20160419110801498]($resource/20160419110801498.jpg)"]],[8202,8255],[8202,8202]]],[1562767847116,["GJX@GJXAIOU",[[1,8236,"![20160419110801498]($resource/20160419110801498.jpg)"]],[8236,8236],[8289,8289]]],[1562767848401,["GJX@GJXAIOU",[[-1,8203,"\n"]],[8203,8203],[8202,8202]]],[1562767848880,["GJX@GJXAIOU",[[-1,8202,"\n"]],[8202,8202],[8201,8201]]],[1562767893382,["GJX@GJXAIOU",[[1,8289,"![20160419110917904]($resource/20160419110917904.jpg)\n![20160419110954715]($resource/20160419110954715.jpg)"]],[8289,8289],[8397,8397]]],[1562767896570,["GJX@GJXAIOU",[[-1,8411,"\n"]],[8409,8409],[8408,8408]]],[1562767896713,["GJX@GJXAIOU",[[-1,8410,"\n"]],[8408,8408],[8407,8407]]],[1562767896881,["GJX@GJXAIOU",[[-1,8409,"\n"]],[8407,8407],[8406,8406]]],[1562767897057,["GJX@GJXAIOU",[[-1,8408,"\n"]],[8406,8406],[8405,8405]]],[1562767897233,["GJX@GJXAIOU",[[-1,8407,"\n"]],[8405,8405],[8404,8404]]],[1562767897401,["GJX@GJXAIOU",[[-1,8406,"\n"]],[8404,8404],[8403,8403]]],[1562767897568,["GJX@GJXAIOU",[[-1,8405,"\n"]],[8403,8403],[8402,8402]]],[1562767897745,["GJX@GJXAIOU",[[-1,8404,"\n"]],[8402,8402],[8401,8401]]],[1562767897936,["GJX@GJXAIOU",[[-1,8403,"\n"]],[8401,8401],[8400,8400]]],[1562767898120,["GJX@GJXAIOU",[[-1,8402,"\n"]],[8400,8400],[8399,8399]]],[1562767898313,["GJX@GJXAIOU",[[-1,8401,"\n"]],[8399,8399],[8398,8398]]],[1562767898648,["GJX@GJXAIOU",[[-1,8400,"\n"]],[8398,8398],[8397,8397]]],[1562767900444,["GJX@GJXAIOU",[[1,8400,"## "]],[8400,8400],[8406,8406]]],[1562767905346,["GJX@GJXAIOU",[[1,8408,"### "]],[8408,8408],[8416,8416]]],[1562767909379,["GJX@GJXAIOU",[[1,8527,"### "]],[8527,8527],[8540,8540]]],[1562767916745,["GJX@GJXAIOU",[[-1,8847,"\n"]],[8847,8847],[8846,8846]]],[1562767917841,["GJX@GJXAIOU",[[-1,8877,"\n"]],[8877,8877],[8876,8876]]]],null,"GJX@GJXAIOU"]]}