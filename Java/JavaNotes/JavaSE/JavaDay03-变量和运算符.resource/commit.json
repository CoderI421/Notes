{"compress":true,"commitItems":[["021a2ca7-d26f-4084-a7d8-402a98d608f0",1556155737572,"## 命名规范 标识符\n   \n    以下参考规范 AJCG (阿里巴巴技术团队规范)\n    \n    \n    邮箱注册：\n        126邮箱：\n            6~18个字符，可使用字母、数字、下划线，需以字母开头\n        \n    标识符能够使用的字符范围要求：\n        1. 标识符只能使用数字(0 ~ 9) 字母(A ~ Z a ~ z) 唯一可以使用的标点符号下划线(_)\n        2. 要求标识符必须用字母开头\n        3. 在标识符中严格区分大小写 And and Not same\n        4. 标识符没有严格的长度限制\n        5. 标识符要做到 见名知意 动宾结构\n            **a b c d** \n            imgTitle\n            imgbanner\n            imgGoods\n            imgLogo\n            studentInfo ageOfWorker getPingjiaByName\n            iPhone iPad iTouch iPod iWatch iTV iTunes\n        6. Java内部已经被征用的关键字不能用来做标识符 \n            public static void \n            int long double \n        \n    【规范】\n        a)小驼峰命名法\n            首字母小写，其他单词的首字母大写\n            iPhone iPad\n            使用范围：变量名 和 函数名\n            \n        b) 大驼峰命名法\n            所有单词的首字母全部大写\n            Dog Cat ContactSystem\n            使用范围：class之后的名字要使用大驼峰命名法\n        c)**************************************\n        d)**************************************\n    \n    【要求】\n        能用英语就用英语\n        一个月内允许使用英文和中文拼音，一个月后全部使用英语\n        如果使用拼音请使用全拼！！！\n        Tsgly  图书管理员\n        \n        payTime\n        payPrice\n        payBeiZhu\n        \n        yy\n        yy2\n        \n        zinv\n        fuqin\n        laopo\n\n## 变量【重点】\n    天气 气温 年龄 身高 体重 时间\n        \n    未知数\n    \n    方程\n    x + y = 10;\n    x + 2y = 30;\n    y = 5;\n    x = 20;\n    变量\n    \n    变量的定义：\n        变量就是在Java程序中可以运行时可以发生改变的量\n        例如：二元一次方程，x 和 y 是未知数/变量 但是我们需要一个【容器】或者说【名字】来保存这个数据\n            这里 x 和 y 就起到这样的作用\n    \n    容器具有的特征：\n        1. 现实中容器 例如： 水杯，箱子，书包\n           在计算机当中，所谓的总容器就是硬盘，对于正在运行的程序，总容器是内存\n           变量会占用一定的【内存】空间，跟数据类型有关\n        2. 存放的数据有一定的数据格式要求, Java的数据类型\n           10101010010101010101010010101\n           .exe  .doc  .txt   .java\n        3. 这个【容器】会有一个特定的名字\n    \n    常量中存在的数据类型：整型， 小数， 真假关系，字符， 字符串(类型特殊，暂不考虑)\n\n整型 | 占用空间大小 | 数据范围\n---|---|---\nbyte | 1字节(8bit) | -128 ~ 127\nshort | 2字节(16bit) | -32768 ~ 32767 \nint | 4字节(32bit) | 2^32 - 1\nlong | 8字节(64bit) | 2^64 - 1\n\n<br />\n\n浮点型 | 占用空间大小 | 数据范围\n---|---|---\nfloat | 4字节(32bit) | -3.4 * 10^38 ~ 3.4 * 10^38\ndouble | 8字节(64bit) | 10 ^ 308\n\n<br />\n\n字符型 | 占用空间大小 | 数据范围\n---|---|---\nchar | 2字节 | 在GBK编码中可以保存中文\n\n<br />\n\n布尔型 | 占用空间大小 | 数据范围\n---|---|---\nboolean | 因环境而异 | true false\n    \n<br />\n\n    任何定义(声明)一个变量：\n        数据类型  变量名 = 数据;\n    \n    注意事项：\n        a)在Java当中一个变量在没有赋值的情况下，是不能被使用的    \n        b)在计算机中，原则是保证数据的完整性，不考虑所占内存空间问题。那么浮点型(小数)系统默认\n        为double类型，保证数据的精度，完整性。但是要给float类型赋值的时候，如果不加修饰，赋值\n        会报错，所以要求给float类型赋值的浮点类型数据必须加上f或者F修饰\n        例如:\n            float floatNumber = 3.14f;\n            float floatNumber = 0.618F;\n        c)字符变量是可以赋值一个字母，一个转义字符甚至于一个数字但是数字范围要求在ASCII码范围以内\n        转义字符之后可以使用八进制书，一个特殊的字符\\0 这是ASCII码表里面第一个字符，是字符的\"0\"值\n        d) = 赋值\n## 算术运算符\n    +  -  ×  ÷  ()\n    先乘除后加减\n    先算括号里面的后算括号外面的\n    除数不能为0\n    \n    7 ÷ 3 = 2 …… 1\n    \n    在代码中算术运算符是什么样子？\n    + - * / ()  %\n    \n    = 赋值 把赋值号右侧的数据赋值给左侧的【变量】\n \n    在操作算术运算的时候，如果一个变量或者一个数据，没有被赋值号赋值的情况下，是不会发生\n    任何的改变2\n    \n    优先级问题：只要记住最高的优先级是() 简单粗暴加括号\n    \n    += -= /= *= %=\n    例如：\n        num1 = num1 + num2;\n        num1 += num2;\n        \n## 自增自减运算符\n    这些运算符是提供给【变量】使用\n    ++：自增操作，相当于当前变量 += 1\n        优先级问题：如果++运算符在变量之后，先执行该行语句，再来执行++自增操作，如果在变量之前，先\n        执行自增操作，再来执行改行语句的运行\n    \n    --：自减操作，性对于当前变量 -= 1\n        自减的优先级同上\n        \n    [建议]\n        在代码中使用自增自减运算符，一般都是单独成行，避免没必要的歧义\n        \n    面试题： Java中不支持\n        int num = 5;\n        ++(num++) 6  7  \n                  7  7\n                  语法错误\n            解释：\n                按照语法，首先执行num++ 结果是一个6，是一个常量，这个常量就是小括号表示的\n                数值，也是一个常量。在这里括号里面的内容会被认为是一个常量6 来处理\n                在++ 或者 -- 中不能操作任何的【常量】\n                  \n## 关系运算符\n    < >  = ≥ ≤ ≠ \n    手写的关系运算符\n    \n    < > == <= >= !=\n    代码中支持关系运算符\n    \n    关系运算符的结果是什么？？？\n    boolean  true  false\n    5 > 2 true\n    2 > 3 false\n    \n## 逻辑运算符\n    与：金库，需要两个人拿两把钥匙，同时在场才可以打开，缺一不可\n        && 同真为真，有假为假\n        \n    或：自个家，不管是谁带钥匙，都开打开门，但是如果都没有带，GG\n        || 有真为真，同假为假\n    \n    非：犟 取反\n        ! 真变假来假变真\n    \n    【拓展】    \n        true 0000 0001 => 1\n        false 0000 0000  => 0\n        在计算机世界中，默认的真假关系是 1 和 0， 而Java不支持这样方式，采用的是true和false来代表\n       \n        在计算机世界中，非0即真\n        \n        while (true) 死循环  Java支持\n        while (1)    死循环 其他语言支持的 C/OC/C++/JavaScript\n        \n        面试题: (不针对Java)\n            请解释以下内容的含义，用通俗的代码来表示\n            前提：n是一个int类型的变量\n           \n            !n的含义\n            n = 1;   !n  = false;\n            n = 0;   !n  = true;\n            n = 2;   !n  = false; //非 0 即 真 \n            \n            !n的含义是 判断当前n的值是否等于0 ，换一种方式表示如下\n            n == 0;\n\n## 分支结构\n    代码中有三大结构：\n        顺序结构，分支结构和循环结构\n        \n    if (判断语句 true/false) {\n        //语句体\n    }\n    运行流程：\n        当程序运行到if语句，首先判断if 之后的括号里面的内容是否为true，如果为true执行语句体，如果为false，\n        直接执行大括号之后的语句\n\n    \n    if (判断语句 true/false) {\n        //true 语句体\n    } else {\n        //false 语句体\n    }\n    运行流程：\n        当程序运行到if-else语句，首先判断if之后的括号里面的内容是否为true，如果为true执行true 语句体，\n        如果为false 执行false语句体\n    \n    if () {\n        \n    } else if () {\n        \n    } else {\n        \n    }\n    \n    switch - case:\n            \n        ",[[1556155689668,["GJX@GJXAIOU",[[1,665,"**"],[1,675,"**"]],[665,675],[665,679]]],[1556155692947,["GJX@GJXAIOU",[[1,743,"**"],[1,759,"**"]],[743,759],[743,763]]],[1556155695484,["GJX@GJXAIOU",[[-1,745,"  "]],[747,747],[745,745]]],[1556155698636,["GJX@GJXAIOU",[[-1,667,"  "]],[669,669],[667,667]]],[1556155702963,["GJX@GJXAIOU",[[1,781,"**"],[1,790,"**"]],[781,790],[781,794]]],[1556155709195,["GJX@GJXAIOU",[[1,866,"**"],[1,890,"**"]],[866,890],[866,894]]],[1556155757107,["GJX@GJXAIOU",[[-1,2176,"<br />"]],[2176,2182],[2176,2176]]],[1556155759028,["GJX@GJXAIOU",[[-1,2108,"<br />"]],[2108,2114],[2108,2108]]],[1556155760164,["GJX@GJXAIOU",[[-1,1993,">"]],[1994,1994],[1993,1993]]],[1556155764885,["GJX@GJXAIOU",[[1,1993,">"]],[1993,1993],[1994,1994]]],[1556155767447,["GJX@GJXAIOU",[[-1,1988,"<br />"]],[1988,1994],[1988,1988]]],[1556155769932,["GJX@GJXAIOU",[[-1,1989,"\n"]],[1988,1988],[1987,1987]]],[1556155772366,["GJX@GJXAIOU",[[-1,1988,"\n"]],[1988,1988],[1987,1987]]],[1556155773141,["GJX@GJXAIOU",[[-1,1987,"\n"]],[1987,1987],[1986,1986]]],[1556155778108,["GJX@GJXAIOU",[[1,1987,"   |   |   \n"]],[1986,1986],[1987,1990]]],[1556155781582,["GJX@GJXAIOU",[[-1,1988,"  |   |   "]],[1987,1997],[1987,1987]]],[1556155782333,["GJX@GJXAIOU",[[-1,1987," "],[1,1988,"\n"]],[1987,1987],[1988,1988]]],[1556155784900,["GJX@GJXAIOU",[[-1,2102,"\n"]],[2101,2101],[2100,2100]]],[1556155786172,["GJX@GJXAIOU",[[-1,2163,"\n"]],[2163,2163],[2162,2162]]],[1556155788588,["GJX@GJXAIOU",[[-1,2229,"<br />"]],[2229,2235],[2229,2229]]],[1556155797889,["GJX@GJXAIOU",[[-1,2233,"  "],[-1,2249,"  "],[-1,2275,"  "],[-1,2278," "],[-1,2281," "],[-1,2288,"  "],[-1,2331," "],[-1,2338," "],[-1,2385,"  "],[-1,2448,"  "],[-1,2486,"  "],[-1,2508,"  "],[-1,2537," "],[-1,2548," "],[-1,2577,"  "],[-1,2634," "],[-1,2641," "],[-1,2693,"  "]],[2234,2708],[2232,2680]]],[1556155811436,["GJX@GJXAIOU",[[1,2297,"**"],[1,2316,"**"]],[2297,2316],[2297,2320]]],[1556155823950,["GJX@GJXAIOU",[[-1,2377,"      "]],[2383,2383],[2377,2377]]],[1556155824380,["GJX@GJXAIOU",[[-1,2376,"\n"]],[2377,2377],[2376,2376]]],[1556155827467,["GJX@GJXAIOU",[[-1,2425,"      "]],[2431,2431],[2425,2425]]],[1556155827817,["GJX@GJXAIOU",[[-1,2424,"\n"]],[2425,2425],[2424,2424]]],[1556155854334,["GJX@GJXAIOU",[[1,2553,"**"],[1,2599,"**"]],[2553,2599],[2553,2603]]],[1556155877345,["GJX@GJXAIOU",[[1,3107," "]],[3107,3107],[3108,3108]]],[1556155963685,["GJX@GJXAIOU",[[1,4094,"**"],[1,4118,"**"]],[4094,4118],[4094,4122]]]],null,"GJX@GJXAIOU"],["3724aa04-f0db-46c4-9e84-ae4d26b5e6f9",1563151214692,"## 命名规范 标识符\n   \n    以下参考规范 AJCG (阿里巴巴技术团队规范)\n    \n    \n    邮箱注册：\n        126邮箱：\n            6~18个字符，可使用字母、数字、下划线，需以字母开头\n        \n    标识符能够使用的字符范围要求：\n        1. 标识符只能使用数字(0 ~ 9) 字母(A ~ Z a ~ z) 唯一可以使用的标点符号下划线(_)\n        2. 要求标识符必须用字母开头\n        3. 在标识符中严格区分大小写 And and Not same\n        4. 标识符没有严格的长度限制\n        5. 标识符要做到 见名知意 动宾结构\n            **a b c d** \n            imgTitle\n            imgbanner\n            imgGoods\n            imgLogo\n            studentInfo ageOfWorker getPingjiaByName\n            iPhone iPad iTouch iPod iWatch iTV iTunes\n        6. Java内部已经被征用的关键字不能用来做标识符 \n            public static void \n            int long double \n        \n    【规范】\n      **a)小驼峰命名法**\n            首字母小写，其他单词的首字母大写\n            iPhone iPad\n          **使用范围：变量名 和 函数名**\n            \n        **b) 大驼峰命名法**\n            所有单词的首字母全部大写\n            Dog Cat ContactSystem\n            **使用范围：class之后的名字要使用大驼峰命名法**\n        c)**************************************\n        d)**************************************\n    \n    【要求】\n        能用英语就用英语\n        一个月内允许使用英文和中文拼音，一个月后全部使用英语\n        如果使用拼音请使用全拼！！！\n        Tsgly  图书管理员\n        \n        payTime\n        payPrice\n        payBeiZhu\n        \n        yy\n        yy2\n        \n        zinv\n        fuqin\n        laopo\n\n## 变量【重点】\n    天气 气温 年龄 身高 体重 时间\n        \n    未知数\n    \n    方程\n    x + y = 10;\n    x + 2y = 30;\n    y = 5;\n    x = 20;\n    变量\n    \n    变量的定义：\n        变量就是在Java程序中可以运行时可以发生改变的量\n        例如：二元一次方程，x 和 y 是未知数/变量 但是我们需要一个【容器】或者说【名字】来保存这个数据\n            这里 x 和 y 就起到这样的作用\n    \n    容器具有的特征：\n        1. 现实中容器 例如： 水杯，箱子，书包\n           在计算机当中，所谓的总容器就是硬盘，对于正在运行的程序，总容器是内存\n           变量会占用一定的【内存】空间，跟数据类型有关\n        2. 存放的数据有一定的数据格式要求, Java的数据类型\n           10101010010101010101010010101\n           .exe  .doc  .txt   .java\n        3. 这个【容器】会有一个特定的名字\n    \n    常量中存在的数据类型：整型， 小数， 真假关系，字符， 字符串(类型特殊，暂不考虑)\n\n整型 | 占用空间大小 | 数据范围\n---|---|---\nbyte | 1字节(8bit) | -128 ~ 127\nshort | 2字节(16bit) | -32768 ~ 32767 \nint | 4字节(32bit) | 2^32 - 1\nlong | 8字节(64bit) | 2^64 - 1\n\n\n浮点型 | 占用空间大小 | 数据范围\n---|---|---\nfloat | 4字节(32bit) | -3.4 * 10^38 ~ 3.4 * 10^38\ndouble | 8字节(64bit) | 10 ^ 308\n\n\n字符型 | 占用空间大小 | 数据范围\n---|---|---\nchar | 2字节 | 在GBK编码中可以保存中文\n\n\n布尔型 | 占用空间大小 | 数据范围\n---|---|---\nboolean | 因环境而异 | true false\n    \n\n\n  任何定义(声明)一个变量：\n      数据类型  变量名 = 数据;\n  \n  注意事项：\n      a)在Java当中一个**变量在没有赋值的情况下，是不能被使用的**    \n      b)在计算机中，原则是保证数据的完整性，不考虑所占内存空间问题。那么浮点型(小数)系统默认为double类型，保证数据的精度，完整性。但是要给float类型赋值的时候，如果不加修饰，赋值会报错，所以要求给float类型赋值的浮点类型数据必须加上f或者F修饰\n      例如:\n          float floatNumber = 3.14f;\n          float floatNumber = 0.618F;\n      c)**字符变量是可以赋值一个字母，一个转义字符甚至于一个数字但是数字范围要求在ASCII码范围以内**\n      转义字符之后可以使用八进制书，一个特殊的字符\\0 这是ASCII码表里面第一个字符，是字符的\"0\"值\n      d) = 赋值\n## 算术运算符\n    +  -  ×  ÷  ()\n    先乘除后加减\n    先算括号里面的后算括号外面的\n    除数不能为0\n    \n    7 ÷ 3 = 2 …… 1\n    \n    在代码中算术运算符是什么样子？\n    + - * / ()  %\n    \n    = 赋值 把赋值号右侧的数据赋值给左侧的【变量】\n \n    在操作算术运算的时候，如果一个变量或者一个数据，没有被赋值号赋值的情况下，是不会发生\n    任何的改变2\n    \n    优先级问题：只要记住最高的优先级是() 简单粗暴加括号\n    \n    += -= /= *= %=\n    例如：\n        num1 = num1 + num2;\n        num1 += num2;\n        \n## 自增自减运算符\n    这些运算符是提供给【变量】使用\n    ++：自增操作，相当于当前变量 += 1\n        优先级问题：如果++ 运算符在变量之后，先执行该行语句，再来执行++自增操作，如果在变量之前，先\n        执行自增操作，再来执行改行语句的运行\n    \n    --：自减操作，性对于当前变量 -= 1\n        自减的优先级同上\n        \n    [建议]\n        在代码中使用自增自减运算符，一般都是单独成行，避免没必要的歧义\n        \n    面试题： Java中不支持\n        int num = 5;\n        ++(num++) 6  7  \n                  7  7\n                  语法错误\n            解释：\n                按照语法，首先执行num++ 结果是一个6，是一个常量，这个常量就是小括号表示的\n                数值，也是一个常量。在这里括号里面的内容会被认为是一个常量6 来处理\n                在++ 或者 -- 中不能操作任何的【常量】\n                  \n## 关系运算符\n    < >  = ≥ ≤ ≠ \n    手写的关系运算符\n    \n    < > == <= >= !=\n    代码中支持关系运算符\n    \n    关系运算符的结果是什么？？？\n    boolean  true  false\n    5 > 2 true\n    2 > 3 false\n    \n## 逻辑运算符\n    与：金库，需要两个人拿两把钥匙，同时在场才可以打开，缺一不可\n        && 同真为真，有假为假\n        \n    或：自个家，不管是谁带钥匙，都开打开门，但是如果都没有带，GG\n        || 有真为真，同假为假\n    \n    非：犟 取反\n        ! 真变假来假变真\n    \n    【拓展】    \n        true 0000 0001 => 1\n        false 0000 0000  => 0\n        在计算机世界中，默认的真假关系是 1 和 0， 而Java不支持这样方式，采用的是true和false来代表\n       \n        在计算机世界中，非0即真\n        \n        **while (true) 死循环  Java支持**\n        while (1)    死循环 其他语言支持的 C/OC/C++/JavaScript\n        \n        面试题: (不针对Java)\n            请解释以下内容的含义，用通俗的代码来表示\n            前提：n是一个int类型的变量\n           \n            !n的含义\n            n = 1;   !n  = false;\n            n = 0;   !n  = true;\n            n = 2;   !n  = false; //非 0 即 真 \n            \n            !n的含义是 判断当前n的值是否等于0 ，换一种方式表示如下\n            n == 0;\n\n## 分支结构\n    代码中有三大结构：\n        顺序结构，分支结构和循环结构\n        \n    if (判断语句 true/false) {\n        //语句体\n    }\n    运行流程：\n        当程序运行到if语句，首先判断if 之后的括号里面的内容是否为true，如果为true执行语句体，如果为false，\n        直接执行大括号之后的语句\n\n    \n    if (判断语句 true/false) {\n        //true 语句体\n    } else {\n        //false 语句体\n    }\n    运行流程：\n        当程序运行到if-else语句，首先判断if之后的括号里面的内容是否为true，如果为true执行true 语句体，\n        如果为false 执行false语句体\n    \n    if () {\n        \n    } else if () {\n        \n    } else {\n        \n    }\n    \n    switch - case:\n            \n        ",[[1563151173544,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1563151193471,["GJX@GJXAIOU",[[1,0,"# Java Day03 变量和运算符"]],[0,0],[19,19]]],[1563151194689,["GJX@GJXAIOU",[[1,20,"\n"]],[19,19],[20,20]]],[1563151206931,["GJX@GJXAIOU",[[1,24,"一、"]],[24,24],[26,26]]],[1563151271050,["GJX@GJXAIOU",[[-1,281," And and Not same"]],[281,298],[281,281]]],[1563151452575,["GJX@GJXAIOU",[[-1,41,"  "],[-1,70,"  "],[-1,73," "],[-1,76," "],[-1,78," "],[-1,81," "],[-1,88,"  "],[-1,103,"  "],[-1,143,"  "],[-1,154,"  "],[-1,172,"  "],[-1,240,"  "],[-1,258," "],[-1,265," "],[-1,282,"  "],[-1,312,"  "],[-1,334," "],[-1,345," "],[-1,369,"  "],[-1,380," "],[-1,391," "],[-1,402,"  "],[-1,433,"  "],[-1,443,"  "],[-1,496,"  "],[-1,556,"  "],[-1,586,"  "],[-1,628,"  "],[-1,647," "],[-1,654," "],[-1,656,"  "],[-1,665,"  "],[-1,684," "],[-1,695," "],[-1,723,"  "],[-1,737," "],[-1,746," "],[-1,766,"  "],[-1,785,"  "],[-1,801,"  "],[-1,836,"  "],[-1,860," "],[-1,871," "],[-1,901,"  "],[-1,950," "],[-1,957," "],[-1,999,"  "],[-1,1006,"  "],[-1,1013,"  "],[-1,1030,"  "],[-1,1071,"  "],[-1,1088,"  "],[-1,1115,"  "],[-1,1118," "],[-1,1125," "],[-1,1134,"  "],[-1,1157,"  "],[-1,1169," "],[-1,1176," "],[-1,1178,"  "],[-1,1195,"  "],[-1,1201,"  "],[-1,1216,"  "],[-1,1223,"  "],[-1,1237,"  "]],[43,1250],[41,1144]]],[1563151454189,["GJX@GJXAIOU",[[-1,39,"  "],[-1,66,"  "],[-1,69,"  "],[-1,72,"  "],[-1,80,"  "],[-1,93,"  "],[-1,131,"  "],[-1,138,"  "],[-1,156,"  "],[-1,220,"  "],[-1,238," "],[-1,243," "],[-1,260,"  "],[-1,286,"  "],[-1,308," "],[-1,317," "],[-1,339,"  "],[-1,350," "],[-1,359," "],[-1,370,"  "],[-1,397,"  "],[-1,407,"  "],[-1,458,"  "],[-1,514,"  "],[-1,544,"  "],[-1,582,"  "],[-1,601," "],[-1,606," "],[-1,608,"  "],[-1,615,"  "],[-1,632," "],[-1,641," "],[-1,667,"  "],[-1,681," "],[-1,688," "],[-1,708,"  "],[-1,723,"  "],[-1,739,"  "],[-1,770,"  "],[-1,794," "],[-1,803," "],[-1,833,"  "],[-1,880," "],[-1,885," "],[-1,927,"  "],[-1,930,"  "],[-1,937,"  "],[-1,952,"  "],[-1,989,"  "],[-1,1006,"  "],[-1,1029,"  "],[-1,1032," "],[-1,1037," "],[-1,1046,"  "],[-1,1065,"  "],[-1,1077," "],[-1,1082," "],[-1,1084,"  "],[-1,1093," "],[-1,1098," "],[-1,1103,"  "],[-1,1114,"  "],[-1,1121," "],[-1,1126," "],[-1,1133,"  "]],[41,1144],[39,1038]]],[1563151455614,["GJX@GJXAIOU",[[-1,74,"  "],[-1,83,"  "],[-1,119,"  "],[-1,142,"  "],[-1,200,"  "],[-1,218,"  "],[-1,240,"  "],[-1,258,"  "],[-1,282,"  "],[-1,309,"  "],[-1,320,"  "],[-1,338," "],[-1,345," "],[-1,361,"  "],[-1,371,"  "],[-1,420," "],[-1,427," "],[-1,472,"  "],[-1,502,"  "],[-1,536,"  "],[-1,557,"  "],[-1,565,"  "],[-1,586,"  "],[-1,611,"  "],[-1,625," "],[-1,630," "],[-1,656,"  "],[-1,659,"  "],[-1,677," "],[-1,684," "],[-1,698,"  "],[-1,734,"  "],[-1,765," "],[-1,768," "],[-1,810,"  "],[-1,863,"  "],[-1,874," "],[-1,877," "],[-1,907,"  "],[-1,924,"  "],[-1,943,"  "],[-1,946,"  "],[-1,958,"  "],[-1,973,"  "],[-1,987,"  "],[-1,990," "],[-1,993," "],[-1,997,"  "],[-1,1007,"  "],[-1,1010," "],[-1,1013," "],[-1,1019,"  "],[-1,1029,"  "]],[39,1038],[39,948]]],[1563151467361,["GJX@GJXAIOU",[[-1,962,"  "],[-1,988,"  "],[-1,991,"  "],[-1,999," "],[-1,1002," "],[-1,1004,"  "],[-1,1011,"  "],[-1,1027," "],[-1,1030," "],[-1,1046,"  "],[-1,1055," "],[-1,1058," "],[-1,1067,"  "],[-1,1076,"  "],[-1,1079,"  "],[-1,1090,"  "],[-1,1130,"  "],[-1,1193,"  "],[-1,1215,"  "],[-1,1218," "],[-1,1221," "],[-1,1231,"  "],[-1,1261,"  "],[-1,1307," "],[-1,1317," "],[-1,1341,"  "],[-1,1379," "],[-1,1389," "],[-1,1420,"  "],[-1,1462,"  "],[-1,1485,"  "],[-1,1488,"  "]],[964,1534],[962,1482]]],[1563151482794,["GJX@GJXAIOU",[[-1,66,"邮箱注册：\n  126邮箱：\n      6~18个字符，可使用字母、数字、下划线，需以字母开头"]],[66,114],[66,66]]],[1563151485732,["GJX@GJXAIOU",[[-1,67,"  "]],[69,69],[67,67]]],[1563151485898,["GJX@GJXAIOU",[[-1,67,"\n"]],[67,67],[66,66]]],[1563151486075,["GJX@GJXAIOU",[[-1,66,"\n"]],[66,66],[65,65]]],[1563151486344,["GJX@GJXAIOU",[[-1,65,"\n"]],[65,65],[64,64]]],[1563151496212,["GJX@GJXAIOU",[[1,65,"- "]],[65,65],[67,67]]],[1563151504914,["GJX@GJXAIOU",[[1,476,"- "]],[476,476],[478,478]]],[1563151507719,["GJX@GJXAIOU",[[1,563,"-"]],[563,563],[564,564]]],[1563151507843,["GJX@GJXAIOU",[[1,565," "]],[564,564],[565,565]]],[1563151537257,["GJX@GJXAIOU",[[-1,749,"【要求】\n  能用英语就用英语\n  一个月内允许使用英文和中文拼音，一个月后全部使用英语\n  如果使用拼音请使用全拼！！！\n  Tsgly  图书管理员\n  \n  payTime\n  payPrice\n  payBeiZhu\n  \n  yy\n  yy2\n  \n  zinv\n  fuqin\n  laopo"]],[755,901],[749,749]]],[1563151537705,["GJX@GJXAIOU",[[-1,750,"\n"]],[749,749],[748,748]]],[1563151552468,["GJX@GJXAIOU",[[1,988,"- "]],[988,988],[990,990]]],[1563151556642,["GJX@GJXAIOU",[[1,859,"- "]],[859,859],[861,861]]],[1563151559049,["GJX@GJXAIOU",[[-1,858," "]],[859,859],[858,858]]],[1563151562968,["GJX@GJXAIOU",[[-1,988," "]],[989,989],[988,988]]],[1563151577858,["GJX@GJXAIOU",[[1,1036,"**"],[1,1070,"**"]],[1036,1070],[1036,1074]]],[1563151742396,["GJX@GJXAIOU",[[1,1690,"-"]],[1690,1690],[1691,1691]]],[1563151752956,["GJX@GJXAIOU",[[1,1704,"方式"]],[1704,1704],[1706,1706]]],[1563151786296,["GJX@GJXAIOU",[[1,1792,"* "]],[1826,1846],[1828,1848]]],[1563151788338,["GJX@GJXAIOU",[[-1,1792,"* "]],[1828,1848],[1826,1846]]],[1563151792260,["GJX@GJXAIOU",[[1,1826,"===="]],[1826,1826],[1828,1828]]],[1563151793986,["GJX@GJXAIOU",[[-1,1828,"=="]],[1828,1828],[1826,1826]]],[1563151796209,["GJX@GJXAIOU",[[-1,1846,"类型"]],[1848,1848],[1846,1846]]],[1563151801365,["GJX@GJXAIOU",[[1,1846,"类型===="]],[1846,1846],[1850,1850]]],[1563151803256,["GJX@GJXAIOU",[[-1,1850,"=="]],[1850,1850],[1848,1848]]],[1563152041123,["GJX@GJXAIOU",[[-1,2018,"**"]],[2020,2020],[2018,2018]]],[1563152042836,["GJX@GJXAIOU",[[1,2018,"===="]],[2018,2018],[2020,2020]]],[1563152045716,["GJX@GJXAIOU",[[-1,2020,"=="]],[2020,2022],[2020,2020]]],[1563152048394,["GJX@GJXAIOU",[[-1,2066,"**"],[1,2068,"=="]],[2066,2068],[2068,2068]]],[1563152094834,["GJX@GJXAIOU",[[-1,2088,"书"]],[2089,2089],[2088,2088]]],[1563152096237,["GJX@GJXAIOU",[[1,2088,"数"]],[2088,2088],[2089,2089]]],[1563152145306,["GJX@GJXAIOU",[[-1,2359,"    "]],[2363,2363],[2359,2359]]],[1563152145537,["GJX@GJXAIOU",[[-1,2358,"\n"]],[2359,2359],[2358,2358]]],[1563152148410,["GJX@GJXAIOU",[[1,2363,"\n    "]],[2363,2363],[2368,2368]]],[1563152150668,["GJX@GJXAIOU",[[-1,2375,"    "]],[2379,2379],[2375,2375]]],[1563152150840,["GJX@GJXAIOU",[[-1,2374,"\n"]],[2375,2375],[2374,2374]]],[1563152152210,["GJX@GJXAIOU",[[-1,2370,"    "]],[2374,2374],[2370,2370]]],[1563152152505,["GJX@GJXAIOU",[[-1,2369,"\n"]],[2370,2370],[2369,2369]]],[1563152154252,["GJX@GJXAIOU",[[1,2369,"。"]],[2369,2369],[2370,2370]]],[1563152196409,["GJX@GJXAIOU",[[-1,2687,"  "],[-1,2694,"  "],[-1,2734,"  "],[-1,2745,"  "],[-1,2767,"  "],[-1,2782,"  "],[-1,2823,"  "],[-1,2830,"  "],[-1,2853,"  "],[-1,2883,"  "],[-1,2940,"  "],[-1,2977,"  "]],[2688,3015],[2686,2991]]],[1563152200764,["GJX@GJXAIOU",[[-1,2502,"  "],[-1,2520,"  "],[-1,2545,"  "],[-1,2602," "],[-1,2609," "],[-1,2631,"  "],[-1,2634," "],[-1,2637," "],[-1,2659,"  "]],[2500,2675],[2500,2661]]],[1563152206452,["GJX@GJXAIOU",[[-1,2151,"  "],[-1,2170,"  "],[-1,2179," "],[-1,2182," "],[-1,2200,"  "],[-1,2209,"  "],[-1,2216,"  "],[-1,2235,"  "],[-1,2238," "],[-1,2241," "],[-1,2260,"  "],[-1,2276," "],[-1,2279," "],[-1,2281,"  "],[-1,2310," "],[-1,2312," "],[-1,2315," "],[-1,2366,"  "],[-1,2398," "],[-1,2401," "],[-1,2403,"  "],[-1,2422,"  "],[-1,2436,"  "],[-1,2458,"  "]],[2151,2479],[2149,2443]]],[1563152214842,["GJX@GJXAIOU",[[-1,2854,"\n              "]],[2854,2869],[2854,2854]]],[1563152217012,["GJX@GJXAIOU",[[-1,2888,"\n              "]],[2888,2903],[2888,2888]]],[1563152219601,["GJX@GJXAIOU",[[-1,2791,"     "]],[2796,2796],[2791,2791]]],[1563152221937,["GJX@GJXAIOU",[[-1,2799,"          "]],[2799,2809],[2799,2799]]],[1563152227004,["GJX@GJXAIOU",[[1,2636,"- "]],[2636,2636],[2638,2638]]],[1563152231606,["GJX@GJXAIOU",[[1,2690,"示例："]],[2690,2690],[2693,2693]]],[1563152235972,["GJX@GJXAIOU",[[1,2795,"-"]],[2795,2795],[2796,2796]]],[1563152236155,["GJX@GJXAIOU",[[1,2797," "]],[2796,2796],[2797,2797]]],[1563152236819,["GJX@GJXAIOU",[[1,2798," "]],[2797,2797],[2798,2798]]],[1563152239425,["GJX@GJXAIOU",[[-1,2797,"  "]],[2799,2799],[2797,2797]]],[1563152240145,["GJX@GJXAIOU",[[-1,2794," "]],[2793,2793],[2792,2792]]],[1563152245179,["GJX@GJXAIOU",[[1,2690,"- "]],[2690,2690],[2692,2692]]],[1563152249931,["GJX@GJXAIOU",[[1,2796,"  "]],[2796,2796],[2798,2798]]],[1563152260783,["GJX@GJXAIOU",[[1,2151,"·"]],[2151,2151],[2152,2152]]],[1563152262139,["GJX@GJXAIOU",[[-1,2151,"·"]],[2152,2152],[2151,2151]]],[1563152262659,["GJX@GJXAIOU",[[1,2151,"`"]],[2151,2151],[2152,2152]]],[1563152264421,["GJX@GJXAIOU",[[1,2166,"`"]],[2166,2166],[2167,2167]]],[1563152269291,["GJX@GJXAIOU",[[-1,2202,"\n"]],[2203,2203],[2202,2202]]],[1563152274141,["GJX@GJXAIOU",[[1,2245,"`"]],[2245,2245],[2246,2246]]],[1563152274954,["GJX@GJXAIOU",[[1,2259,"`"]],[2259,2259],[2260,2260]]],[1563152277579,["GJX@GJXAIOU",[[-1,2225,"  "]],[2227,2227],[2225,2225]]],[1563152281793,["GJX@GJXAIOU",[[-1,2242," "]],[2241,2242],[2241,2241]]],[1563152284289,["GJX@GJXAIOU",[[-1,2261,"  "]],[2263,2263],[2261,2261]]],[1563152289965,["GJX@GJXAIOU",[[1,2339,"\n  "]],[2339,2339],[2342,2342]]],[1563152291689,["GJX@GJXAIOU",[[-1,2372,"  "]],[2374,2374],[2372,2372]]],[1563152292090,["GJX@GJXAIOU",[[-1,2372,"\n"]],[2372,2372],[2371,2371]]],[1563152301802,["GJX@GJXAIOU",[[-1,2933,"  "],[-1,2951,"  "],[-1,2962," "],[-1,2965," "],[-1,2967,"  "],[-1,2987,"  "],[-1,3004,"  "],[-1,3007,"  "],[-1,3026," "],[-1,3029," "],[-1,3053,"  "],[-1,3066,"  "]],[2934,3081],[2932,3061]]],[1563152307357,["GJX@GJXAIOU",[[-1,3078,"  "],[-1,3117,"  "],[-1,3138,"  "],[-1,3141,"  "],[-1,3183,"  "],[-1,3198,"  "],[-1,3205,"  "],[-1,3214," "],[-1,3221," "],[-1,3234,"  "],[-1,3237," "],[-1,3240," "],[-1,3250,"  "],[-1,3278," "],[-1,3285," "],[-1,3308,"  "],[-1,3376,"  "],[-1,3379,"  "],[-1,3406,"  "],[-1,3409,"  "],[-1,3446,"  "],[-1,3499,"  "],[-1,3514,"  "],[-1,3531,"  "],[-1,3574,"  "],[-1,3592," "],[-1,3602," "],[-1,3604,"  "],[-1,3622," "],[-1,3633," "],[-1,3666,"  "],[-1,3689," "],[-1,3700," "],[-1,3744,"  "],[-1,3747," "],[-1,3758," "],[-1,3790,"  "]],[3080,3809],[3078,3749]]],[1563152307554,["GJX@GJXAIOU",[[-1,3076,"  "],[-1,3113,"  "],[-1,3132,"  "],[-1,3135,"  "],[-1,3173,"  "],[-1,3188,"  "],[-1,3191,"  "],[-1,3200," "],[-1,3205," "],[-1,3216,"  "],[-1,3219,"  "],[-1,3230,"  "],[-1,3256," "],[-1,3261," "],[-1,3284,"  "],[-1,3348,"  "],[-1,3351,"  "],[-1,3374,"  "],[-1,3377,"  "],[-1,3412,"  "],[-1,3463,"  "],[-1,3474,"  "],[-1,3491,"  "],[-1,3530,"  "],[-1,3548," "],[-1,3556," "],[-1,3558,"  "],[-1,3574," "],[-1,3583," "],[-1,3614,"  "],[-1,3637," "],[-1,3646," "],[-1,3688,"  "],[-1,3691," "],[-1,3700," "],[-1,3732,"  "]],[3078,3749],[3076,3689]]],[1563152431517,["GJX@GJXAIOU",[[-1,3347,"  "],[-1,3378,"  "],[-1,3427,"  "],[-1,3434,"  "],[-1,3451,"  "],[-1,3480," "],[-1,3487," "],[-1,3509,"  "],[-1,3512,"  "],[-1,3532,"  "],[-1,3562,"  "],[-1,3585," "],[-1,3592," "],[-1,3626,"  "],[-1,3641,"  "],[-1,3674," "],[-1,3681," "],[-1,3701,"  "],[-1,3713,"  "],[-1,3742,"  "],[-1,3745,"  "],[-1,3778,"  "],[-1,3788,"  "],[-1,3792,"  "],[-1,3808,"  "],[-1,3875,"  "],[-1,3891,"  "],[-1,3898,"  "],[-1,3929,"  "],[-1,3942," "],[-1,3945," "],[-1,3955,"  "],[-1,3975,"  "],[-1,3983,"  "],[-1,3991,"  "],[-1,4058," "],[-1,4065," "],[-1,4088,"  "],[-1,4091,"  "],[-1,4103," "],[-1,4110," "],[-1,4112,"  "],[-1,4131,"  "],[-1,4142,"  "],[-1,4159,"  "],[-1,4162," "],[-1,4165," "],[-1,4168,"  "],[-1,4173,"  "]],[3349,4191],[3347,4107]]],[1563152436835,["GJX@GJXAIOU",[[1,3847,"    "]],[3847,3847],[3851,3851]]],[1563152438988,["GJX@GJXAIOU",[[-1,3845,"      "],[1,3851,"·"]],[3845,3845],[3846,3846]]],[1563152439509,["GJX@GJXAIOU",[[1,3846,"·"]],[3846,3846],[3847,3847]]],[1563152440531,["GJX@GJXAIOU",[[-1,3845,"··"]],[3847,3847],[3845,3845]]],[1563152441813,["GJX@GJXAIOU",[[1,3845,"```"]],[3845,3845],[3848,3848]]],[1563152441847,["GJX@GJXAIOU",[[1,3848,"language\n```\n"]],[3848,3848],[3848,3856]]],[1563152444785,["GJX@GJXAIOU",[[-1,3857,"```"]],[3857,3860],[3857,3857]]],[1563152447921,["GJX@GJXAIOU",[[1,4119,"```"]],[4119,4119],[4122,4122]]],[1563152451522,["GJX@GJXAIOU",[[-1,3858,"\n"]],[3858,3858],[3857,3857]]],[1563152451747,["GJX@GJXAIOU",[[-1,3857,"\n"]],[3857,3857],[3856,3856]]],[1563152456226,["GJX@GJXAIOU",[[-1,4116,"\n"]],[4117,4117],[4116,4116]]],[1563152457521,["GJX@GJXAIOU",[[1,4116,"\n  "]],[4116,4116],[4119,4119]]],[1563152461764,["GJX@GJXAIOU",[[-1,4117,"  "]],[4119,4119],[4117,4117]]],[1563152467686,["GJX@GJXAIOU",[[-1,3848,"language\n"],[1,3857,"j"]],[3848,3857],[3849,3849]]],[1563152468148,["GJX@GJXAIOU",[[1,3849,"ava"]],[3849,3849],[3852,3852]]],[1563152469060,["GJX@GJXAIOU",[[1,3852,"\n"]],[3852,3852],[3853,3853]]],[1563152470482,["GJX@GJXAIOU",[[1,3853,"\n  "]],[3853,3853],[3856,3856]]],[1563152473649,["GJX@GJXAIOU",[[-1,3856,"  "]],[3857,3857],[3855,3855]]],[1563152484019,["GJX@GJXAIOU",[[1,3662,"```"]],[3662,3662],[3665,3665]]],[1563152484053,["GJX@GJXAIOU",[[1,3665,"language\n```\n"]],[3665,3665],[3665,3673]]],[1563152489801,["GJX@GJXAIOU",[[-1,3662,"```language\n```"]],[3662,3677],[3662,3662]]],[1563152493011,["GJX@GJXAIOU",[[-1,3502,"  "],[-1,3510,"  "],[-1,3542,"  "],[-1,3565," "],[-1,3570," "],[-1,3608,"  "],[-1,3611," "],[-1,3616," "],[-1,3648,"  "]],[3498,3661],[3498,3647]]],[1563152495153,["GJX@GJXAIOU",[[-1,3500,"  "],[-1,3508,"  "],[-1,3536,"  "],[-1,3559," "],[-1,3562," "],[-1,3598,"  "],[-1,3601," "],[-1,3604," "],[-1,3636,"  "]],[3498,3647],[3498,3633]]],[1563152558986,["GJX@GJXAIOU",[[-1,3827,"  "],[-1,3852,"  "],[-1,3869,"  "],[-1,3880,"  "],[-1,3898,"  "],[-1,3902,"  "],[-1,3910,"  "],[-1,3975,"  "],[-1,4001,"  "],[-1,4004,"  "],[-1,4018,"  "],[-1,4021,"  "],[-1,4042,"  "],[-1,4045,"  "],[-1,4060,"  "],[-1,4063,"  "]],[3829,4066],[3827,4034]]],[1563152565210,["GJX@GJXAIOU",[[-1,3826,"\n"]],[3826,3826],[3825,3825]]],[1563152569307,["GJX@GJXAIOU",[[-1,4033,"\n"]],[4034,4034],[4033,4033]]],[1563152578017,["GJX@GJXAIOU",[[1,3821,"`"],[1,3825,"`"]],[3818,3825],[3818,3827]]],[1563152578419,["GJX@GJXAIOU",[[1,3822,"`"],[1,3826,"`"]],[3818,3827],[3818,3829]]],[1563152579818,["GJX@GJXAIOU",[[-1,3818,"`````java``"]],[3818,3829],[3818,3818]]],[1563152580660,["GJX@GJXAIOU",[[1,3818,"```"]],[3818,3818],[3821,3821]]],[1563152580693,["GJX@GJXAIOU",[[1,3821,"language\n```\n"]],[3821,3821],[3821,3829]]],[1563152581804,["GJX@GJXAIOU",[[-1,3821,"language"],[1,3829,"j"]],[3821,3829],[3822,3822]]],[1563152582259,["GJX@GJXAIOU",[[1,3822,"ava"]],[3822,3822],[3825,3825]]],[1563152584434,["GJX@GJXAIOU",[[-1,3826,"```"]],[3829,3829],[3826,3826]]],[1563152585011,["GJX@GJXAIOU",[[-1,3827,"\n"]],[3826,3826],[3825,3825]]],[1563152591076,["GJX@GJXAIOU",[[1,4057,"`"],[1,4058,"`"]],[4054,4058],[4054,4060]]],[1563152591410,["GJX@GJXAIOU",[[1,4058,"`"],[1,4059,"`"]],[4054,4060],[4054,4062]]],[1563152591905,["GJX@GJXAIOU",[[-1,4054,"````` ``"]],[4054,4062],[4054,4054]]],[1563152592123,["GJX@GJXAIOU",[[-1,4053,"\n"]],[4054,4054],[4053,4053]]],[1563152593233,["GJX@GJXAIOU",[[1,4053,"\n  "]],[4053,4053],[4056,4056]]],[1563152593921,["GJX@GJXAIOU",[[-1,4065,"  "]],[4056,4056],[4054,4054]]],[1563152594313,["GJX@GJXAIOU",[[-1,4053,"\n"]],[4054,4054],[4053,4053]]],[1563152595355,["GJX@GJXAIOU",[[1,4053,"\n  "]],[4053,4053],[4056,4056]]],[1563152595490,["GJX@GJXAIOU",[[-1,4054,"             "],[1,4067,"\n"]],[4056,4056],[4055,4055]]],[1563152596460,["GJX@GJXAIOU",[[1,4055,"`"]],[4055,4055],[4056,4056]]],[1563152597379,["GJX@GJXAIOU",[[1,4056,"``"]],[4056,4056],[4058,4058]]],[1563152600953,["GJX@GJXAIOU",[[-1,4054,"\n"]],[4054,4054],[4053,4053]]],[1563152612865,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1563152625497,["GJX@GJXAIOU",[[1,0,"---\ntags : \n- java基础\n\nflag: blue\n---"]],[0,0],[36,36]]]],null,"GJX@GJXAIOU"],["5012f058-fa9e-419a-aacc-b693aab31995",1563284362242,"---\ntags : \n- java基础\n\nflag: blue\n---\n# Java Day03 变量和运算符\n\n## 一、命名规范 标识符\n   \n以下参考规范 AJCG (阿里巴巴技术团队规范)\n\n- 标识符能够使用的字符范围要求：\n  1. 标识符只能使用数字(0 ~ 9) 字母(A ~ Z a ~ z) 唯一可以使用的标点符号下划线(_)\n  2. 要求标识符必须用字母开头\n  3. 在标识符中严格区分大小写\n  4. 标识符没有严格的长度限制\n  5. 标识符要做到 见名知意 动宾结构\n      **a b c d** \n      imgTitle\n      imgbanner\n      imgGoods\n      imgLogo\n      studentInfo ageOfWorker getPingjiaByName\n      iPhone iPad iTouch iPod iWatch iTV iTunes\n  6. Java内部已经被征用的关键字不能用来做标识符 \n      public static void \n      int long double \n  \n【规范】\n- **a)小驼峰命名法**\n      首字母小写，其他单词的首字母大写\n      iPhone iPad\n    **使用范围：变量名 和 函数名**\n      \n -  **b) 大驼峰命名法**\n      所有单词的首字母全部大写\n      Dog Cat ContactSystem\n      **使用范围：class之后的名字要使用大驼峰命名法**\n  c)**************************************\n  d)**************************************\n\n\n## 变量【重点】\n  天气 气温 年龄 身高 体重 时间\n      \n  未知数\n  \n  方程\n  x + y = 10;\n  x + 2y = 30;\n  y = 5;\n  x = 20;\n  变量\n  \n - 变量的定义：\n      变量就是在Java程序中可以运行时可以发生改变的量\n      例如：二元一次方程，x 和 y 是未知数/变量 但是我们需要一个【容器】或者说【名字】来保存这个数据\n          这里 x 和 y 就起到这样的作用\n  \n - 容器具有的特征：\n      1. 现实中容器 例如： 水杯，箱子，书包\n         **在计算机当中，所谓的总容器就是硬盘，对于正在运行的程序，总容器是内存**\n         变量会占用一定的【内存】空间，跟数据类型有关\n      2. 存放的数据有一定的数据格式要求, Java的数据类型\n         10101010010101010101010010101\n         .exe  .doc  .txt   .java\n      3. 这个【容器】会有一个特定的名字\n  \n  常量中存在的数据类型：整型， 小数， 真假关系，字符， 字符串(类型特殊，暂不考虑)\n\n整型 | 占用空间大小 | 数据范围\n---|---|---\nbyte | 1字节(8bit) | -128 ~ 127\nshort | 2字节(16bit) | -32768 ~ 32767 \nint | 4字节(32bit) | 2^32 - 1\nlong | 8字节(64bit) | 2^64 - 1\n\n\n浮点型 | 占用空间大小 | 数据范围\n---|---|---\nfloat | 4字节(32bit) | -3.4 * 10^38 ~ 3.4 * 10^38\ndouble | 8字节(64bit) | 10 ^ 308\n\n\n字符型 | 占用空间大小 | 数据范围\n---|---|---\nchar | 2字节 | 在GBK编码中可以保存中文\n\n\n布尔型 | 占用空间大小 | 数据范围\n---|---|---\nboolean | 因环境而异 | true false\n    \n\n\n - 任何定义(声明)一个变量方式：\n      数据类型  变量名 = 数据;\n  \n  注意事项：\n      a)在Java当中一个**变量在没有赋值的情况下，是不能被使用的**    \n      b)在计算机中，原则是保证数据的完整性，不考虑所占内存空间问题。那么==浮点型(小数)系统默认为double类型==，保证数据的精度，完整性。但是要给float类型赋值的时候，如果不加修饰，赋值会报错，所以要求给float类型赋值的浮点类型数据必须加上f或者F修饰\n      例如:\n          float floatNumber = 3.14f;\n          float floatNumber = 0.618F;\n      c)==字符变量是可以赋值一个字母，一个转义字符甚至于一个数字但是数字范围要求在ASCII码范围以内==\n      转义字符之后可以使用八进制数，一个特殊的字符\\0 这是ASCII码表里面第一个字符，是字符的\"0\"值\n      d) = 赋值\n## 算术运算符\n  `+  -  ×  ÷  ()`\n  先乘除后加减\n  先算括号里面的后算括号外面的\n  除数不能为0  \n  7 ÷ 3 = 2 …… 1\n  \n在代码中算术运算符是什么样子？\n `+ - * / ()  %`\n  \n= 赋值 把赋值号右侧的数据赋值给左侧的【变量】\n\n  在操作算术运算的时候，如果一个变量或者一个数据，没有被赋值号赋值的情况下，是不会发生任何的改变\n  \n  2。优先级问题：只要记住最高的优先级是() 简单粗暴加括号\n  += -= /= *= %=\n  例如：\n      num1 = num1 + num2;\n      num1 += num2;\n        \n## 自增自减运算符\n  这些运算符是提供给【变量】使用\n  ++：自增操作，相当于当前变量 += 1\n      优先级问题：如果++ 运算符在变量之后，先执行该行语句，再来执行++自增操作，如果在变量之前，先\n      执行自增操作，再来执行改行语句的运行\n  \n  --：自减操作，性对于当前变量 -= 1\n      自减的优先级同上\n        \n  - [建议]\n      在代码中使用自增自减运算符，一般都是单独成行，避免没必要的歧义\n      \n  - 示例：面试题： Java中不支持\n      int num = 5;\n      ++(num++) 6  7  \n                7  7\n                语法错误\n     - 解释：\n    按照语法，首先执行num++ 结果是一个6，是一个常量，这个常量就是小括号表示的数值，也是一个常量。在这里括号里面的内容会被认为是一个常量6 来处理在++ 或者 -- 中不能操作任何的【常量】\n                  \n## 关系运算符\n  < >  = ≥ ≤ ≠ \n  手写的关系运算符\n  \n  < > == <= >= !=\n  代码中支持关系运算符\n  \n  关系运算符的结果是什么？？？\n  boolean  true  false\n  5 > 2 true\n  2 > 3 false\n    \n## 逻辑运算符\n与：金库，需要两个人拿两把钥匙，同时在场才可以打开，缺一不可\n    && 同真为真，有假为假\n    \n或：自个家，不管是谁带钥匙，都开打开门，但是如果都没有带，GG\n    || 有真为真，同假为假\n\n非：犟 取反\n    ! 真变假来假变真\n\n【拓展】    \n    true 0000 0001 => 1\n    false 0000 0000  => 0\n    在计算机世界中，默认的真假关系是 1 和 0， 而Java不支持这样方式，采用的是true和false来代表\n   \n    在计算机世界中，非0即真\n    \n  **while (true) 死循环  Java支持**\n  while (1)    死循环 其他语言支持的 C/OC/C++/JavaScript\n  \n  面试题: (不针对Java)\n      请解释以下内容的含义，用通俗的代码来表示\n      前提：n是一个int类型的变量\n     \n  !n的含义\n  n = 1;   !n  = false;\n  n = 0;   !n  = true;\n  n = 2;   !n  = false; //非 0 即 真 \n  \n  !n的含义是 判断当前n的值是否等于0 ，换一种方式表示如下\n  n == 0;\n\n\n## 分支结构\n  代码中有三大结构：\n      顺序结构，分支结构和循环结构\n      \n  if (判断语句 true/false) {\n      //语句体\n  }\n  运行流程：\n      当程序运行到if语句，首先判断if 之后的括号里面的内容是否为true，如果为true执行语句体，如果为false，\n      直接执行大括号之后的语句\n\n```java\n\nif (判断语句 true/false) {\n    //true 语句体\n} else {\n    //false 语句体\n}\n运行流程：\n    当程序运行到if-else语句，首先判断if之后的括号里面的内容是否为true，如果为true执行true 语句体，\n    如果为false 执行false语句体\n\nif () {\n    \n} else if () {\n    \n} else {\n    \n}  \n  switch - case:\n```\n        ",[[1563284341976,["GJX@GJXAIOU",[[1,37,"\n@toc\n\n"]],[37,37],[44,44]]]],null,"GJX@GJXAIOU"]]}