{"compress":true,"commitItems":[["18ad9fa0-367a-4cfa-af54-73095998977f",1556156044938,"## 分支结构\n    代码中有三大结构：\n        顺序结构，分支结构和循环结构\n        \n    if (判断语句 true/false) {\n        //语句体\n    }\n    运行流程：\n        当程序运行到if语句，首先判断if 之后的括号里面的内容是否为true，如果为true执行语句体，如果为false，\n        直接执行大括号之后的语句\n\n    \n    if (判断语句 true/false) {\n        //true 语句体\n    } else {\n        //false 语句体\n    }\n    运行流程：\n        当程序运行到if-else语句，首先判断if之后的括号里面的内容是否为true，如果为true执行true 语句体，\n        如果为false 执行false语句体\n    \n    世界上最遥远的距离不是我站着你的面前，而你不知道我爱你，而是我在if里，你在else里\n    \n    闰年条件：\n        能被400整除。或者能被4整除但是不能被100整除。\n        int year = 2000;\n        \n        //闰年条件的代码展示\n        year % 400 == 0 || (year % 4 == 0 && year % 100 != 0) \n    \n    if (条件1) {\n        //语句体1\n    } else if (条件2) {\n        //语句体2\n    } else if (条件3) {\n        //语句体3\n    ……………………\n        \n    } else {\n        //语句体n\n    }\n    \n    运行流程：\n        当程序运行到if - else if结构，首先进行匹配if之后括号里面的条件，找到第一个匹配的选项，执行\n        当前if对应的语句体，跳出大括号。如果没有任何一个条件匹配，执行else里面的语句体n\n        \n        学生成绩：\n            90以上  优 关系运算符  score >= 90\n            80以上  良\n            70以上  中\n            60以上  及格\n            60以下  叫家长过来~~~\n            \n    Scanner的使用：\n        从键盘上获取用户输入的数据的一种方式：\n            是目前没有办法的办法，正常的做开发是通过前端页面发送数据到后台\n        1. 导包，给当前程序提供技能点\n            在程序的开头 clase之前写上\n            import java.util.Scanner;\n        2. 创建Scanner扫描器的变量\n            Scanner sc = new Scanner(System.in); \n        3. 使用Scanner里面的nestInt();方法获取用户在键盘上输入的int类型数据\n            num = sc.nextInt();\n                sc.nextFloat();\n                sc.nextShort();\n                sc.nextLine();\n                \n    参数合法性判断：\n        一般程序的运行首先要符合正常的Java语法要求，但是代码是要提供给用户使用的，也要符合\n        生活逻辑，所以在运行的过程中，要添加一些判断，让代码更加符合生活的情况\n        \n        例如：学生成绩 满分100分的情况下，分数的范围在 0 ~ 100之间，如果超过了这个范围\n        这个数据就是一个在生活逻辑上非法数据。所以这里要做参数合法性判断。\n        \n        让代码更加健壮，思维更加严谨\n                \n    \n    switch - case:匹配的操作\n    \n        switch (变量) {\n        \n            case 确定值1: //冒号\n                处理方式1;\n                break;\n                \n            case 确定值2: //冒号\n                处理方式2;\n                break;\n            ………………………………\n            \n            default: //冒号\n                最终的处理方式;\n                break;\n        }\n        执行流程：\n            当程序运行到switch - case 结构，直接利用switch之后的变量去case 中做匹配，找到完全匹配的\n            case选项，执行case之后的处理方式，如果没有任何的一个case匹配执行default里面的最终处理方\n            式\n        \n        【注意事项】\n            1. 在switch - case结构中，运行的代码只能是在case 到 break之间的代码！！！\n            2. break可以省略，但是之前的case会继续往下执行，直到遇到break跳出switch - case 结构\n            3. 在case之外的代码是不会被运行的，在Java中这个会被认为是一个无效代码，如果是Eclipse提示\n            是一个unreachable code 无法触及的代码\n            4. 在switch-case中不能出现相同的case选项\n            5. default可以省略",[[1556156035191,["GJX@GJXAIOU",[[-1,400,"    世界上最遥远的距离不是我站着你的面前，而你不知道我爱你，而是我在if里，你在else里"]],[402,447],[400,400]]],[1556156265044,["GJX@GJXAIOU",[[-1,1543,"\n        "]],[1543,1552],[1543,1543]]],[1556156323789,["GJX@GJXAIOU",[[-1,2282,"  "],[-1,2335,"  "],[-1,2405,"  "],[-1,2481,"  "],[-1,2511,"  "],[-1,2553,"  "]],[2282,2579],[2280,2567]]],[1556156324241,["GJX@GJXAIOU",[[-1,2280,"  "],[-1,2333,"  "],[-1,2401,"  "],[-1,2473,"  "],[-1,2503,"  "],[-1,2543,"  "]],[2280,2567],[2278,2555]]],[1556156324605,["GJX@GJXAIOU",[[-1,2278,"  "],[-1,2331,"  "],[-1,2397,"  "],[-1,2465,"  "],[-1,2495,"  "],[-1,2533,"  "]],[2278,2555],[2276,2543]]],[1556156324965,["GJX@GJXAIOU",[[-1,2276,"  "],[-1,2329,"  "],[-1,2393,"  "],[-1,2457,"  "],[-1,2487,"  "],[-1,2523,"  "]],[2276,2543],[2274,2531]]],[1556156328192,["GJX@GJXAIOU",[[-1,2257,"        "]],[2265,2265],[2257,2257]]],[1556156330437,["GJX@GJXAIOU",[[-1,2087,"      "]],[2091,2091],[2085,2085]]],[1556156337246,["GJX@GJXAIOU",[[1,1762,"··"]],[1762,1762],[1764,1764]]],[1556156338432,["GJX@GJXAIOU",[[-1,1762,"··"]],[1764,1764],[1762,1762]]],[1556156339525,["GJX@GJXAIOU",[[1,1762,"```"]],[1762,1762],[1765,1765]]],[1556156339551,["GJX@GJXAIOU",[[1,1765,"language\n```\n"]],[1765,1765],[1765,1773]]],[1556156341912,["GJX@GJXAIOU",[[-1,1765,"language"],[1,1773,"j"]],[1765,1773],[1766,1766]]],[1556156342294,["GJX@GJXAIOU",[[1,1766,"ava"]],[1766,1766],[1769,1769]]],[1556156342928,["GJX@GJXAIOU",[[1,1770,"\n"]],[1769,1769],[1770,1770]]],[1556156348773,["GJX@GJXAIOU",[[-1,1786,"  "],[-1,1802,"  "],[-1,1821,"  "],[-1,1839,"  "],[-1,1876,"  "],[-1,1885,"  "],[-1,1912,"  "],[-1,1930," "],[-1,1945," "],[-1,1953,"  "],[-1,1976," "],[-1,1987," "],[-1,2011,"  "],[-1,2014," "],[-1,2025," "],[-1,2040,"  "],[-1,2079,"  "],[-1,2088,"  "]],[1780,2097],[1780,2067]]],[1556156349191,["GJX@GJXAIOU",[[-1,1784,"  "],[-1,1800,"  "],[-1,1815,"  "],[-1,1833,"  "],[-1,1866,"  "],[-1,1875,"  "],[-1,1898,"  "],[-1,1916," "],[-1,1929," "],[-1,1937,"  "],[-1,1958," "],[-1,1967," "],[-1,1989,"  "],[-1,1992," "],[-1,2001," "],[-1,2016,"  "],[-1,2051,"  "],[-1,2060,"  "]],[1780,2067],[1780,2037]]],[1556156349616,["GJX@GJXAIOU",[[-1,1782,"  "],[-1,1798,"  "],[-1,1809,"  "],[-1,1827,"  "],[-1,1856,"  "],[-1,1865,"  "],[-1,1884,"  "],[-1,1902," "],[-1,1913," "],[-1,1921,"  "],[-1,1940," "],[-1,1947," "],[-1,1967,"  "],[-1,1970," "],[-1,1977," "],[-1,1992,"  "],[-1,2023,"  "],[-1,2032,"  "]],[1780,2037],[1780,2007]]],[1556156351744,["GJX@GJXAIOU",[[-1,1780,"  switch (变量) {\n  \n      case 确定值1: //冒号\n          处理方式1;\n          break;\n          \n      case 确定值2: //冒号\n          处理方式2;\n          break;\n      ………………………………\n      \n      default: //冒号\n          最终的处理方式;\n          break;\n  }"]],[1780,2007],[1780,1780]]],[1556156353503,["GJX@GJXAIOU",[[1,1770,"  switch (变量) {\n  \n      case 确定值1: //冒号\n          处理方式1;\n          break;\n          \n      case 确定值2: //冒号\n          处理方式2;\n          break;\n      ………………………………\n      \n      default: //冒号\n          最终的处理方式;\n          break;\n  }"]],[1770,1770],[1997,1997]]],[1556156359868,["GJX@GJXAIOU",[[-1,2008,"  "],[-1,2016,"  "],[-1,2095,"  "],[-1,2151,"  "]],[2009,2164],[2008,2156]]],[1556156360303,["GJX@GJXAIOU",[[-1,2022,"  "],[-1,2089,"  "],[-1,2145,"  "]],[2008,2156],[2008,2150]]],[1556156360947,["GJX@GJXAIOU",[[-1,2020,"  "],[-1,2085,"  "],[-1,2141,"  "]],[2008,2150],[2008,2144]]],[1556156365824,["GJX@GJXAIOU",[[-1,2076,"\n      "]],[2076,2083],[2076,2076]]],[1556156369700,["GJX@GJXAIOU",[[-1,2129,"\n      "]],[2129,2136],[2129,2129]]],[1556156378099,["GJX@GJXAIOU",[[-1,1118,"  "],[-1,1137,"  "],[-1,1166," "],[-1,1177," "],[-1,1210,"  "],[-1,1231," "],[-1,1242," "],[-1,1281,"  "],[-1,1335,"  "],[-1,1381,"  "],[-1,1399,"  "],[-1,1445,"  "],[-1,1476,"  "],[-1,1479,"  "],[-1,1492,"  "],[-1,1579," "],[-1,1586," "],[-1,1588,"  "],[-1,1648,"  "],[-1,1690,"  "],[-1,1693,"  "]],[1112,1715],[1112,1679]]],[1556156378444,["GJX@GJXAIOU",[[-1,1116,"  "],[-1,1135,"  "],[-1,1162," "],[-1,1171," "],[-1,1202,"  "],[-1,1223," "],[-1,1232," "],[-1,1271,"  "],[-1,1323,"  "],[-1,1365,"  "],[-1,1383,"  "],[-1,1425,"  "],[-1,1454,"  "],[-1,1457,"  "],[-1,1468,"  "],[-1,1553," "],[-1,1558," "],[-1,1560,"  "],[-1,1616,"  "],[-1,1656,"  "],[-1,1659,"  "]],[1112,1679],[1112,1643]]],[1556156378959,["GJX@GJXAIOU",[[-1,1114,"  "],[-1,1133,"  "],[-1,1158," "],[-1,1165," "],[-1,1194,"  "],[-1,1215," "],[-1,1222," "],[-1,1261,"  "],[-1,1311," "],[-1,1318," "],[-1,1349,"  "],[-1,1367," "],[-1,1378," "],[-1,1395,"  "],[-1,1432,"  "],[-1,1444,"  "],[-1,1527,"  "],[-1,1534,"  "],[-1,1584,"  "],[-1,1622,"  "],[-1,1625,"  "]],[1112,1643],[1112,1609]]],[1556156379448,["GJX@GJXAIOU",[[-1,1112,"  "],[-1,1131," "],[-1,1136," "],[-1,1154," "],[-1,1159," "],[-1,1186,"  "],[-1,1207," "],[-1,1212," "],[-1,1251,"  "],[-1,1299," "],[-1,1304," "],[-1,1333,"  "],[-1,1351," "],[-1,1360," "],[-1,1385,"  "],[-1,1402," "],[-1,1411," "],[-1,1422,"  "],[-1,1503,"  "],[-1,1506,"  "],[-1,1554,"  "],[-1,1590,"  "],[-1,1593,"  "]],[1112,1609],[1112,1575]]],[1556156385224,["GJX@GJXAIOU",[[1,1391,"**"],[1,1399,"**"]],[1391,1399],[1391,1403]]],[1556156393880,["GJX@GJXAIOU",[[-1,408,"  "],[-1,416,"  "],[-1,457,"  "],[-1,482,"  "],[-1,485," "],[-1,492," "],[-1,505,"  "],[-1,570,"  "],[-1,573,"  "],[-1,588," "],[-1,595," "],[-1,603,"  "],[-1,625," "],[-1,632," "],[-1,640,"  "],[-1,662," "],[-1,669," "],[-1,677,"  "],[-1,690," "],[-1,697," "],[-1,699,"  "],[-1,712," "],[-1,719," "],[-1,729,"  "],[-1,733,"  "],[-1,740,"  "],[-1,748,"  "],[-1,815,"  "],[-1,867,"  "],[-1,870,"  "],[-1,884,"  "],[-1,933,"  "],[-1,943,"  "],[-1,973,"  "],[-1,984,"  "],[-1,1021,"  "],[-1,1024,"  "],[-1,1040,"  "],[-1,1068,"  "]],[409,1111],[407,1045]]],[1556156400294,["GJX@GJXAIOU",[[1,408,"    "]],[408,408],[412,412]]],[1556156404662,["GJX@GJXAIOU",[[-1,410,"  "],[-1,418,"  "],[-1,451,"  "],[-1,478,"  "],[-1,481,"  "],[-1,499,"  "]],[412,559],[410,547]]],[1556156405069,["GJX@GJXAIOU",[[-1,408,"  "],[-1,416,"  "],[-1,447,"  "],[-1,470,"  "],[-1,473,"  "],[-1,489,"  "]],[410,547],[408,535]]],[1556156410494,["GJX@GJXAIOU",[[1,480,"`"]],[480,480],[481,481]]],[1556156411654,["GJX@GJXAIOU",[[1,536,"`"]],[536,536],[537,537]]],[1556156412885,["GJX@GJXAIOU",[[1,540,"```"]],[540,540],[543,543]]],[1556156415543,["GJX@GJXAIOU",[[1,684,"```"]],[684,684],[687,687]]],[1556156418231,["GJX@GJXAIOU",[[1,537,"\\"]],[537,537],[538,538]]],[1556156419272,["GJX@GJXAIOU",[[-1,537,"\\"]],[538,538],[537,537]]],[1556156419541,["GJX@GJXAIOU",[[1,539,"\n "]],[537,537],[539,539]]],[1556156422343,["GJX@GJXAIOU",[[1,545,"JAVA"]],[545,545],[549,549]]],[1556156427588,["GJX@GJXAIOU",[[-1,540,"  "]],[542,542],[540,540]]],[1556156431622,["GJX@GJXAIOU",[[-1,686,"  "]],[688,688],[686,686]]],[1556156434129,["GJX@GJXAIOU",[[1,690,"\n"]],[689,689],[690,690]]],[1556156445464,["GJX@GJXAIOU",[[-1,1938,"  "],[-1,1991,"  "],[-1,2053,"  "],[-1,2113,"  "],[-1,2143," "],[-1,2146," "],[-1,2177,"  "]],[1939,2195],[1937,2183]]],[1556156454647,["GJX@GJXAIOU",[[-1,2104,"\n  "]],[2104,2106],[2104,2104]]]],null,"GJX@GJXAIOU"],["50b4b640-efca-4577-8c23-30bdbbdafcc1",1563152655577,"## 分支结构\n    代码中有三大结构：\n        顺序结构，分支结构和循环结构\n        \n    if (判断语句 true/false) {\n        //语句体\n    }\n    运行流程：\n        当程序运行到if语句，首先判断if 之后的括号里面的内容是否为true，如果为true执行语句体，如果为false，\n        直接执行大括号之后的语句\n\n    \n    if (判断语句 true/false) {\n        //true 语句体\n    } else {\n        //false 语句体\n    }\n    运行流程：\n        当程序运行到if-else语句，首先判断if之后的括号里面的内容是否为true，如果为true执行true 语句体，\n        如果为false 执行false语句体\n    \n\n    \n  闰年条件：\n  能被400整除。或者能被4整除但是不能被100整除。\n  int year = 2000;\n  \n  //闰年条件的代码展示\n ` year % 400 == 0 || (year % 4 == 0 && year % 100 != 0) `\n \n```JAVA\n  if (条件1) {\n      //语句体1\n  } else if (条件2) {\n      //语句体2\n  } else if (条件3) {\n      //语句体3\n  ……………………\n      \n  } else {\n      //语句体n\n  }\n```\n\n  运行流程：\n      当程序运行到if - else if结构，首先进行匹配if之后括号里面的条件，找到第一个匹配的选项，执行\n      当前if对应的语句体，跳出大括号。如果没有任何一个条件匹配，执行else里面的语句体n\n      \n      学生成绩：\n          90以上  优 关系运算符  score >= 90\n          80以上  良\n          70以上  中\n          60以上  及格\n          60以下  叫家长过来~~~\n          \n  Scanner的使用：\n      从键盘上获取用户输入的数据的一种方式：\n          是目前没有办法的办法，正常的做开发是通过前端页面发送数据到后台\n1. 导包，给当前程序提供技能点\n    在程序的开头 clase之前写上\n    import java.util.Scanner;\n2. 创建Scanner扫描器的变量\n    Scanner sc = new Scanner(System.in); \n3. 使用Scanner里面的nestInt();方法获取用户在键盘上输入的int类型数据\n    num = sc.nextInt();\n        sc.nextFloat();\n        sc.nextShort();\n        sc.nextLine();\n        \n**参数合法性判断：**\n一般程序的运行首先要符合正常的Java语法要求，但是代码是要提供给用户使用的，也要符合生活逻辑，所以在运行的过程中，要添加一些判断，让代码更加符合生活的情况\n\n例如：学生成绩 满分100分的情况下，分数的范围在 0 ~ 100之间，如果超过了这个范围\n这个数据就是一个在生活逻辑上非法数据。所以这里要做参数合法性判断。\n\n让代码更加健壮，思维更加严谨\n                \n    \n    switch - case:匹配的操作\n```java\n  switch (变量) {\n  \n      case 确定值1: //冒号\n          处理方式1;\n          break;\n          \n      case 确定值2: //冒号\n          处理方式2;\n          break;\n      ………………………………\n      \n      default: //冒号\n          最终的处理方式;\n          break;\n  }\n```\n    \n\n执行流程：\n      当程序运行到switch - case 结构，直接利用switch之后的变量去case 中做匹配，找到完全匹配的case选项，执行case之后的处理方式，如果没有任何的一个case匹配执行default里面的最终处理方式\n        \n【注意事项】\n  1. 在switch - case结构中，运行的代码只能是在case 到 break之间的代码！！！\n  2. break可以省略，但是之前的case会继续往下执行，直到遇到break跳出switch - case 结构\n  3. 在case之外的代码是不会被运行的，在Java中这个会被认为是一个无效代码，如果是Eclipse提示是一个unreachable code 无法触及的代码\n  4. 在switch-case中不能出现相同的case选项\n  5. default可以省略",[[1563152636857,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1563152639044,["GJX@GJXAIOU",[[1,0,"---\ntags : \n- java基础\n\nflag: blue\n---"]],[0,0],[36,36]]],[1563152641050,["GJX@GJXAIOU",[[1,37,"\n"]],[36,36],[37,37]]],[1563152641193,["GJX@GJXAIOU",[[1,38,"\n"]],[37,37],[38,38]]],[1563152652291,["GJX@GJXAIOU",[[1,38,"# JavaDay04 "]],[38,38],[50,50]]],[1563152661228,["GJX@GJXAIOU",[[1,50,"分支结构和循环结构"]],[50,50],[59,59]]],[1563152665868,["GJX@GJXAIOU",[[1,63,"一、"]],[63,63],[65,65]]],[1563152670930,["GJX@GJXAIOU",[[-1,72,"  "],[-1,84,"  "],[-1,107," "],[-1,114," "],[-1,116,"  "],[-1,143," "],[-1,150," "],[-1,159,"  "],[-1,163," "],[-1,166," "],[-1,173,"  "],[-1,240,"  "]],[74,260],[72,242]]],[1563152675841,["GJX@GJXAIOU",[[-1,251,"  "],[-1,276,"  "],[-1,297,"  "],[-1,308,"  "],[-1,330,"  "],[-1,334,"  "],[-1,344,"  "],[-1,411,"  "]],[253,438],[251,422]]],[1563152680146,["GJX@GJXAIOU",[[-1,428,"\n"]],[429,429],[428,428]]],[1563152682763,["GJX@GJXAIOU",[[1,326,"\n  "]],[323,323],[326,326]]],[1563152683427,["GJX@GJXAIOU",[[1,326,"·"]],[326,326],[327,327]]],[1563152685345,["GJX@GJXAIOU",[[-1,247," "]],[245,245],[244,244]]],[1563152686931,["GJX@GJXAIOU",[[1,244,"```"]],[244,244],[247,247]]],[1563152686958,["GJX@GJXAIOU",[[1,247,"language\n```\n"]],[247,247],[247,255]]],[1563152688002,["GJX@GJXAIOU",[[-1,247,"language"],[1,255,"j"]],[247,255],[248,248]]],[1563152688395,["GJX@GJXAIOU",[[1,248,"ava"]],[248,248],[251,251]]],[1563152690652,["GJX@GJXAIOU",[[-1,252,"```"]],[252,255],[252,252]]],[1563152692995,["GJX@GJXAIOU",[[-1,332,"  ·"],[1,335,"```"]],[332,335],[335,335]]],[1563152695842,["GJX@GJXAIOU",[[-1,255," "]],[254,254],[253,253]]],[1563152695962,["GJX@GJXAIOU",[[-1,252,"\n"]],[253,253],[252,252]]],[1563152696098,["GJX@GJXAIOU",[[-1,251,"\n"]],[252,252],[251,251]]],[1563152698329,["GJX@GJXAIOU",[[1,251,"\n"]],[251,251],[252,252]]],[1563152700362,["GJX@GJXAIOU",[[-1,251,"\n"]],[252,252],[251,251]]],[1563152704146,["GJX@GJXAIOU",[[1,333,"\n"]],[332,332],[333,333]]],[1563152710827,["GJX@GJXAIOU",[[-1,254,"  "],[-1,283,"  "],[-1,296,"  "],[-1,307,"  "],[-1,325,"  "]],[256,328],[254,318]]],[1563152717012,["GJX@GJXAIOU",[[1,254,"\n"]],[253,253],[254,254]]],[1563152718550,["GJX@GJXAIOU",[[-1,254,"\n"]],[254,254],[253,253]]],[1563152718867,["GJX@GJXAIOU",[[1,253,"xz"]],[253,253],[255,255]]],[1563152720041,["GJX@GJXAIOU",[[-1,253,"xz"]],[255,255],[253,253]]],[1563152720550,["GJX@GJXAIOU",[[1,254,"  "],[1,281,"  "],[1,292,"  "],[1,301,"  "],[1,317,"  "]],[254,318],[256,328]]],[1563152721470,["GJX@GJXAIOU",[[-1,333,"\n"]],[333,333],[332,332]]],[1563152722091,["GJX@GJXAIOU",[[1,251,"\n"]],[251,251],[252,252]]],[1563152726732,["GJX@GJXAIOU",[[-1,255,"  "],[-1,284,"  "],[-1,297,"  "],[-1,308,"  "],[-1,326,"  "]],[257,329],[255,319]]],[1563152729217,["GJX@GJXAIOU",[[-1,251,"\n"]],[252,252],[251,251]]],[1563152730610,["GJX@GJXAIOU",[[1,251,"\n"]],[251,251],[252,252]]],[1563152734201,["GJX@GJXAIOU",[[-1,243,"\n"]],[243,243],[242,242]]],[1563152768987,["GJX@GJXAIOU",[[-1,981,"  "],[1,983,"-"]],[981,983],[982,982]]],[1563152769563,["GJX@GJXAIOU",[[1,982," "]],[982,982],[983,983]]],[1563152776931,["GJX@GJXAIOU",[[-1,432,"  "],[1,434,"-"]],[432,434],[433,433]]],[1563152777094,["GJX@GJXAIOU",[[1,433," "]],[433,433],[434,434]]],[1563152802809,["GJX@GJXAIOU",[[-1,845,"  "],[-1,853,"  "],[-1,890,"  "],[-1,916,"  "],[-1,926,"  "],[-1,945,"  "]],[847,969],[845,957]]],[1563152803249,["GJX@GJXAIOU",[[-1,843,"  "],[-1,851,"  "],[-1,886,"  "],[-1,908,"  "],[-1,918,"  "],[-1,935,"  "]],[845,957],[843,945]]],[1563152934810,["GJX@GJXAIOU",[[-1,1561,"  "],[-1,1577,"  "],[-1,1584,"  "],[-1,1602," "],[-1,1611," "],[-1,1619,"  "],[-1,1644,"  "],[-1,1647,"  "],[-1,1677,"  "],[-1,1686,"  "],[-1,1707,"  "],[-1,1722," "],[-1,1727," "],[-1,1729,"  "],[-1,1757,"  "],[-1,1768,"  "]],[1563,1784],[1561,1756]]],[1563152939077,["GJX@GJXAIOU",[[-1,1575,"\n"]],[1575,1575],[1574,1574]]],[1563152944747,["GJX@GJXAIOU",[[-1,1759,"\n"]],[1760,1760],[1759,1759]]],[1563152946700,["GJX@GJXAIOU",[[1,1759,"\n  "]],[1759,1759],[1762,1762]]],[1563152948393,["GJX@GJXAIOU",[[-1,1760,"  "]],[1762,1762],[1760,1760]]],[1563152964012,["GJX@GJXAIOU",[[-1,1524,"    \n    "]],[1524,1533],[1524,1524]]]],null,"GJX@GJXAIOU"],["637fa7db-106c-4894-8ae2-463de213a1e4",1563284361262,"---\ntags : \n- java基础\n\nflag: blue\n---\n\n# JavaDay04 分支结构和循环结构\n## 一、分支结构\n  代码中有三大结构：\n      顺序结构，分支结构和循环结构\n      \n  if (判断语句 true/false) {\n      //语句体\n  }\n  运行流程：\n      当程序运行到if语句，首先判断if 之后的括号里面的内容是否为true，如果为true执行语句体，如果为false，\n      直接执行大括号之后的语句\n```java\n  \nif (判断语句 true/false) {\n    //true 语句体\n} else {\n    //false 语句体\n}\n```\n  运行流程：\n      当程序运行到if-else语句，首先判断if之后的括号里面的内容是否为true，如果为true执行true 语句体，\n      如果为false 执行false语句体\n    \n    \n- 闰年条件：\n  能被400整除。或者能被4整除但是不能被100整除。\n  int year = 2000;\n  \n  //闰年条件的代码展示\n ` year % 400 == 0 || (year % 4 == 0 && year % 100 != 0) `\n \n```JAVA\n  if (条件1) {\n      //语句体1\n  } else if (条件2) {\n      //语句体2\n  } else if (条件3) {\n      //语句体3\n  ……………………\n      \n  } else {\n      //语句体n\n  }\n```\n\n  运行流程：\n      当程序运行到if - else if结构，首先进行匹配if之后括号里面的条件，找到第一个匹配的选项，执行\n      当前if对应的语句体，跳出大括号。如果没有任何一个条件匹配，执行else里面的语句体n\n      \n  学生成绩：\n      90以上  优 关系运算符  score >= 90\n      80以上  良\n      70以上  中\n      60以上  及格\n      60以下  叫家长过来~~~\n          \n- Scanner的使用：\n      从键盘上获取用户输入的数据的一种方式：\n          是目前没有办法的办法，正常的做开发是通过前端页面发送数据到后台\n1. 导包，给当前程序提供技能点\n    在程序的开头 clase之前写上\n    import java.util.Scanner;\n2. 创建Scanner扫描器的变量\n    Scanner sc = new Scanner(System.in); \n3. 使用Scanner里面的nestInt();方法获取用户在键盘上输入的int类型数据\n    num = sc.nextInt();\n        sc.nextFloat();\n        sc.nextShort();\n        sc.nextLine();\n        \n**参数合法性判断：**\n一般程序的运行首先要符合正常的Java语法要求，但是代码是要提供给用户使用的，也要符合生活逻辑，所以在运行的过程中，要添加一些判断，让代码更加符合生活的情况\n\n例如：学生成绩 满分100分的情况下，分数的范围在 0 ~ 100之间，如果超过了这个范围\n这个数据就是一个在生活逻辑上非法数据。所以这里要做参数合法性判断。\n\n让代码更加健壮，思维更加严谨\n                \nswitch - case:匹配的操作\n```java\nswitch (变量) {\n    case 确定值1: //冒号\n        处理方式1;\n        break;\n        \n    case 确定值2: //冒号\n        处理方式2;\n        break;\n    ………………………………\n    \n    default: //冒号\n        最终的处理方式;\n        break;\n  }\n```\n    \n\n执行流程：\n      当程序运行到switch - case 结构，直接利用switch之后的变量去case 中做匹配，找到完全匹配的case选项，执行case之后的处理方式，如果没有任何的一个case匹配执行default里面的最终处理方式\n        \n【注意事项】\n  1. 在switch - case结构中，运行的代码只能是在case 到 break之间的代码！！！\n  2. break可以省略，但是之前的case会继续往下执行，直到遇到break跳出switch - case 结构\n  3. 在case之外的代码是不会被运行的，在Java中这个会被认为是一个无效代码，如果是Eclipse提示是一个unreachable code 无法触及的代码\n  4. 在switch-case中不能出现相同的case选项\n  5. default可以省略",[[1563284338985,["GJX@GJXAIOU",[[1,38,"@toc\n\n\n"]],[37,37],[44,44]]]],null,"GJX@GJXAIOU"]]}