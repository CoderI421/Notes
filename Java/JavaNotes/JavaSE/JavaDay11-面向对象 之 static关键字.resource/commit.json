{"compress":true,"commitItems":[["06879f40-dd2d-4a85-a1d3-3cf63908bb07",1556259307322,"## static关键字的引入\n    生活情况：\n        饮水机为例，通常是放在一个公共的环境中，大家共同使用，不会说每个人入学发一个饮水机。\n        如果每一个人都有一个饮水机，过多电线，过多的水管，占用了大量的空间\n        \n    代码中的问题：\n        发现在代码中，存在某一些成员变量的数值是一样的，大量重复，在每一个对象中都有存在，例如：\n        当前代码中的国家，都是中国。这样会占用过多的内存资源，甚至于硬盘资源。\n     \n    期望：\n       \t把国家中国属性放到一个共享的区域里，然后让每一个对象使用就好\n       \t\n    解决问题：\n       \t使用static关键字\n\n## static修饰成员变量\n    static关键字的使用：\n     \t【重点】1. 如果使用static修饰的成员变量，这些成员变量称之为【静态成员变量】，这个【静态成员变量】实际\n     \t存放的内存空间在【内存数据区】，和当前【类对象内存】没有任何关系。也就是说，这个【静态成员变量】使用内存\n     \t空间不再【堆区】对象内存中\n     \t\n     \t2. 用static修饰的成员变量，这个【静态成员变量】可以提供给多个类对象使用。\n     \t\n     \t3. 什么时候用static，真正意义上存在大量重复，并且存在一定共享基础的数据，这种情况下，可以使用static\n     \t修饰\n     \t\t例如：\n     \t\t\tcountry属性就适合用static修饰，但是name属性就不适合\n \n    小问题:\n        发现通过类对象来调用【静态成员变量】，报警告\n        The static field Person.country should be accessed in a static way\n        用static修饰的【静态成员变量】应该用【静态】的方式访问\n   \t\n    【重点】\n       用static修饰的成员变量，这个成员变量会【早于】类对象的创建而创建，而且【晚于】类对象的销毁而销毁\n       \t\n       所以，用static修饰的【静态成员变量】是和类对象\"无关的\"\n      \t\n       严格来说：类对象和【静态成员变量】无关，那么通过类对象来调用【静态成员变量】是\"非法的\"\n       Java语言期望的是：更加严谨的调用方式，因为和对象\"无关\"，所以不希望用调用来调用\n  \t\n  \t\t\n    【推荐调用/使用成员变量的方式】\n       类名.成员变量;\n       没用警告，也是让你记得static修饰的【静态成员变量】和类对象无关\n  \n    【修改问题】\n       用static修饰的成员变量，不管通过哪一种方式修改了内存，那么所有用到这个【静态成员变量】的数据，都会\n       发生变动\n      \t\n       因为【静态成员变量】是一个【隐含的共享资源】\n       \t 例如：\n      \t\t井里放块糖，有甜大家尝\n      \t\t\n## static修饰成员方法\n    static 修饰成员方法\n  \n    static修饰成员方法，这个方法称之为【静态成员方法】\n  \n     格式:\n     \t权限修饰符  static 返回值类型   方法名(形式参数列表) {\n     \t\t//方法体;\n     \t}\n     \t\n    【重点】\n      \t用static修饰的成员方法，称之为【静态成员方法】，这个【静态成员方法】是早于对象的创建而【加载】，\n      \t对象销毁之后依然存在。\n      \t\n      \t所以说：【静态成员方法】和对象\"无关\"\n      \t\n      \t如果采用类对象调用【静态成员方法】会报警告：\n      \t\tThe static method sleep() from type Dog should be accessed in a static way\n      \t\t在Dog类里面的【静态成员方法】sleep()应该用静态的方式来调用\n   \n     【注意事项】\n     \t1. 在用static修饰的【静态成员方法】中不能使用this关键字\n     \t\t结果推论:\n     \t\t\t因为【静态成员方法】可以通过类名来调用，用类名调用的情况下，是不存在对象的，而this关键字\n     \t\t\t是用来表示调用该方法的对象关键字，这里不存在对象，所以不能用。\n     \t\t原理推论：\n     \t\t\t因为【静态成员方法】是早于对象加载，晚于对象销毁，所以和对象\"无关\"，有没有对象，该方法都\n     \t\t\t存在，所以this关键字在这里无法使用\n     \t\t【没有对象】\n     \t\n     \t2. 在static修饰的【静态成员方法】中，不能使用【非静态成员变量】，因为【非静态成员变量】是保存\n     \t在类对象的【堆区】内存中，和类对象共存，而在【静态成员方法】的调用过程中是没有对象的，所以不能使用\n     \t【非静态成员变量】\n     \t\t【没有对象】\n     \t\t\n     \t3. 【静态成员方法】中可以直接使用【静态成员变量】，难兄难弟\n     \t\n     \t4. 想在【静态成员方法】里面使用【非静态成员变量】怎么办???\n     \t\t自娱自乐啊~~~\n     \t\t可以在当前【静态成员方法】中用new关键字，调用构造方法，创建一个对象，使用该对象。\n     \t\t案例：\n     \t\t\t单例设计模式\n    【总结】\n    \t静态对静态，非静态对非静态\n    \t\n    【静态成员方法用途】\n    \t1. 调用方便，通过类名直接调用该方法，不需要借助于对象\n    \t2. 用来完成一些【工具类】\n    \t\n    \t\tArrays 工具类\n    \t\t\n## 静态成员变量的使用\n    详见 Demo3.java \n        一般用于计数器\n        \n## 静态成员方法的使用\n    详见 Demo4.java 和 Demo5.java\n        通常会做成工具类\n        \n## 自定义工具类\n    完成MyToString(int[] arr) 和 MyReverse(int[] arr)\n\n## 和main函数聊聊天\n    class Demo6 {\n        public static void main(String[] args) {\n\t\t\n    \t}\n\t}\n\t\n\tpublic：权限访问修饰符，公开，权限最高的，自由度也是最高的，方便JVM在任何情况下都可以直接找到main函数\n\t开始当前程序的运行，main函数程序的唯一入口\n\t\n\tstatic: 静态修饰关键字，调用main函数不需要对象的参与，直接用类名调用即可，方便了JVM调用main函数的过程\n\t    实际情况:   \n\t        Demo6.main(null); //JVM做的事情\n\t        \n\tvoid：没有返回值，main函数比较特殊，返回值对于main函数没有意义，因为main函数调用者是JVM，JVM并不需要\n\t这个返回值\n\t\n\tmain：函数名，众所周知的函数名，大多数语言中都有这个函数名，表示当前程序的唯一入口 支持C++ C OC \n\t\n\t(String[] args): main函数运行需要的参数列表，里面的参数类型是一个String[] 是一个字符串数组，\n\targs 是 arguments的缩写 一般不用~~~\n    \t\t\n## 数组补充知识\n    ArraryIndexOutOfBoundsException 数组下标越界【异常】，通常是操作数组下标超出了数组的有效下标范围\n    NullPointerException 空指针异常，操作null内存空间异常",[[1556259267538,["GJX@GJXAIOU",[[1,970,"，这里的“无关的”zhu"]],[970,970],[982,982]]],[1556259268242,["GJX@GJXAIOU",[[-1,979,"zhu"]],[982,982],[979,979]]],[1556259306208,["GJX@GJXAIOU",[[1,979,"指的是：首先内存上是无关的，然后和对象的创没创建没有关系"]],[979,979],[1007,1007]]],[1556259311775,["GJX@GJXAIOU",[[1,1007,"。"]],[1007,1007],[1008,1008]]],[1556259409122,["GJX@GJXAIOU",[[-1,1280,"\n       "]],[1280,1288],[1280,1280]]],[1556259433192,["GJX@GJXAIOU",[[-1,18,"  "],[-1,26,"  "],[-1,83,"  "],[-1,119," "],[-1,126," "],[-1,128,"  "],[-1,140,"  "],[-1,193," "],[-1,200," "],[-1,240,"  "],[-1,243,"  "],[-1,251," "],[-1,257," "],[-1,295,"  "],[-1,299,"  "],[-1,309," "],[-1,315," "],[-1,348,"  "],[-1,364,"  "],[-1,426," "],[-1,430," "],[-1,488,"  "],[-1,508,"  "],[-1,512," "],[-1,516," "],[-1,563,"  "],[-1,567,"  "],[-1,631," "],[-1,635," "],[-1,640,"  "],[-1,651,"  "],[-1,694," "],[-1,698,"  "],[-1,705,"  "],[-1,736,"  "],[-1,817,"  "],[-1,851,"  "],[-1,855,"  "],[-1,869,"  "],[-1,928,"  "],[-1,932,"  "],[-1,1013,"  "],[-1,1017,"  "],[-1,1069,"  "],[-1,1119,"  "],[-1,1123,"  "],[-1,1128,"  "],[-1,1154,"  "],[-1,1165,"  "],[-1,1207,"  "],[-1,1212,"  "],[-1,1221,"  "],[-1,1289,"  "],[-1,1293,"  "],[-1,1328,"  "],[-1,1336,"  "]],[16,1355],[16,1259]]],[1556259434556,["GJX@GJXAIOU",[[-1,16,"  "],[-1,24,"  "],[-1,73,"  "],[-1,117,"  "],[-1,120,"  "],[-1,130,"  "],[-1,185,"  "],[-1,224,"  "],[-1,227,"  "],[-1,236,"  "],[-1,273,"  "],[-1,277,"  "],[-1,285,"  "],[-1,320,"  "],[-1,337,"  "],[-1,396,"  "],[-1,454,"  "],[-1,472,"  "],[-1,476,"  "],[-1,523,"  "],[-1,528,"  "],[-1,590,"  "],[-1,596,"  "],[-1,606,"  "],[-1,647,"  "],[-1,654,"  "],[-1,687,"  "],[-1,760,"  "],[-1,793," \t"],[-1,796,"  "],[-1,803,"  "],[-1,860,"  "],[-1,870,"  "],[-1,944,"  "],[-1,948," "],[-1,952," "],[-1,998,"  "],[-1,1046,"\t"],[-1,1048,"\t"],[-1,1051,"  "],[-1,1073,"  "],[-1,1084,"  "],[-1,1125,"  "],[-1,1134,"  "],[-1,1198,"  "],[-1,1202,"  "],[-1,1233,"  "],[-1,1241,"  "]],[16,1259],[16,1169]]],[1556259437573,["GJX@GJXAIOU",[[-1,24,"  "],[-1,71,"  "],[-1,107," "],[-1,110," "],[-1,120,"  "],[-1,169,"  "],[-1,209," "],[-1,215,"  "],[-1,250,"  "],[-1,262,"  "],[-1,308," \t"],[-1,366," \t"],[-1,421," \t"],[-1,437," \t"],[-1,440," \t"],[-1,484," \t"],[-1,487," \t"],[-1,547," \t"],[-1,552," \t\t"],[-1,559," \t\t\t"],[-1,606,"  "],[-1,631," "],[-1,634," "],[-1,704,"  "],[-1,743,"  "],[-1,799,"  "],[-1,803,"  "],[-1,876,"  "],[-1,880,"  "],[-1,929,"  "],[-1,975,"\t"],[-1,995,"  "],[-1,1007,"  "],[-1,1052,"  "],[-1,1112,"  "],[-1,1116,"  "],[-1,1142,"  "],[-1,1151,"  "],[-1,1167,"  "]],[16,1169],[16,1118]]],[1556259439521,["GJX@GJXAIOU",[[1,16,"  "],[1,22,"  "],[1,69,"  "],[1,103," "],[1,105," "],[1,106,"  "],[1,114,"  "],[1,161,"  "],[1,199,"  "],[1,200,"  "],[1,204,"  "],[1,238,"  "],[1,240,"  "],[1,246,"  "],[1,260,"  "],[1,261,"  "],[1,277,"  "],[1,291,"  "],[1,347,"  "],[1,400,"  "],[1,414,"  "],[1,415,"  "],[1,457,"  "],[1,458,"  "],[1,516,"  "],[1,519,"  "],[1,523,"  "],[1,558,"  "],[1,559,"  "],[1,564,"  "],[1,589,"  "],[1,658," "],[1,660," "],[1,691,"  "],[1,692,"  "],[1,697,"  "],[1,751,"  "],[1,753,"  "],[1,824,"  "],[1,827,"  "],[1,872,"  "],[1,916,"  "],[1,917,"  "],[1,918,"  "],[1,936,"  "],[1,945,"  "],[1,981,"  "],[1,982,"  "],[1,989,"  "],[1,1047,"  "],[1,1049,"  "],[1,1074,"  "],[1,1080,"  "],[1,1098,"  "],[1,1101,"  "],[1,1117,"  "]],[16,1118],[16,1226]]],[1556259445338,["GJX@GJXAIOU",[[1,18,"  "]],[18,18],[20,20]]],[1556259447989,["GJX@GJXAIOU",[[-1,16,"    "]],[20,20],[16,16]]],[1556259636773,["GJX@GJXAIOU",[[-1,287,"  "]],[289,289],[287,287]]],[1556259638667,["GJX@GJXAIOU",[[1,287,"\n"]],[287,287],[288,288]]],[1556259638795,["GJX@GJXAIOU",[[1,288,"\n"]],[288,288],[289,289]]],[1556259648747,["GJX@GJXAIOU",[[-1,1203,"  "]],[1205,1205],[1203,1203]]],[1556259649802,["GJX@GJXAIOU",[[1,1203,"\n"]],[1203,1203],[1204,1204]]],[1556259649957,["GJX@GJXAIOU",[[1,1204,"\n"]],[1204,1204],[1205,1205]]],[1556259650090,["GJX@GJXAIOU",[[1,1205,"\n"]],[1205,1205],[1206,1206]]],[1556259650194,["GJX@GJXAIOU",[[1,1206,"\n"]],[1206,1206],[1207,1207]]],[1556259650349,["GJX@GJXAIOU",[[1,1207,"\n"]],[1207,1207],[1208,1208]]],[1556259650474,["GJX@GJXAIOU",[[1,1208,"\n"]],[1208,1208],[1209,1209]]],[1556259654926,["GJX@GJXAIOU",[[1,1196,"\t\t\n  "]],[1193,1193],[1198,1198]]],[1556259655067,["GJX@GJXAIOU",[[-1,1194,"  \t\t"],[1,1198,"\n"]],[1198,1198],[1195,1195]]],[1556259656891,["GJX@GJXAIOU",[[1,1195,"shili"]],[1195,1195],[1200,1200]]],[1556259657725,["GJX@GJXAIOU",[[-1,1195,"shili"]],[1200,1200],[1195,1195]]],[1556259660829,["GJX@GJXAIOU",[[1,1195,"示例代码："]],[1195,1195],[1200,1200]]],[1556259661101,["GJX@GJXAIOU",[[1,1201,"\n"]],[1200,1200],[1201,1201]]],[1556259662805,["GJX@GJXAIOU",[[1,1201,"```"]],[1201,1201],[1204,1204]]],[1556259662832,["GJX@GJXAIOU",[[1,1204,"language\n```\n"]],[1204,1204],[1204,1212]]],[1556259663188,["GJX@GJXAIOU",[[-1,1204,"language"],[1,1212,"j"]],[1204,1212],[1205,1205]]],[1556259664188,["GJX@GJXAIOU",[[1,1205,"ava"]],[1205,1205],[1208,1208]]],[1556259664287,["GJX@GJXAIOU",[[1,1209,"\n"]],[1208,1208],[1209,1209]]],[1556259678294,["GJX@GJXAIOU",[[1,1209,"class Person {\n\t//成员变量\n\tprivate String name;    //姓名\n\t\n\t//这里就是用static修饰的成员变量\n\tstatic String country = \"中国\"; //国家\n\t\n\t//构造方法\n\tpublic Person() {}\n\t\n\tpublic Person(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\t//setter和getter方法\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n}\n\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\tPerson p1 = new Person(\"叶问\"); //4个\n\t\t\n\t\tPerson p2 = new Person(\"陈华顺\"); //4个 \n\t\t\n\t\tPerson p3 = new Person(\"陈真\"); // 4个\n\t\t     \n\t\tPerson p4 = new Person(\"李云龙\"); // 4个\n\t\t\n\t\tSystem.out.println(\"p1.country:\" + p1.country);\n\t\tSystem.out.println(\"p2.country:\" + p2.country);\n\t\tPerson.country = \"中国\"; //推荐方式\n\t\tp3.country = \"People Republic of China\";\n\t\tSystem.out.println(\"p3.country:\" + p3.country); // PRC \n\t\tSystem.out.println(\"p4.country:\" + p4.country); // 中国\n\t}\n}"]],[1209,1209],[2064,2064]]],[1556259687258,["GJX@GJXAIOU",[[-1,2074,"  "]],[2072,2072],[2070,2070]]],[1556259687523,["GJX@GJXAIOU",[[-1,2069,"\n"]],[2070,2070],[2069,2069]]],[1556260193428,["GJX@GJXAIOU",[[-1,2304,"\n      "]],[2304,2311],[2304,2304]]],[1556260197227,["GJX@GJXAIOU",[[1,2316,"yignwei"]],[2316,2316],[2323,2323]]],[1556260198667,["GJX@GJXAIOU",[[-1,2316,"yignwei"]],[2323,2323],[2316,2316]]],[1556260201097,["GJX@GJXAIOU",[[1,2316,"因为"]],[2316,2316],[2318,2318]]],[1556260225025,["GJX@GJXAIOU",[[1,2318,"方法和哈舒"]],[2318,2318],[2323,2323]]],[1556260226295,["GJX@GJXAIOU",[[-1,2321,"哈舒"]],[2323,2323],[2321,2321]]],[1556260243446,["GJX@GJXAIOU",[[1,2321,"函数是放在代码区，是加载进去的"]],[2321,2321],[2336,2336]]],[1556260569536,["GJX@GJXAIOU",[[-1,2239,"  "],[-1,2246,"  "],[-1,2341,"  "],[-1,2345,"  "],[-1,2372," "],[-1,2377," "],[-1,2380,"  "],[-1,2410,"  "],[-1,2497,"  "],[-1,2537,"  "],[-1,2540,"  "],[-1,2552,"  "],[-1,2596,"  "],[-1,2606," "],[-1,2610," "],[-1,2664,"  "],[-1,2701," "],[-1,2705," "],[-1,2714,"  "],[-1,2768," "],[-1,2772," "],[-1,2799,"  "],[-1,2813,"  "],[-1,2817,"  "],[-1,2875,"  "],[-1,2934,"  "],[-1,2947,"  "],[-1,2964,"  "],[-1,2969,"  "],[-1,3010,"  "],[-1,3014,"  "],[-1,3056,"  "],[-1,3069,"  "],[-1,3122,"  "],[-1,3130,"  "],[-1,3147,"  "],[-1,3154,"  "]],[2241,3172],[2239,3106]]],[1556260570278,["GJX@GJXAIOU",[[-1,2237,"  "],[-1,2244,"  "],[-1,2335,"  "],[-1,2339,"  "],[-1,2364," "],[-1,2367," "],[-1,2370,"  "],[-1,2398,"  "],[-1,2481,"  "],[-1,2520," "],[-1,2523,"  "],[-1,2532,"  "],[-1,2572,"  "],[-1,2582,"  "],[-1,2636,"  "],[-1,2673,"  "],[-1,2685,"  "],[-1,2736,"  "],[-1,2763,"  "],[-1,2775,"  "],[-1,2779,"  "],[-1,2835,"  "],[-1,2890,"  "],[-1,2903,"  "],[-1,2916,"  "],[-1,2921,"  "],[-1,2958,"  "],[-1,2962,"  "],[-1,3000,"  "],[-1,3013,"  "],[-1,3062,"  "],[-1,3070,"  "],[-1,3083,"  "],[-1,3090,"  "]],[2239,3106],[2237,3042]]],[1556260845318,["GJX@GJXAIOU",[[-1,2847,"\n \t"]],[2847,2850],[2847,2847]]],[1556260975405,["GJX@GJXAIOU",[[-1,2795,"\n \t"]],[2795,2798],[2795,2795]]],[1556261211886,["GJX@GJXAIOU",[[-1,3111,"    "]],[3115,3115],[3111,3111]]],[1556261212287,["GJX@GJXAIOU",[[-1,3110,"\n"]],[3111,3111],[3110,3110]]],[1556261661982,["GJX@GJXAIOU",[[-1,112,"  "]],[114,114],[112,112]]],[1556261662505,["GJX@GJXAIOU",[[-1,111,"\n"]],[112,112],[111,111]]],[1556261664769,["GJX@GJXAIOU",[[-1,108,"   "]],[111,111],[108,108]]],[1556261666209,["GJX@GJXAIOU",[[1,108,"\n "]],[108,108],[110,110]]],[1556261673616,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1556261673742,["GJX@GJXAIOU",[[1,0,"\n"]],[1,1],[2,2]]],[1556261676179,["GJX@GJXAIOU",[[1,0,"#￥#"]],[0,0],[3,3]]],[1556261677750,["GJX@GJXAIOU",[[-1,0,"#￥#"]],[3,3],[0,0]]],[1556261688009,["GJX@GJXAIOU",[[1,0,"# staticguan"]],[0,0],[12,12]]],[1556261688941,["GJX@GJXAIOU",[[-1,7,"cguan"]],[12,12],[7,7]]],[1556261693153,["GJX@GJXAIOU",[[1,7,"c关键字"]],[7,7],[11,11]]],[1556262016184,["GJX@GJXAIOU",[[-1,37,"  "],[-1,84,"  "],[-1,120," "],[-1,122," "],[-1,133,"  "],[-1,182,"  "],[-1,220,"  "],[-1,223,"  "],[-1,229,"  "],[-1,265,"  "],[-1,269,"  "],[-1,277,"  "]],[29,292],[29,272]]],[1556262020561,["GJX@GJXAIOU",[[1,29,"- "]],[29,29],[31,31]]],[1556262022761,["GJX@GJXAIOU",[[1,119,"- "]],[119,119],[121,121]]],[1556262025608,["GJX@GJXAIOU",[[1,215,"- "]],[215,215],[217,217]]],[1556262028154,["GJX@GJXAIOU",[[1,257,"- "]],[257,257],[259,259]]],[1556262034553,["GJX@GJXAIOU",[[1,16,"一。"]],[16,16],[18,18]]],[1556262035274,["GJX@GJXAIOU",[[-1,17,"。"]],[18,18],[17,17]]],[1556262035963,["GJX@GJXAIOU",[[1,17,"."]],[17,17],[18,18]]],[1556262036559,["GJX@GJXAIOU",[[-1,17,"."]],[18,18],[17,17]]],[1556262038490,["GJX@GJXAIOU",[[1,17,"/"]],[17,17],[18,18]]],[1556262039295,["GJX@GJXAIOU",[[-1,17,"/"]],[18,18],[17,17]]],[1556262039964,["GJX@GJXAIOU",[[1,17,"、"]],[17,17],[18,18]]],[1556262046905,["GJX@GJXAIOU",[[1,289,"二、"]],[289,289],[291,291]]],[1556262085426,["GJX@GJXAIOU",[[-1,377,"\n  "]],[377,380],[377,377]]],[1556262088527,["GJX@GJXAIOU",[[-1,429,"\n  "]],[429,432],[429,429]]],[1556262095463,["GJX@GJXAIOU",[[-1,320,"  "]],[322,322],[320,320]]],[1556262095898,["GJX@GJXAIOU",[[-1,319,"\n"]],[320,320],[319,319]]],[1556262097248,["GJX@GJXAIOU",[[1,319,"\n  "]],[319,319],[322,322]]],[1556262099474,["GJX@GJXAIOU",[[-1,321," "]],[322,322],[321,321]]],[1556262101770,["GJX@GJXAIOU",[[1,325,"\n "]],[325,325],[327,327]]],[1556262111575,["GJX@GJXAIOU",[[-1,553,"\n  "]],[553,556],[553,553]]],[1556262115558,["GJX@GJXAIOU",[[-1,304,"  "],[-1,320," "],[-1,326," "],[-1,444,"  "],[-1,447,"  "],[-1,491,"  "],[-1,494,"  "]],[304,555],[304,545]]],[1556262118360,["GJX@GJXAIOU",[[1,304,"\n"]],[304,304],[305,305]]],[1556262124848,["GJX@GJXAIOU",[[1,305,"### （）"]],[305,305],[311,311]]],[1556262127107,["GJX@GJXAIOU",[[1,310,"一"]],[310,310],[311,311]]],[1556262143399,["GJX@GJXAIOU",[[-1,802,"\n   \t\n   "]],[802,811],[802,802]]],[1556262156540,["GJX@GJXAIOU",[[1,2063,"三、"]],[2063,2063],[2065,2065]]],[1556262161271,["GJX@GJXAIOU",[[-1,2082,"  "],[-1,2098,"  "],[-1,2101,"  "],[-1,2134,"  "],[-1,2140,"  "],[-1,2146,"  "],[-1,2191,"  "],[-1,2202,"  "]],[2082,2209],[2080,2193]]],[1556262162071,["GJX@GJXAIOU",[[-1,2080,"  "],[-1,2097,"  "],[-1,2129,"  "],[-1,2137,"  "],[-1,2177,"  "],[-1,2188,"  "]],[2080,2193],[2078,2181]]],[1556262162962,["GJX@GJXAIOU",[[-1,2078,"  "],[-1,2125," "],[-1,2130," \t"],[-1,2168," \t\t"],[-1,2178," \t"]],[2078,2181],[2078,2179]]],[1556262166586,["GJX@GJXAIOU",[[-1,2078,"static 修饰成员方法"]],[2078,2091],[2078,2078]]],[1556262168135,["GJX@GJXAIOU",[[-1,2079,"\n"]],[2079,2079],[2078,2078]]],[1556262171696,["GJX@GJXAIOU",[[1,2113,"\n"]],[2112,2112],[2113,2113]]],[1556262172553,["GJX@GJXAIOU",[[1,2113,"·"]],[2113,2113],[2114,2114]]],[1556262173807,["GJX@GJXAIOU",[[-1,2113,"·"]],[2114,2114],[2113,2113]]],[1556262174035,["GJX@GJXAIOU",[[1,2113,"·"]],[2113,2113],[2114,2114]]],[1556262175727,["GJX@GJXAIOU",[[-1,2113,"·"]],[2114,2114],[2113,2113]]],[1556262177838,["GJX@GJXAIOU",[[1,2113,"ja"]],[2113,2113],[2115,2115]]],[1556262178559,["GJX@GJXAIOU",[[-1,2113,"ja"]],[2115,2115],[2113,2113]]],[1556262181178,["GJX@GJXAIOU",[[1,2113,"···"]],[2113,2113],[2116,2116]]],[1556262184624,["GJX@GJXAIOU",[[-1,2113,"···"]],[2116,2116],[2113,2113]]],[1556262187009,["GJX@GJXAIOU",[[1,2113,"`ja"]],[2113,2113],[2116,2116]]],[1556262187744,["GJX@GJXAIOU",[[-1,2114,"ja"]],[2116,2116],[2114,2114]]],[1556262188588,["GJX@GJXAIOU",[[1,2114,"``"]],[2114,2114],[2116,2116]]],[1556262188616,["GJX@GJXAIOU",[[1,2116,"language\n```\n"]],[2116,2116],[2116,2124]]],[1556262189481,["GJX@GJXAIOU",[[-1,2116,"language"],[1,2124,"j"]],[2116,2124],[2117,2117]]],[1556262190428,["GJX@GJXAIOU",[[1,2117,"ava"]],[2117,2117],[2120,2120]]],[1556262190563,["GJX@GJXAIOU",[[1,2121,"\n"]],[2120,2120],[2121,2121]]],[1556262194411,["GJX@GJXAIOU",[[-1,2127,"权限修饰符  static 返回值类型   方法名(形式参数列表) {\n//方法体;\n}"]],[2127,2171],[2127,2127]]],[1556262196023,["GJX@GJXAIOU",[[1,2121,"权限修饰符  static 返回值类型   方法名(形式参数列表) {\n//方法体;\n}"]],[2121,2121],[2165,2165]]],[1556262198671,["GJX@GJXAIOU",[[-1,2172,"     "]],[2177,2177],[2172,2172]]],[1556262198817,["GJX@GJXAIOU",[[-1,2171,"\n"]],[2172,2172],[2171,2171]]],[1556262209522,["GJX@GJXAIOU",[[-1,3065,"    \t\t"],[1,3071,"\n"]],[3069,3069],[3066,3066]]],[1556262209649,["GJX@GJXAIOU",[[1,3067,"\n"]],[3066,3066],[3067,3067]]],[1556262209755,["GJX@GJXAIOU",[[1,3068,"\n"]],[3067,3067],[3068,3068]]],[1556262209867,["GJX@GJXAIOU",[[1,3069,"\n"]],[3068,3068],[3069,3069]]],[1556262217345,["GJX@GJXAIOU",[[-1,2441," "],[-1,2449," \t"],[-1,2486," \t\t"],[-1,2495," \t\t\t"],[-1,2546," \t\t\t"],[-1,2582," \t\t"],[-1,2591," \t\t\t"],[-1,2641," \t\t\t"],[-1,2665," \t\t"],[-1,2675," \t"],[-1,2678," \t"],[-1,2790," \t\t"],[-1,2800," \t\t"],[-1,2804," \t"],[-1,2838," \t"],[-1,2841," \t"],[-1,2876," \t\t"],[-1,2888," \t\t"],[-1,2934," \t\t"],[-1,2941," \t\t\t"],[-1,2957,"\t"],[-1,2972,"  "],[-1,2980,"  "],[-1,2993,"  "],[-1,3029,"  "],[-1,3048,"  "]],[2441,3064],[2441,3053]]],[1556262223362,["GJX@GJXAIOU",[[-1,2918,"  "]],[2920,2920],[2918,2918]]],[1556262223527,["GJX@GJXAIOU",[[-1,2917,"\n"]],[2918,2918],[2917,2917]]],[1556262228367,["GJX@GJXAIOU",[[-1,2914,"  \t"]],[2917,2917],[2914,2914]]],[1556262230506,["GJX@GJXAIOU",[[1,2914,"\n"]],[2913,2913],[2914,2914]]],[1556262232528,["GJX@GJXAIOU",[[1,2895,"\n"]],[2894,2894],[2895,2895]]],[1556262241601,["GJX@GJXAIOU",[[1,2998,"\n"]],[2993,2993],[2994,2994]]],[1556262242858,["GJX@GJXAIOU",[[1,2994,"shil"]],[2994,2994],[2998,2998]]],[1556262243639,["GJX@GJXAIOU",[[-1,2994,"shil"]],[2998,2998],[2994,2994]]],[1556262247042,["GJX@GJXAIOU",[[1,2994,"示例代码："]],[2994,2994],[2999,2999]]],[1556262247303,["GJX@GJXAIOU",[[1,3004,"\n"]],[2999,2999],[3000,3000]]],[1556262249116,["GJX@GJXAIOU",[[1,3000,"```"]],[3000,3000],[3003,3003]]],[1556262249144,["GJX@GJXAIOU",[[1,3003,"language\n```\n"]],[3003,3003],[3003,3011]]],[1556262249460,["GJX@GJXAIOU",[[-1,3003,"language"],[1,3011,"j"]],[3003,3011],[3004,3004]]],[1556262250449,["GJX@GJXAIOU",[[1,3004,"ava"]],[3004,3004],[3007,3007]]],[1556262250585,["GJX@GJXAIOU",[[1,3008,"\n"]],[3007,3007],[3008,3008]]],[1556262265631,["GJX@GJXAIOU",[[1,3008,"class Dog {\n\t//成员变量\n\tprivate String name;\n\t\n\t//【静态成员变量】\n\tstatic String country = \"JP\"; //\n\t\n\t//构造方法\n\tpublic Dog() {}\n\t\n\tpublic Dog(String name) {\n\t\tthis.name = name; \n\t}\n\t\n\t//setter 和 getter方法\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\t//成员方法\n\tpublic void run() {\n\t\tthis.name = \"ll\"; //用this关键字来调用非静态成员变量\n\t\t\t\t\t\t  //this表示调用该方法的对象\n\t\tname = \"lxl\"; //非静态成员变量\n\t\tcountry = \"Janp\"; //静态成员变量\n\t\tSystem.out.println(\"跑来跑去~~~\");\n\t}\n\t\n\t//静态成员方法\n\tpublic static void sleep() {\n\t\t//this.name = \"ll\"; Cannot use this in static context  WHY\n\t\tcountry = \"RB\"; //静态成员变量\n\t\t//name = \"gz\"; // WHY\n\t\tSystem.out.println(\"睡大觉~~~~\");\n\t}\n\t\n\t// 在静态成员方法中使用非静态成员变量\n\tpublic static void test() {\n\t\tDog dog = new Dog(\"狗子\");\n\t\t\n\t\tSystem.out.println(dog.name);\n\t}\n}\n\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n\t\tDog dog = new Dog(\"Bobo\");\n\t\t\n\t\tdog.sleep();\n\t\tDog.sleep();\n\t\t\n\t\tDog.test();\n\t}\n}"]],[3008,3008],[3952,3952]]],[1556266249386,["GJX@GJXAIOU",[[1,4019,"        \n"]],[4009,4009],[4018,4018]]],[1556266255447,["GJX@GJXAIOU",[[-1,4011,"      "]],[4017,4017],[4011,4011]]],[1556266256730,["GJX@GJXAIOU",[[1,4011,"```"]],[4011,4011],[4014,4014]]],[1556266257856,["GJX@GJXAIOU",[[1,4016,"\n "]],[4014,4014],[4016,4016]]],[1556266260257,["GJX@GJXAIOU",[[1,4016,"```"]],[4016,4016],[4019,4019]]],[1556266265007,["GJX@GJXAIOU",[[-1,4010," "],[-1,4015," "]],[4010,4019],[4010,4019]]],[1556266267937,["GJX@GJXAIOU",[[1,4013,"java"]],[4013,4013],[4017,4017]]],[1556266268296,["GJX@GJXAIOU",[[1,4018,"\n"]],[4017,4017],[4018,4018]]],[1556266283297,["GJX@GJXAIOU",[[1,4018,"package com.qfedu.a_static;\n\n/*\n\t静态成员变量的使用案例：\n  \t\t统计一个类创建了多少个对象\n  \t\t人口统计，数据统计，ID的自动生成\n  \t\t\n  \tID用创建对象之后，自动赋值，并且每一个对象的ID号是唯一的，递增的\n */\n\nclass Student {\n\tprivate int id; //这个用来统计学生 的ID号 这个ID考虑自动生成\n\tprivate String name;\n\tprivate char sex;\n\t\n\t//在数据区的一个【静态成员变量】用于保存count的数据，而且私有化，不给类外提供任何的\n\t//修改或者获取该数据的方式\n\t//如果程序停止，这里就会重新计数，没 有做数据【持久化】操作\n\tprivate static int count = 1;\n\t\n\t//构造代码块，任何的一个对象都会执行的代码\n\t{\n\t\tthis.id = count++;\n\t}\n\t\n\tpublic Student() {}\n\t\n\t//因为ID是通过当前的程序自动生成的，不需要通过构造方法传参赋值\n\tpublic Student(String name, char sex) {\n\t\tthis.name = name;\n\t\tthis.sex = sex;\n\t}\n\t\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\tpublic void setSex(char sex) {\n\t\tthis.sex = sex;\n\t}\n\t\n\tpublic char getSex() {\n\t\treturn sex;\n\t}\n\t//ID不希望外部能有修改的方式或者权限，所以封装之后不提供setter方法，只提供一个查看功能getter方法\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\t\n\t\n}\n\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\tStudent stu1 = new Student();\n\t\tSystem.out.println(stu1.getId());\n\t\t\n\t\tStudent stu2 = new Student();\n\t\tSystem.out.println(stu2.getId());\n\t\t\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]],[4018,4018],[5114,5114]]],[1556269653377,[null,[[-1,4017," "],[1,4018,"\n"],[-1,5119," "]],[4017,4017],[5119,5119]]],[1556269653377,[null,[[1,4017," "],[-1,4017,"\n"],[1,5119," "]],[5119,5119],[4017,4017]]],[1556269625586,["GJX@GJXAIOU",[[1,5198,"        \n"]],[5188,5188],[5197,5197]]],[1556269627336,["GJX@GJXAIOU",[[1,5197,"··"]],[5197,5197],[5199,5199]]],[1556269632133,["GJX@GJXAIOU",[[-1,5189,"        ··"]],[5199,5199],[5189,5189]]],[1556269634431,["GJX@GJXAIOU",[[1,5189,"··"]],[5189,5189],[5191,5191]]],[1556269635341,["GJX@GJXAIOU",[[-1,5189,"··"]],[5191,5191],[5189,5189]]],[1556269636672,["GJX@GJXAIOU",[[1,5189,"```"]],[5189,5189],[5192,5192]]],[1556269636702,["GJX@GJXAIOU",[[1,5192,"language\n```\n"]],[5192,5192],[5192,5200]]],[1556269638047,["GJX@GJXAIOU",[[-1,5192,"language"],[1,5200,"j"]],[5192,5200],[5193,5193]]],[1556269639015,["GJX@GJXAIOU",[[1,5193,"ava"]],[5193,5193],[5196,5196]]],[1556269639271,["GJX@GJXAIOU",[[1,5197,"\n"]],[5196,5196],[5197,5197]]],[1556269651289,["GJX@GJXAIOU",[[1,5197,"package com.qfedu.a_static;\n\nimport java.util.Arrays;\n\n/*\n  静态成员方法的使用\n  \t\n  \t做成工具类，提供给开发者使用，更加便利，调用方便，摆脱类对象的约束，而且所有的的数据是\n  \t调用者传入和工具类里面的成员变量无关，甚至于某些工具类是没有任何成员变量的\n  \t\n  \tArrays 工具类，提供了大量的数组操作的方法，而且在Arrays工具类里面所有的方法\n  \t都是用public static修饰的\n  \t\n  \tsort  toString  binarySearch\n */\n\npublic class Demo4 {\n\tpublic static void main(String[] args) {\n\t\tint[] arr = {1, 9, 3, 4, 2, 8, 10, 5, 7, 6};\n\t\t\n\t\t//使用以下Arrays工具类里面的sort方法，排序算法，默认是从小到大，升序排列\n\t\tArrays.sort(arr);\n\t\t\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tSystem.out.println(arr[i]);\n\t\t}\n\t\t\n\t\t//Arrays工具类里面的toString方法，方法的返回值是一个String类型\n\t\t//例如:{1, 2, 3} => [1, 2, 3]\n\t\tString arrString = Arrays.toString(arr);\n\t\tSystem.out.println(arrString);\n\t\t\n\t\t//Arrays 工具里面的binarySearch 是一个查找数据的方法，要求查找的数组数据必须是通过排序的数组\n\t\t//而且返回的是当前要找的数据所在下标，如果没有找到，返回负数，找到了返回有效下标值\n\t\tint index = Arrays.binarySearch(arr, 5);\n\t\tSystem.out.println(\"index =\" + index);\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]],[5197,5197],[6100,6100]]],[1556269713280,[null,[[-1,4017," "],[1,4018,"\n"],[-1,5127," "],[1,5189,"\n"],[-1,6105," "],[1,6106,"\n"],[-1,6114,"\n"]],[4017,4017],[6114,6114]]],[1556269713280,[null,[[1,4017," "],[-1,4017,"\n"],[1,5127," "],[-1,5188,"\n"],[1,6105," "],[-1,6105,"\n"],[1,6114,"\n"]],[6114,6114],[4017,4017]]],[1556269705629,["GJX@GJXAIOU",[[1,5141,"\n"]],[5140,5140],[5141,5141]]],[1556269705773,["GJX@GJXAIOU",[[1,5142,"\n"]],[5141,5141],[5142,5142]]],[1556269713129,["GJX@GJXAIOU",[[1,5142,"```java"]],[5142,5142],[5149,5149]]],[1556269774277,[null,[[-1,4017," "],[1,4018,"\n"],[-1,5127," "],[1,5142,"\n"],[-1,5149,"\n"],[1,5198,"\n"],[-1,6114," "],[1,6115,"\n"],[-1,6123,"\n"]],[4017,4017],[6123,6123]]],[1556269774277,[null,[[1,4017," "],[-1,4017,"\n"],[1,5127," "],[-1,5141,"\n"],[1,5149,"\n"],[-1,5197,"\n"],[1,6114," "],[-1,6114,"\n"],[1,6123,"\n"]],[6123,6123],[4017,4017]]],[1556269713695,["GJX@GJXAIOU",[[1,5150,"\n"]],[5149,5149],[5150,5150]]],[1556269715168,["GJX@GJXAIOU",[[1,5150,"```"]],[5150,5150],[5153,5153]]],[1556269719833,["GJX@GJXAIOU",[[1,5150,"\n"]],[5149,5149],[5150,5150]]],[1556269719950,["GJX@GJXAIOU",[[1,5151,"\n"]],[5150,5150],[5151,5151]]],[1556269726030,["GJX@GJXAIOU",[[1,5150,"package com.qfedu.a_static;\n\n/*\n\t静态成员变量的使用案例：\n  \t\t统计一个类创建了多少个对象\n  \t\t人口统计，数据统计，ID的自动生成\n  \t\t\n  \tID用创建对象之后，自动赋值，并且每一个对象的ID号是唯一的，递增的\n */\n\nclass Student {\n\tprivate int id; //这个用来统计学生 的ID号 这个ID考虑自动生成\n\tprivate String name;\n\tprivate char sex;\n\t\n\t//在数据区的一个【静态成员变量】用于保存count的数据，而且私有化，不给类外提供任何的\n\t//修改或者获取该数据的方式\n\t//如果程序停止，这里就会重新计数，没 有做数据【持久化】操作\n\tprivate static int count = 1;\n\t\n\t//构造代码块，任何的一个对象都会执行的代码\n\t{\n\t\tthis.id = count++;\n\t}\n\t\n\tpublic Student() {}\n\t\n\t//因为ID是通过当前的程序自动生成的，不需要通过构造方法传参赋值\n\tpublic Student(String name, char sex) {\n\t\tthis.name = name;\n\t\tthis.sex = sex;\n\t}\n\t\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\tpublic void setSex(char sex) {\n\t\tthis.sex = sex;\n\t}\n\t\n\tpublic char getSex() {\n\t\treturn sex;\n\t}\n\t//ID不希望外部能有修改的方式或者权限，所以封装之后不提供setter方法，只提供一个查看功能getter方法\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\t\n\t\n}\n\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\tStudent stu1 = new Student();\n\t\tSystem.out.println(stu1.getId());\n\t\t\n\t\tStudent stu2 = new Student();\n\t\tSystem.out.println(stu2.getId());\n\t\t\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]],[5150,5150],[6246,6246]]],[1556269740373,["GJX@GJXAIOU",[[-1,6230,"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]],[6228,6246],[6228,6228]]],[1556269750901,["GJX@GJXAIOU",[[-1,7177,"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]],[7176,7193],[7176,7176]]],[1556269754101,["GJX@GJXAIOU",[[-1,7185,"     "]],[7187,7187],[7182,7182]]],[1556269754406,["GJX@GJXAIOU",[[-1,7181,"\n"]],[7182,7182],[7181,7181]]]],null,"GJX@GJXAIOU"],["4d44cf65-7086-40ba-9127-125f504892fe",1556410888216,"# static关键字\n\n## 一、static关键字的引入\n- 生活情况：\n  饮水机为例，通常是放在一个公共的环境中，大家共同使用，不会说每个人入学发一个饮水机。\n  如果每一个人都有一个饮水机，过多电线，过多的水管，占用了大量的空间\n\n- 代码中的问题：\n  发现在代码中，存在某一些成员变量的数值是一样的，大量重复，在每一个对象中都有存在，例如：\n  当前代码中的国家，都是中国。这样会占用过多的内存资源，甚至于硬盘资源。\n\n- 期望：\n \t把国家中国属性放到一个共享的区域里，然后让每一个对象使用就好\n \t\n- 解决问题：\n \t使用static关键字\n  \n\n\n## 二、static修饰成员变量\n\n### （一）static关键字的使用：\n【重点】\n1. 如果使用static修饰的成员变量，这些成员变量称之为【静态成员变量】，这个【静态成员变量】实际存放的内存空间在【内存数据区】，和当前【类对象内存】没有任何关系。也就是说，这个【静态成员变量】使用内存空间不再【堆区】对象内存中\n\n2. 用static修饰的成员变量，这个【静态成员变量】可以提供给多个类对象使用。\n\n3. 什么时候用static，真正意义上存在大量重复，并且存在一定共享基础的数据，这种情况下，可以使用static修饰\n  例如：\n  country属性就适合用static修饰，但是name属性就不适合\n  \n  小问题:\n    发现通过类对象来调用【静态成员变量】，报警告\n    The static field Person.country should be accessed in a static way\n    用static修饰的【静态成员变量】应该用【静态】的方式访问\n  \n  【重点】\n   用static修饰的成员变量，这个成员变量会【早于】类对象的创建而创建，而且【晚于】类对象的销毁而销毁所以，用static修饰的【静态成员变量】是和类对象\"无关的\"，这里的“无关的”指的是：首先内存上是无关的，然后和对象的创没创建没有关系。\n  \t\n   严格来说：类对象和【静态成员变量】无关，那么通过类对象来调用【静态成员变量】是\"非法的\"\n   Java语言期望的是：更加严谨的调用方式，因为和对象\"无关\"，所以不希望用调用来调用\n  \n  \n  【推荐调用/使用成员变量的方式】\n   类名.成员变量;\n   没用警告，也是让你记得static修饰的【静态成员变量】和类对象无关\n  \n  【修改问题】\n   用static修饰的成员变量，不管通过哪一种方式修改了内存，那么所有用到这个【静态成员变量】的数据，都会发生变动\n  \t\n   因为【静态成员变量】是一个【隐含的共享资源】\n   \t 例如：\n  \t\t井里放块糖，有甜大家尝\n\n示例代码：\n```java\nclass Person {\n\t//成员变量\n\tprivate String name;    //姓名\n\t\n\t//这里就是用static修饰的成员变量\n\tstatic String country = \"中国\"; //国家\n\t\n\t//构造方法\n\tpublic Person() {}\n\t\n\tpublic Person(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\t//setter和getter方法\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n}\n\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\tPerson p1 = new Person(\"叶问\"); //4个\n\t\t\n\t\tPerson p2 = new Person(\"陈华顺\"); //4个 \n\t\t\n\t\tPerson p3 = new Person(\"陈真\"); // 4个\n\t\t     \n\t\tPerson p4 = new Person(\"李云龙\"); // 4个\n\t\t\n\t\tSystem.out.println(\"p1.country:\" + p1.country);\n\t\tSystem.out.println(\"p2.country:\" + p2.country);\n\t\tPerson.country = \"中国\"; //推荐方式\n\t\tp3.country = \"People Republic of China\";\n\t\tSystem.out.println(\"p3.country:\" + p3.country); // PRC \n\t\tSystem.out.println(\"p4.country:\" + p4.country); // 中国\n\t}\n}\n```\n    \t\t\n\n\n\n\n\n\n## 三、static修饰成员方法\n\nstatic修饰成员方法，这个方法称之为【静态成员方法】\n\n格式:\n```java\n权限修饰符  static 返回值类型   方法名(形式参数列表) {\n//方法体;\n}\n```\n\n\t\n【重点】\n  \t用static修饰的成员方法，称之为【静态成员方法】，这个【静态成员方法】是早于对象的创建而【加载】，\t对象销毁之后依然存在。因为方法和函数是放在代码区，是加载进去的\n  \t\n  \t所以说：【静态成员方法】和对象\"无关\"\n  \t\n  \t如果采用类对象调用【静态成员方法】会报警告：\n  \t\tThe static method sleep() from type Dog should be accessed in a static way\n  \t\t在Dog类里面的【静态成员方法】sleep()应该用静态的方式来调用\n\n【注意事项】\n1. 在用static修饰的【静态成员方法】中不能使用this关键字\n结果推论:\n因为【静态成员方法】可以通过类名来调用，用类名调用的情况下，是不存在对象的，而this关键字\n是用来表示调用该方法的对象关键字，这里不存在对象，所以不能用。\n原理推论：\n因为【静态成员方法】是早于对象加载，晚于对象销毁，所以和对象\"无关\"，有没有对象，该方法都\n存在，所以this关键字在这里无法使用\n【没有对象】\n\n2. 在static修饰的【静态成员方法】中，不能使用【非静态成员变量】，因为【非静态成员变量】是保存在类对象的【堆区】内存中，和类对象共存，而在【静态成员方法】的调用过程中是没有对象的，所以不能使用【非静态成员变量】\n【没有对象】\n\n3. 【静态成员方法】中可以直接使用【静态成员变量】，难兄难弟\n\n4. 想在【静态成员方法】里面使用【非静态成员变量】怎么办???\n自娱自乐啊~~~\n可以在当前【静态成员方法】中用new关键字，调用构造方法，创建一个对象，使用该对象。\n案例：\n单例设计模式\n\n【总结】\n静态对静态，非静态对非静态\n\n【静态成员方法用途】\n  \t1. 调用方便，通过类名直接调用该方法，不需要借助于对象\n  \t2. 用来完成一些【工具类】\t\n  \t\tArrays 工具类\n\n示例代码：\n```java\nclass Dog {\n\t//成员变量\n\tprivate String name;\n\t\n\t//【静态成员变量】\n\tstatic String country = \"JP\"; //\n\t\n\t//构造方法\n\tpublic Dog() {}\n\t\n\tpublic Dog(String name) {\n\t\tthis.name = name; \n\t}\n\t\n\t//setter 和 getter方法\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\t//成员方法\n\tpublic void run() {\n\t\tthis.name = \"ll\"; //用this关键字来调用非静态成员变量\n\t\t\t\t\t\t  //this表示调用该方法的对象\n\t\tname = \"lxl\"; //非静态成员变量\n\t\tcountry = \"Janp\"; //静态成员变量\n\t\tSystem.out.println(\"跑来跑去~~~\");\n\t}\n\t\n\t//静态成员方法\n\tpublic static void sleep() {\n\t\t//this.name = \"ll\"; Cannot use this in static context  WHY\n\t\tcountry = \"RB\"; //静态成员变量\n\t\t//name = \"gz\"; // WHY\n\t\tSystem.out.println(\"睡大觉~~~~\");\n\t}\n\t\n\t// 在静态成员方法中使用非静态成员变量\n\tpublic static void test() {\n\t\tDog dog = new Dog(\"狗子\");\n\t\t\n\t\tSystem.out.println(dog.name);\n\t}\n}\n\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n\t\tDog dog = new Dog(\"Bobo\");\n\t\t\n\t\tdog.sleep();\n\t\tDog.sleep();\n\t\t\n\t\tDog.test();\n\t}\n}\n```\n\n\n\n\n\n## 静态成员变量的使用\n    详见 Demo3.java \n        一般用于计数器\n```java\npackage com.qfedu.a_static;\n\n/*\n\t静态成员变量的使用案例：\n  \t\t统计一个类创建了多少个对象\n  \t\t人口统计，数据统计，ID的自动生成\n  \t\t\n  \tID用创建对象之后，自动赋值，并且每一个对象的ID号是唯一的，递增的\n */\n\nclass Student {\n\tprivate int id; //这个用来统计学生 的ID号 这个ID考虑自动生成\n\tprivate String name;\n\tprivate char sex;\n\t\n\t//在数据区的一个【静态成员变量】用于保存count的数据，而且私有化，不给类外提供任何的\n\t//修改或者获取该数据的方式\n\t//如果程序停止，这里就会重新计数，没 有做数据【持久化】操作\n\tprivate static int count = 1;\n\t\n\t//构造代码块，任何的一个对象都会执行的代码\n\t{\n\t\tthis.id = count++;\n\t}\n\t\n\tpublic Student() {}\n\t\n\t//因为ID是通过当前的程序自动生成的，不需要通过构造方法传参赋值\n\tpublic Student(String name, char sex) {\n\t\tthis.name = name;\n\t\tthis.sex = sex;\n\t}\n\t\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\tpublic void setSex(char sex) {\n\t\tthis.sex = sex;\n\t}\n\t\n\tpublic char getSex() {\n\t\treturn sex;\n\t}\n\t//ID不希望外部能有修改的方式或者权限，所以封装之后不提供setter方法，只提供一个查看功能getter方法\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\t\n\t\n}\n\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\tStudent stu1 = new Student();\n\t\tSystem.out.println(stu1.getId());\n\t\t\n\t\tStudent stu2 = new Student();\n\t\tSystem.out.println(stu2.getId());\n\t\t\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n        \n## 静态成员方法的使用\n\n```java\npackage com.qfedu.a_static;\n\n/*\n\t静态成员变量的使用案例：\n  \t\t统计一个类创建了多少个对象\n  \t\t人口统计，数据统计，ID的自动生成\n  \t\t\n  \tID用创建对象之后，自动赋值，并且每一个对象的ID号是唯一的，递增的\n */\n\nclass Student {\n\tprivate int id; //这个用来统计学生 的ID号 这个ID考虑自动生成\n\tprivate String name;\n\tprivate char sex;\n\t\n\t//在数据区的一个【静态成员变量】用于保存count的数据，而且私有化，不给类外提供任何的\n\t//修改或者获取该数据的方式\n\t//如果程序停止，这里就会重新计数，没 有做数据【持久化】操作\n\tprivate static int count = 1;\n\t\n\t//构造代码块，任何的一个对象都会执行的代码\n\t{\n\t\tthis.id = count++;\n\t}\n\t\n\tpublic Student() {}\n\t\n\t//因为ID是通过当前的程序自动生成的，不需要通过构造方法传参赋值\n\tpublic Student(String name, char sex) {\n\t\tthis.name = name;\n\t\tthis.sex = sex;\n\t}\n\t\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\tpublic void setSex(char sex) {\n\t\tthis.sex = sex;\n\t}\n\t\n\tpublic char getSex() {\n\t\treturn sex;\n\t}\n\t//ID不希望外部能有修改的方式或者权限，所以封装之后不提供setter方法，只提供一个查看功能getter方法\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\t\n\t\n}\n\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\tStudent stu1 = new Student();\n\t\tSystem.out.println(stu1.getId());\n\t\t\n\t\tStudent stu2 = new Student();\n\t\tSystem.out.println(stu2.getId());\n\t\t\n\t}\n}\n\n\n```\n    详见 Demo4.java 和 Demo5.java\n        通常会做成工具类\n```java\npackage com.qfedu.a_static;\n\nimport java.util.Arrays;\n\n/*\n  静态成员方法的使用\n  \t\n  \t做成工具类，提供给开发者使用，更加便利，调用方便，摆脱类对象的约束，而且所有的的数据是\n  \t调用者传入和工具类里面的成员变量无关，甚至于某些工具类是没有任何成员变量的\n  \t\n  \tArrays 工具类，提供了大量的数组操作的方法，而且在Arrays工具类里面所有的方法\n  \t都是用public static修饰的\n  \t\n  \tsort  toString  binarySearch\n */\n\npublic class Demo4 {\n\tpublic static void main(String[] args) {\n\t\tint[] arr = {1, 9, 3, 4, 2, 8, 10, 5, 7, 6};\n\t\t\n\t\t//使用以下Arrays工具类里面的sort方法，排序算法，默认是从小到大，升序排列\n\t\tArrays.sort(arr);\n\t\t\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tSystem.out.println(arr[i]);\n\t\t}\n\t\t\n\t\t//Arrays工具类里面的toString方法，方法的返回值是一个String类型\n\t\t//例如:{1, 2, 3} => [1, 2, 3]\n\t\tString arrString = Arrays.toString(arr);\n\t\tSystem.out.println(arrString);\n\t\t\n\t\t//Arrays 工具里面的binarySearch 是一个查找数据的方法，要求查找的数组数据必须是通过排序的数组\n\t\t//而且返回的是当前要找的数据所在下标，如果没有找到，返回负数，找到了返回有效下标值\n\t\tint index = Arrays.binarySearch(arr, 5);\n\t\tSystem.out.println(\"index =\" + index);\n\t}\n}\n\n```\n   \n## 自定义工具类\n    完成MyToString(int[] arr) 和 MyReverse(int[] arr)\n\n## 和main函数聊聊天\n    class Demo6 {\n        public static void main(String[] args) {\n\t\t\n    \t}\n\t}\n\t\n\tpublic：权限访问修饰符，公开，权限最高的，自由度也是最高的，方便JVM在任何情况下都可以直接找到main函数\n\t开始当前程序的运行，main函数程序的唯一入口\n\t\n\tstatic: 静态修饰关键字，调用main函数不需要对象的参与，直接用类名调用即可，方便了JVM调用main函数的过程\n\t    实际情况:   \n\t        Demo6.main(null); //JVM做的事情\n\t        \n\tvoid：没有返回值，main函数比较特殊，返回值对于main函数没有意义，因为main函数调用者是JVM，JVM并不需要\n\t这个返回值\n\t\n\tmain：函数名，众所周知的函数名，大多数语言中都有这个函数名，表示当前程序的唯一入口 支持C++ C OC \n\t\n\t(String[] args): main函数运行需要的参数列表，里面的参数类型是一个String[] 是一个字符串数组，\n\targs 是 arguments的缩写 一般不用~~~\n    \t\t\n## 数组补充知识\n    ArraryIndexOutOfBoundsException 数组下标越界【异常】，通常是操作数组下标超出了数组的有效下标范围\n    NullPointerException 空指针异常，操作null内存空间异常",[[1556410863765,["GJX@GJXAIOU",[[1,372,"**"],[1,414,"**"]],[372,414],[372,418]]],[1556410873553,["GJX@GJXAIOU",[[1,418," "]],[418,418],[419,419]]],[1556410875960,["GJX@GJXAIOU",[[1,372," "]],[372,372],[373,373]]],[1556410931549,["GJX@GJXAIOU",[[1,713,"**"],[1,743,"**"]],[713,743],[713,747]]],[1556410945357,["GJX@GJXAIOU",[[-1,751,"  "]],[753,753],[751,751]]],[1556410958537,["GJX@GJXAIOU",[[1,810,"。"]],[810,810],[811,811]]],[1556410990482,["GJX@GJXAIOU",[[1,835,"**"],[1,840,"**"]],[835,840],[835,844]]],[1556411008103,["GJX@GJXAIOU",[[1,814,"=="],[1,846,"=="]],[814,846],[814,850]]],[1556411029777,["GJX@GJXAIOU",[[1,1015,"~"]],[1015,1015],[1016,1016]]],[1556411031358,["GJX@GJXAIOU",[[-1,1015,"~"]],[1016,1016],[1015,1015]]],[1556411031498,["GJX@GJXAIOU",[[1,1015,"·"]],[1015,1015],[1016,1016]]],[1556411032773,["GJX@GJXAIOU",[[-1,1015,"·"]],[1016,1016],[1015,1015]]],[1556411033272,["GJX@GJXAIOU",[[1,1015,"`"]],[1015,1015],[1016,1016]]],[1556411035375,["GJX@GJXAIOU",[[1,1024,"`"]],[1024,1024],[1025,1025]]],[1556411090472,["GJX@GJXAIOU",[[1,1079,"**"],[1,1135,"**"]],[1079,1135],[1079,1139]]],[1556411142857,["GJX@GJXAIOU",[[-1,2180,"//"]],[2180,2182],[2180,2180]]],[1556411146504,["GJX@GJXAIOU",[[1,2180,"           "]],[2180,2180],[2191,2191]]],[1556411155826,["GJX@GJXAIOU",[[-1,2301,"  "],[-1,2324,"  "],[-1,2328,"  "],[-1,2354,"  "],[-1,2433,"  "]],[2301,2471],[2301,2461]]],[1556411157900,["GJX@GJXAIOU",[[-1,2301,"\t"],[-1,2322,"\t"],[-1,2324,"\t"],[-1,2348,"\t"],[-1,2425,"\t"]],[2301,2461],[2301,2456]]],[1556411176357,["GJX@GJXAIOU",[[1,2242,"**"],[1,2275,"**"]],[2242,2275],[2242,2279]]],[1556411180408,["GJX@GJXAIOU",[[1,2242," "]],[2242,2242],[2243,2243]]],[1556411225553,["GJX@GJXAIOU",[[-1,2557,"\n"]],[2558,2558],[2557,2557]]],[1556411232037,["GJX@GJXAIOU",[[-1,2640,"\n"]],[2641,2641],[2640,2640]]],[1556411357505,["GJX@GJXAIOU",[[-1,2812,"，难兄难弟"]],[2812,2817],[2812,2812]]],[1556411369865,["GJX@GJXAIOU",[[-1,2847,"自娱自乐啊~~~"]],[2847,2855],[2847,2847]]],[1556411373108,["GJX@GJXAIOU",[[-1,2847,"\n"]],[2847,2847],[2846,2846]]],[1556411384743,["GJX@GJXAIOU",[[-1,2788," "]],[2789,2789],[2788,2788]]],[1556411387009,["GJX@GJXAIOU",[[1,2788," "]],[2788,2788],[2789,2789]]],[1556411429476,["GJX@GJXAIOU",[[-1,3100," //"]],[3100,3103],[3100,3100]]],[1556411444617,["GJX@GJXAIOU",[[1,3096," "]],[3096,3096],[3097,3097]]],[1556411446824,["GJX@GJXAIOU",[[1,3099," "]],[3099,3099],[3100,3100]]],[1556411600850,["GJX@GJXAIOU",[[1,3984,"]"]],[3984,3984],[3985,3985]]],[1556411602018,["GJX@GJXAIOU",[[-1,3983," ]"]],[3985,3985],[3983,3983]]],[1556411683118,["GJX@GJXAIOU",[[-1,5105,"\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]],[5104,5118],[5104,5104]]],[1556411687302,["GJX@GJXAIOU",[[-1,5104,"\n"]],[5104,5104],[5103,5103]]],[1556411687488,["GJX@GJXAIOU",[[-1,5103,"\n"]],[5103,5103],[5102,5102]]],[1556411687669,["GJX@GJXAIOU",[[-1,5102,"\n"]],[5102,5102],[5101,5101]]],[1556411687898,["GJX@GJXAIOU",[[-1,5101,"\n"]],[5101,5101],[5100,5100]]],[1556411706662,["GJX@GJXAIOU",[[-1,6222,"  "],[-1,6251,"  "]],[6224,6267],[6222,6263]]]],null,"GJX@GJXAIOU"],["cbdb9363-00ad-4cdc-ad6b-ee482ddfe3db",1561594772309,"# static关键字\n\n## 一、static关键字的引入\n- 生活情况：\n  饮水机为例，通常是放在一个公共的环境中，大家共同使用，不会说每个人入学发一个饮水机。\n  如果每一个人都有一个饮水机，过多电线，过多的水管，占用了大量的空间\n\n- 代码中的问题：\n  发现在代码中，存在某一些成员变量的数值是一样的，大量重复，在每一个对象中都有存在，例如：\n  当前代码中的国家，都是中国。这样会占用过多的内存资源，甚至于硬盘资源。\n\n- 期望：\n \t把国家中国属性放到一个共享的区域里，然后让每一个对象使用就好\n \t\n- 解决问题：\n \t使用static关键字\n  \n\n\n## 二、static修饰成员变量\n\n### （一）static关键字的使用：\n【重点】\n1. 如果使用static修饰的成员变量，这些成员变量称之为【静态成员变量】，这个 **【静态成员变量】实际存放的内存空间在【内存数据区】，和当前【类对象内存】没有任何关系** 。也就是说，这个【静态成员变量】使用内存空间不再【堆区】对象内存中\n\n2. 用static修饰的成员变量，这个【静态成员变量】可以提供给多个类对象使用。\n\n3. 什么时候用static，真正意义上存在大量重复，并且存在一定共享基础的数据，这种情况下，可以使用static修饰\n  例如：\n  country属性就适合用static修饰，但是name属性就不适合\n  \n  小问题:\n    发现通过类对象来调用【静态成员变量】，报警告\n    The static field Person.country should be accessed in a static way\n    **用static修饰的【静态成员变量】应该用【静态】的方式访问**\n  \n【重点】\n   用static修饰的成员变量，这个成员变量会【早于】类对象的创建而创建，而且【晚于】类对象的销毁而销毁。所以，==用static修饰的【静态成员变量】是和类**对象\"无关**的\"==，这里的“无关的”指的是：首先内存上是无关的，然后和对象的创没创建没有关系。\n  \t\n   严格来说：类对象和【静态成员变量】无关，那么通过类对象来调用【静态成员变量】是\"非法的\"\n   Java语言期望的是：更加严谨的调用方式，因为和对象\"无关\"，所以不希望用调用来调用\n  \n  \n  【推荐调用/使用成员变量的方式】\n   `类名.成员变量;`\n   没用警告，也是让你记得static修饰的【静态成员变量】和类对象无关\n  \n  【修改问题】\n   **用static修饰的成员变量，不管通过哪一种方式修改了内存，那么所有用到这个【静态成员变量】的数据，都会发生变动**\n  \t\n   因为【静态成员变量】是一个【隐含的共享资源】\n   \t 例如：\n  \t\t井里放块糖，有甜大家尝\n\n示例代码：\n```java\nclass Person {\n\t//成员变量\n\tprivate String name;    //姓名\n\t\n\t//这里就是用static修饰的成员变量\n\tstatic String country = \"中国\"; //国家\n\t\n\t//构造方法\n\tpublic Person() {}\n\t\n\tpublic Person(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\t//setter和getter方法\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n}\n\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\tPerson p1 = new Person(\"叶问\"); //4个\n\t\t\n\t\tPerson p2 = new Person(\"陈华顺\"); //4个 \n\t\t\n\t\tPerson p3 = new Person(\"陈真\"); // 4个\n\t\t     \n\t\tPerson p4 = new Person(\"李云龙\"); // 4个\n\t\t\n\t\tSystem.out.println(\"p1.country:\" + p1.country);\n\t\tSystem.out.println(\"p2.country:\" + p2.country);\n\t\tPerson.country = \"中国\"; //推荐方式\n\t\tp3.country = \"People Republic of China\";\n\t\tSystem.out.println(\"p3.country:\" + p3.country); // PRC \n\t\tSystem.out.println(\"p4.country:\" + p4.country); // 中国\n\t}\n}\n```\n    \t\t\n\n\n\n\n\n\n## 三、static修饰成员方法\n\nstatic修饰成员方法，这个方法称之为【静态成员方法】\n\n格式:\n```java\n权限修饰符  static 返回值类型   方法名(形式参数列表) {\n           方法体;\n}\n```\n\n\t\n【重点】\n  \t用static修饰的成员方法，称之为【静态成员方法】，这个 **【静态成员方法】是早于对象的创建而【加载】，\t对象销毁之后依然存在**。因为方法和函数是放在代码区，是加载进去的\n  \t\n所以说：【静态成员方法】和对象\"无关\"\n\n如果采用类对象调用【静态成员方法】会报警告：\n\tThe static method sleep() from type Dog should be accessed in a static way\n\t在Dog类里面的【静态成员方法】sleep()应该用静态的方式来调用\n\n【注意事项】\n1. 在用static修饰的【静态成员方法】中不能使用this关键字\n结果推论:\n因为【静态成员方法】可以通过类名来调用，用类名调用的情况下，是不存在对象的，而this关键字是用来表示调用该方法的对象关键字，这里不存在对象，所以不能用。\n原理推论：\n因为【静态成员方法】是早于对象加载，晚于对象销毁，所以和对象\"无关\"，有没有对象，该方法都存在，所以this关键字在这里无法使用\n【没有对象】\n\n2. 在static修饰的【静态成员方法】中，不能使用【非静态成员变量】，因为【非静态成员变量】是保存在类对象的【堆区】内存中，和类对象共存，而在【静态成员方法】的调用过程中是没有对象的，所以不能使用【非静态成员变量】\n【没有对象】\n\n3. 【静态成员方法】中可以直接使用【静态成员变量】\n\n4. 想在【静态成员方法】里面使用【非静态成员变量】怎么办???\n可以在当前【静态成员方法】中用new关键字，调用构造方法，创建一个对象，使用该对象。\n案例：\n单例设计模式\n\n【总结】\n静态对静态，非静态对非静态\n\n【静态成员方法用途】\n  \t1. 调用方便，通过类名直接调用该方法，不需要借助于对象\n  \t2. 用来完成一些【工具类】\t\n  \t\tArrays 工具类\n\n示例代码：\n```java\nclass Dog {\n\t//成员变量\n\tprivate String name;\n\t\n\t//【静态成员变量】\n\tstatic String country = \" JP \";\n\t\n\t//构造方法\n\tpublic Dog() {}\n\t\n\tpublic Dog(String name) {\n\t\tthis.name = name; \n\t}\n\t\n\t//setter 和 getter方法\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\t//成员方法\n\tpublic void run() {\n\t\tthis.name = \"ll\"; //用this关键字来调用非静态成员变量\n\t\t\t\t\t\t  //this表示调用该方法的对象\n\t\tname = \"lxl\"; //非静态成员变量\n\t\tcountry = \"Janp\"; //静态成员变量\n\t\tSystem.out.println(\"跑来跑去~~~\");\n\t}\n\t\n\t//静态成员方法\n\tpublic static void sleep() {\n\t\t//this.name = \"ll\"; Cannot use this in static context  WHY\n\t\tcountry = \"RB\"; //静态成员变量\n\t\t//name = \"gz\"; // WHY\n\t\tSystem.out.println(\"睡大觉~~~~\");\n\t}\n\t\n\t// 在静态成员方法中使用非静态成员变量\n\tpublic static void test() {\n\t\tDog dog = new Dog(\"狗子\");\n\t\t\n\t\tSystem.out.println(dog.name);\n\t}\n}\n\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n\t\tDog dog = new Dog(\"Bobo\");\n\t\t\n\t\tdog.sleep();\n\t\tDog.sleep();\n\t\t\n\t\tDog.test();\n\t}\n}\n```\n\n\n\n\n\n## 静态成员变量的使用\n   详见 Demo3.java \n        一般用于计数器\n```java\npackage com.qfedu.a_static;\n\n/*\n\t静态成员变量的使用案例：\n  \t\t统计一个类创建了多少个对象\n  \t\t人口统计，数据统计，ID的自动生成\n  \t\t\n  \tID用创建对象之后，自动赋值，并且每一个对象的ID号是唯一的，递增的\n */\n\nclass Student {\n\tprivate int id; //这个用来统计学生 的ID号 这个ID考虑自动生成\n\tprivate String name;\n\tprivate char sex;\n\t\n\t//在数据区的一个【静态成员变量】用于保存count的数据，而且私有化，不给类外提供任何的\n\t//修改或者获取该数据的方式\n\t//如果程序停止，这里就会重新计数，没 有做数据【持久化】操作\n\tprivate static int count = 1;\n\t\n\t//构造代码块，任何的一个对象都会执行的代码\n\t{\n\t\tthis.id = count++;\n\t}\n\t\n\tpublic Student() {}\n\t\n\t//因为ID是通过当前的程序自动生成的，不需要通过构造方法传参赋值\n\tpublic Student(String name, char sex) {\n\t\tthis.name = name;\n\t\tthis.sex = sex;\n\t}\n\t\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\tpublic void setSex(char sex) {\n\t\tthis.sex = sex;\n\t}\n\t\n\tpublic char getSex() {\n\t\treturn sex;\n\t}\n\t//ID不希望外部能有修改的方式或者权限，所以封装之后不提供setter方法，只提供一个查看功能getter方法\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\t\n\t\n}\n\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\tStudent stu1 = new Student();\n\t\tSystem.out.println(stu1.getId());\n\t\t\n\t\tStudent stu2 = new Student();\n\t\tSystem.out.println(stu2.getId());\n\t\t\n\t}\n}\n\n```\n        \n## 静态成员方法的使用\n\n```java\npackage com.qfedu.a_static;\n\n/*\n\t静态成员变量的使用案例：\n  \t\t统计一个类创建了多少个对象\n  \t\t人口统计，数据统计，ID的自动生成\n  \t\t\n  \tID用创建对象之后，自动赋值，并且每一个对象的ID号是唯一的，递增的\n */\n\nclass Student {\n\tprivate int id; //这个用来统计学生 的ID号 这个ID考虑自动生成\n\tprivate String name;\n\tprivate char sex;\n\t\n\t//在数据区的一个【静态成员变量】用于保存count的数据，而且私有化，不给类外提供任何的\n\t//修改或者获取该数据的方式\n\t//如果程序停止，这里就会重新计数，没 有做数据【持久化】操作\n\tprivate static int count = 1;\n\t\n\t//构造代码块，任何的一个对象都会执行的代码\n\t{\n\t\tthis.id = count++;\n\t}\n\t\n\tpublic Student() {}\n\t\n\t//因为ID是通过当前的程序自动生成的，不需要通过构造方法传参赋值\n\tpublic Student(String name, char sex) {\n\t\tthis.name = name;\n\t\tthis.sex = sex;\n\t}\n\t\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\tpublic void setSex(char sex) {\n\t\tthis.sex = sex;\n\t}\n\t\n\tpublic char getSex() {\n\t\treturn sex;\n\t}\n\t//ID不希望外部能有修改的方式或者权限，所以封装之后不提供setter方法，只提供一个查看功能getter方法\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\t\n\t\n}\n\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\tStudent stu1 = new Student();\n\t\tSystem.out.println(stu1.getId());\n\t\t\n\t\tStudent stu2 = new Student();\n\t\tSystem.out.println(stu2.getId());\n\t\t\n\t}\n}\n\n\n```\n  详见 Demo4.java 和 Demo5.java\n      通常会做成工具类\n```java\npackage com.qfedu.a_static;\n\nimport java.util.Arrays;\n\n/*\n  静态成员方法的使用\n  \t\n  \t做成工具类，提供给开发者使用，更加便利，调用方便，摆脱类对象的约束，而且所有的的数据是\n  \t调用者传入和工具类里面的成员变量无关，甚至于某些工具类是没有任何成员变量的\n  \t\n  \tArrays 工具类，提供了大量的数组操作的方法，而且在Arrays工具类里面所有的方法\n  \t都是用public static修饰的\n  \t\n  \tsort  toString  binarySearch\n */\n\npublic class Demo4 {\n\tpublic static void main(String[] args) {\n\t\tint[] arr = {1, 9, 3, 4, 2, 8, 10, 5, 7, 6};\n\t\t\n\t\t//使用以下Arrays工具类里面的sort方法，排序算法，默认是从小到大，升序排列\n\t\tArrays.sort(arr);\n\t\t\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tSystem.out.println(arr[i]);\n\t\t}\n\t\t\n\t\t//Arrays工具类里面的toString方法，方法的返回值是一个String类型\n\t\t//例如:{1, 2, 3} => [1, 2, 3]\n\t\tString arrString = Arrays.toString(arr);\n\t\tSystem.out.println(arrString);\n\t\t\n\t\t//Arrays 工具里面的binarySearch 是一个查找数据的方法，要求查找的数组数据必须是通过排序的数组\n\t\t//而且返回的是当前要找的数据所在下标，如果没有找到，返回负数，找到了返回有效下标值\n\t\tint index = Arrays.binarySearch(arr, 5);\n\t\tSystem.out.println(\"index =\" + index);\n\t}\n}\n\n```\n   \n## 自定义工具类\n    完成MyToString(int[] arr) 和 MyReverse(int[] arr)\n\n## 和main函数聊聊天\n    class Demo6 {\n        public static void main(String[] args) {\n\t\t\n    \t}\n\t}\n\t\n\tpublic：权限访问修饰符，公开，权限最高的，自由度也是最高的，方便JVM在任何情况下都可以直接找到main函数\n\t开始当前程序的运行，main函数程序的唯一入口\n\t\n\tstatic: 静态修饰关键字，调用main函数不需要对象的参与，直接用类名调用即可，方便了JVM调用main函数的过程\n\t    实际情况:   \n\t        Demo6.main(null); //JVM做的事情\n\t        \n\tvoid：没有返回值，main函数比较特殊，返回值对于main函数没有意义，因为main函数调用者是JVM，JVM并不需要\n\t这个返回值\n\t\n\tmain：函数名，众所周知的函数名，大多数语言中都有这个函数名，表示当前程序的唯一入口 支持C++ C OC \n\t\n\t(String[] args): main函数运行需要的参数列表，里面的参数类型是一个String[] 是一个字符串数组，\n\targs 是 arguments的缩写 一般不用~~~\n    \t\t\n## 数组补充知识\n    ArraryIndexOutOfBoundsException 数组下标越界【异常】，通常是操作数组下标超出了数组的有效下标范围\n    NullPointerException 空指针异常，操作null内存空间异常",[[1561594729895,["GJX@GJXAIOU",[[1,781,"**"],[1,810,"**"]],[781,810],[781,814]]]],null,"GJX@GJXAIOU"],["53313737-1e61-47f4-a386-de0bec39fd06",1563284286241,"# static关键字\n\n## 一、static关键字的引入\n- 生活情况：\n  饮水机为例，通常是放在一个公共的环境中，大家共同使用，不会说每个人入学发一个饮水机。\n  如果每一个人都有一个饮水机，过多电线，过多的水管，占用了大量的空间\n\n- 代码中的问题：\n  发现在代码中，存在某一些成员变量的数值是一样的，大量重复，在每一个对象中都有存在，例如：\n  当前代码中的国家，都是中国。这样会占用过多的内存资源，甚至于硬盘资源。\n\n- 期望：\n \t把国家中国属性放到一个共享的区域里，然后让每一个对象使用就好\n \t\n- 解决问题：\n \t使用static关键字\n  \n\n\n## 二、static修饰成员变量\n\n### （一）static关键字的使用：\n【重点】\n1. 如果使用static修饰的成员变量，这些成员变量称之为【静态成员变量】，这个 **【静态成员变量】实际存放的内存空间在【内存数据区】，和当前【类对象内存】没有任何关系** 。也就是说，这个【静态成员变量】使用内存空间不再【堆区】对象内存中\n\n2. 用static修饰的成员变量，这个【静态成员变量】可以提供给多个类对象使用。\n\n3. 什么时候用static，真正意义上存在大量重复，并且存在一定共享基础的数据，这种情况下，可以使用static修饰\n  例如：\n  country属性就适合用static修饰，但是name属性就不适合\n  \n  小问题:\n    发现通过类对象来调用【静态成员变量】，报警告\n    The static field Person.country should be accessed in a static way\n    **用static修饰的【静态成员变量】应该用【静态】的方式访问**\n  \n【重点】\n   用static修饰的成员变量，这个成员变量会**【早于】类对象的创建而创建，而且【晚于】类对象的销毁而销毁**。所以，==用static修饰的【静态成员变量】是和类**对象\"无关**的\"==，这里的“无关的”指的是：首先内存上是无关的，然后和对象的创没创建没有关系。\n  \t\n   严格来说：类对象和【静态成员变量】无关，那么通过类对象来调用【静态成员变量】是\"非法的\"\n   Java语言期望的是：更加严谨的调用方式，因为和对象\"无关\"，所以不希望用调用来调用\n  \n  \n  【推荐调用/使用成员变量的方式】\n   `类名.成员变量;`\n   没用警告，也是让你记得static修饰的【静态成员变量】和类对象无关\n  \n  【修改问题】\n   **用static修饰的成员变量，不管通过哪一种方式修改了内存，那么所有用到这个【静态成员变量】的数据，都会发生变动**\n  \t\n   因为【静态成员变量】是一个【隐含的共享资源】\n   \t 例如：\n  \t\t井里放块糖，有甜大家尝\n\n示例代码：\n```java\nclass Person {\n\t//成员变量\n\tprivate String name;    //姓名\n\t\n\t//这里就是用static修饰的成员变量\n\tstatic String country = \"中国\"; //国家\n\t\n\t//构造方法\n\tpublic Person() {}\n\t\n\tpublic Person(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\t//setter和getter方法\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n}\n\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\tPerson p1 = new Person(\"叶问\"); //4个\n\t\t\n\t\tPerson p2 = new Person(\"陈华顺\"); //4个 \n\t\t\n\t\tPerson p3 = new Person(\"陈真\"); // 4个\n\t\t     \n\t\tPerson p4 = new Person(\"李云龙\"); // 4个\n\t\t\n\t\tSystem.out.println(\"p1.country:\" + p1.country);\n\t\tSystem.out.println(\"p2.country:\" + p2.country);\n\t\tPerson.country = \"中国\"; //推荐方式\n\t\tp3.country = \"People Republic of China\";\n\t\tSystem.out.println(\"p3.country:\" + p3.country); // PRC \n\t\tSystem.out.println(\"p4.country:\" + p4.country); // 中国\n\t}\n}\n```\n    \t\t\n\n\n\n\n\n\n## 三、static修饰成员方法\n\nstatic修饰成员方法，这个方法称之为【静态成员方法】\n\n格式:\n```java\n权限修饰符  static 返回值类型   方法名(形式参数列表) {\n           方法体;\n}\n```\n\n\t\n【重点】\n  \t用static修饰的成员方法，称之为【静态成员方法】，这个 **【静态成员方法】是早于对象的创建而【加载】，\t对象销毁之后依然存在**。因为方法和函数是放在代码区，是加载进去的\n  \t\n所以说：【静态成员方法】和对象\"无关\"\n\n如果采用类对象调用【静态成员方法】会报警告：\n\tThe static method sleep() from type Dog should be accessed in a static way\n\t在Dog类里面的【静态成员方法】sleep()应该用静态的方式来调用\n\n【注意事项】\n1. 在用static修饰的【静态成员方法】中不能使用this关键字\n结果推论:\n因为【静态成员方法】可以通过类名来调用，用类名调用的情况下，是不存在对象的，而this关键字是用来表示调用该方法的对象关键字，这里不存在对象，所以不能用。\n原理推论：\n因为【静态成员方法】是早于对象加载，晚于对象销毁，所以和对象\"无关\"，有没有对象，该方法都存在，所以this关键字在这里无法使用\n【没有对象】\n\n2. 在static修饰的【静态成员方法】中，不能使用【非静态成员变量】，因为【非静态成员变量】是保存在类对象的【堆区】内存中，和类对象共存，而在【静态成员方法】的调用过程中是没有对象的，所以不能使用【非静态成员变量】\n【没有对象】\n\n3. 【静态成员方法】中可以直接使用【静态成员变量】\n\n4. 想在【静态成员方法】里面使用【非静态成员变量】怎么办???\n可以在当前【静态成员方法】中用new关键字，调用构造方法，创建一个对象，使用该对象。\n案例：\n单例设计模式\n\n【总结】\n静态对静态，非静态对非静态\n\n【静态成员方法用途】\n  \t1. 调用方便，通过类名直接调用该方法，不需要借助于对象\n  \t2. 用来完成一些【工具类】\t\n  \t\tArrays 工具类\n\n示例代码：\n```java\nclass Dog {\n\t//成员变量\n\tprivate String name;\n\t\n\t//【静态成员变量】\n\tstatic String country = \" JP \";\n\t\n\t//构造方法\n\tpublic Dog() {}\n\t\n\tpublic Dog(String name) {\n\t\tthis.name = name; \n\t}\n\t\n\t//setter 和 getter方法\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\t//成员方法\n\tpublic void run() {\n\t\tthis.name = \"ll\"; //用this关键字来调用非静态成员变量\n\t\t\t\t\t\t  //this表示调用该方法的对象\n\t\tname = \"lxl\"; //非静态成员变量\n\t\tcountry = \"Janp\"; //静态成员变量\n\t\tSystem.out.println(\"跑来跑去~~~\");\n\t}\n\t\n\t//静态成员方法\n\tpublic static void sleep() {\n\t\t//this.name = \"ll\"; Cannot use this in static context  WHY\n\t\tcountry = \"RB\"; //静态成员变量\n\t\t//name = \"gz\"; // WHY\n\t\tSystem.out.println(\"睡大觉~~~~\");\n\t}\n\t\n\t// 在静态成员方法中使用非静态成员变量\n\tpublic static void test() {\n\t\tDog dog = new Dog(\"狗子\");\n\t\t\n\t\tSystem.out.println(dog.name);\n\t}\n}\n\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n\t\tDog dog = new Dog(\"Bobo\");\n\t\t\n\t\tdog.sleep();\n\t\tDog.sleep();\n\t\t\n\t\tDog.test();\n\t}\n}\n```\n\n\n\n\n\n## 静态成员变量的使用\n   详见 Demo3.java \n        一般用于计数器\n```java\npackage com.qfedu.a_static;\n\n/*\n\t静态成员变量的使用案例：\n  \t\t统计一个类创建了多少个对象\n  \t\t人口统计，数据统计，ID的自动生成\n  \t\t\n  \tID用创建对象之后，自动赋值，并且每一个对象的ID号是唯一的，递增的\n */\n\nclass Student {\n\tprivate int id; //这个用来统计学生 的ID号 这个ID考虑自动生成\n\tprivate String name;\n\tprivate char sex;\n\t\n\t//在数据区的一个【静态成员变量】用于保存count的数据，而且私有化，不给类外提供任何的\n\t//修改或者获取该数据的方式\n\t//如果程序停止，这里就会重新计数，没 有做数据【持久化】操作\n\tprivate static int count = 1;\n\t\n\t//构造代码块，任何的一个对象都会执行的代码\n\t{\n\t\tthis.id = count++;\n\t}\n\t\n\tpublic Student() {}\n\t\n\t//因为ID是通过当前的程序自动生成的，不需要通过构造方法传参赋值\n\tpublic Student(String name, char sex) {\n\t\tthis.name = name;\n\t\tthis.sex = sex;\n\t}\n\t\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\tpublic void setSex(char sex) {\n\t\tthis.sex = sex;\n\t}\n\t\n\tpublic char getSex() {\n\t\treturn sex;\n\t}\n\t//ID不希望外部能有修改的方式或者权限，所以封装之后不提供setter方法，只提供一个查看功能getter方法\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\t\n\t\n}\n\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\tStudent stu1 = new Student();\n\t\tSystem.out.println(stu1.getId());\n\t\t\n\t\tStudent stu2 = new Student();\n\t\tSystem.out.println(stu2.getId());\n\t\t\n\t}\n}\n\n```\n        \n## 静态成员方法的使用\n\n```java\npackage com.qfedu.a_static;\n\n/*\n\t静态成员变量的使用案例：\n  \t\t统计一个类创建了多少个对象\n  \t\t人口统计，数据统计，ID的自动生成\n  \t\t\n  \tID用创建对象之后，自动赋值，并且每一个对象的ID号是唯一的，递增的\n */\n\nclass Student {\n\tprivate int id; //这个用来统计学生 的ID号 这个ID考虑自动生成\n\tprivate String name;\n\tprivate char sex;\n\t\n\t//在数据区的一个【静态成员变量】用于保存count的数据，而且私有化，不给类外提供任何的\n\t//修改或者获取该数据的方式\n\t//如果程序停止，这里就会重新计数，没 有做数据【持久化】操作\n\tprivate static int count = 1;\n\t\n\t//构造代码块，任何的一个对象都会执行的代码\n\t{\n\t\tthis.id = count++;\n\t}\n\t\n\tpublic Student() {}\n\t\n\t//因为ID是通过当前的程序自动生成的，不需要通过构造方法传参赋值\n\tpublic Student(String name, char sex) {\n\t\tthis.name = name;\n\t\tthis.sex = sex;\n\t}\n\t\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\tpublic void setSex(char sex) {\n\t\tthis.sex = sex;\n\t}\n\t\n\tpublic char getSex() {\n\t\treturn sex;\n\t}\n\t//ID不希望外部能有修改的方式或者权限，所以封装之后不提供setter方法，只提供一个查看功能getter方法\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\t\n\t\n}\n\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\tStudent stu1 = new Student();\n\t\tSystem.out.println(stu1.getId());\n\t\t\n\t\tStudent stu2 = new Student();\n\t\tSystem.out.println(stu2.getId());\n\t\t\n\t}\n}\n\n\n```\n  详见 Demo4.java 和 Demo5.java\n      通常会做成工具类\n```java\npackage com.qfedu.a_static;\n\nimport java.util.Arrays;\n\n/*\n  静态成员方法的使用\n  \t\n  \t做成工具类，提供给开发者使用，更加便利，调用方便，摆脱类对象的约束，而且所有的的数据是\n  \t调用者传入和工具类里面的成员变量无关，甚至于某些工具类是没有任何成员变量的\n  \t\n  \tArrays 工具类，提供了大量的数组操作的方法，而且在Arrays工具类里面所有的方法\n  \t都是用public static修饰的\n  \t\n  \tsort  toString  binarySearch\n */\n\npublic class Demo4 {\n\tpublic static void main(String[] args) {\n\t\tint[] arr = {1, 9, 3, 4, 2, 8, 10, 5, 7, 6};\n\t\t\n\t\t//使用以下Arrays工具类里面的sort方法，排序算法，默认是从小到大，升序排列\n\t\tArrays.sort(arr);\n\t\t\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tSystem.out.println(arr[i]);\n\t\t}\n\t\t\n\t\t//Arrays工具类里面的toString方法，方法的返回值是一个String类型\n\t\t//例如:{1, 2, 3} => [1, 2, 3]\n\t\tString arrString = Arrays.toString(arr);\n\t\tSystem.out.println(arrString);\n\t\t\n\t\t//Arrays 工具里面的binarySearch 是一个查找数据的方法，要求查找的数组数据必须是通过排序的数组\n\t\t//而且返回的是当前要找的数据所在下标，如果没有找到，返回负数，找到了返回有效下标值\n\t\tint index = Arrays.binarySearch(arr, 5);\n\t\tSystem.out.println(\"index =\" + index);\n\t}\n}\n\n```\n   \n## 自定义工具类\n    完成MyToString(int[] arr) 和 MyReverse(int[] arr)\n\n## 和main函数聊聊天\n    class Demo6 {\n        public static void main(String[] args) {\n\t\t\n    \t}\n\t}\n\t\n\tpublic：权限访问修饰符，公开，权限最高的，自由度也是最高的，方便JVM在任何情况下都可以直接找到main函数\n\t开始当前程序的运行，main函数程序的唯一入口\n\t\n\tstatic: 静态修饰关键字，调用main函数不需要对象的参与，直接用类名调用即可，方便了JVM调用main函数的过程\n\t    实际情况:   \n\t        Demo6.main(null); //JVM做的事情\n\t        \n\tvoid：没有返回值，main函数比较特殊，返回值对于main函数没有意义，因为main函数调用者是JVM，JVM并不需要\n\t这个返回值\n\t\n\tmain：函数名，众所周知的函数名，大多数语言中都有这个函数名，表示当前程序的唯一入口 支持C++ C OC \n\t\n\t(String[] args): main函数运行需要的参数列表，里面的参数类型是一个String[] 是一个字符串数组，\n\targs 是 arguments的缩写 一般不用~~~\n    \t\t\n## 数组补充知识\n    ArraryIndexOutOfBoundsException 数组下标越界【异常】，通常是操作数组下标超出了数组的有效下标范围\n    NullPointerException 空指针异常，操作null内存空间异常",[[1563284265469,["GJX@GJXAIOU",[[1,2,"JavaDay11 "]],[2,2],[12,12]]],[1563284272450,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1563284281874,["GJX@GJXAIOU",[[1,0,"---\ntags : \n- java基础\n\nflag: blue\n---\n@toc"]],[0,0],[41,41]]],[1563284287246,["GJX@GJXAIOU",[[1,37,"\n"]],[37,37],[38,38]]],[1563284289170,["GJX@GJXAIOU",[[1,43,"\n"]],[43,43],[44,44]]],[1563284508572,["GJX@GJXAIOU",[[1,429,"=="],[1,471,"=="]],[429,471],[429,475]]],[1563284512587,["GJX@GJXAIOU",[[-1,427,"**"]],[429,429],[427,427]]],[1563284514331,["GJX@GJXAIOU",[[-1,473,"**"]],[475,475],[473,473]]],[1563284528262,["GJX@GJXAIOU",[[1,512,"=="],[1,549,"=="]],[512,549],[512,553]]],[1563284540149,["GJX@GJXAIOU",[[-1,622,"  "]],[624,624],[622,622]]],[1563284540562,["GJX@GJXAIOU",[[-1,621,"\n"]],[622,622],[621,621]]],[1563284552979,["GJX@GJXAIOU",[[1,380,"- "]],[380,380],[382,382]]],[1563284556437,["GJX@GJXAIOU",[[1,662,"-"]],[662,662],[663,663]]],[1563284556859,["GJX@GJXAIOU",[[1,664," "]],[663,663],[664,664]]],[1563284582189,["GJX@GJXAIOU",[[1,810,"- "]],[810,810],[812,812]]],[1563284812546,["GJX@GJXAIOU",[[-1,772,"**"],[-1,804,"**"]],[774,804],[772,802]]],[1563284814546,["GJX@GJXAIOU",[[1,772,"=="],[1,802,"=="]],[772,802],[772,806]]],[1563284822874,["GJX@GJXAIOU",[[-1,842,"**"]],[844,844],[842,842]]],[1563284824625,["GJX@GJXAIOU",[[-1,871,"**"]],[873,873],[871,871]]],[1563284829503,["GJX@GJXAIOU",[[1,820,"=="],[1,871,"=="]],[820,871],[820,875]]],[1563284837793,["GJX@GJXAIOU",[[-1,913,"=="]],[915,915],[913,913]]],[1563284843657,["GJX@GJXAIOU",[[-1,879,"=="]],[881,881],[879,879]]],[1563284994148,["GJX@GJXAIOU",[[-1,1050,"\n"]],[1051,1051],[1050,1050]]],[1563284996444,["GJX@GJXAIOU",[[-1,1050,"  "]],[1050,1050],[1048,1048]]],[1563284996897,["GJX@GJXAIOU",[[-1,1047,"\n"]],[1048,1048],[1047,1047]]],[1563285004714,["GJX@GJXAIOU",[[-1,1069,"   "]],[1072,1072],[1069,1069]]],[1563285005244,["GJX@GJXAIOU",[[-1,1068,"\n"]],[1069,1069],[1068,1068]]],[1563285014891,["GJX@GJXAIOU",[[1,1052,"=="],[1,1078,"=="]],[1052,1078],[1052,1082]]],[1563285031887,["GJX@GJXAIOU",[[1,1138,"=="],[1,1194,"=="]],[1138,1194],[1138,1198]]],[1563285036514,["GJX@GJXAIOU",[[-1,1136,"**"],[-1,1198,"**"]],[1138,1198],[1136,1196]]],[1563285225019,["GJX@GJXAIOU",[[-1,1695,"\n"]],[1696,1696],[1695,1695]]],[1563285225897,["GJX@GJXAIOU",[[-1,1736,"\n"]],[1737,1737],[1736,1736]]],[1563285226771,["GJX@GJXAIOU",[[-1,1776,"\n"]],[1777,1777],[1776,1776]]],[1563285232546,["GJX@GJXAIOU",[[-1,2136,"\n"]],[2134,2134],[2133,2133]]],[1563285232771,["GJX@GJXAIOU",[[-1,2135,"\n"]],[2133,2133],[2132,2132]]],[1563285233164,["GJX@GJXAIOU",[[-1,2134,"\n"]],[2132,2132],[2131,2131]]],[1563285239446,["GJX@GJXAIOU",[[1,338,"---"]],[338,338],[341,341]]],[1563285242363,["GJX@GJXAIOU",[[-1,335,"  "]],[337,337],[335,335]]],[1563285252350,["GJX@GJXAIOU",[[1,2133,"---"]],[2133,2133],[2136,2136]]],[1563285289026,["GJX@GJXAIOU",[[-1,2258,"\t"]],[2259,2259],[2258,2258]]],[1563285289265,["GJX@GJXAIOU",[[-1,2258,"\n"]],[2258,2258],[2257,2257]]],[1563285297402,["GJX@GJXAIOU",[[-1,2296,"**"],[-1,2331,"**"]],[2298,2331],[2296,2329]]],[1563285301810,["GJX@GJXAIOU",[[1,2296,"=="],[1,2329,"=="]],[2296,2329],[2296,2333]]],[1563285307970,["GJX@GJXAIOU",[[-1,2257,"\n"]],[2257,2257],[2256,2256]]],[1563285378729,["GJX@GJXAIOU",[[-1,2357,"\n"]],[2358,2358],[2357,2357]]],[1563285379916,["GJX@GJXAIOU",[[-1,2354,"  \t"]],[2357,2357],[2354,2354]]],[1563285380284,["GJX@GJXAIOU",[[-1,2353,"\n"]],[2354,2354],[2353,2353]]],[1563285382367,["GJX@GJXAIOU",[[1,2353,"，"]],[2353,2353],[2354,2354]]],[1563285406424,["GJX@GJXAIOU",[[1,2521,"=="],[1,2552,"=="]],[2521,2552],[2521,2556]]],[1563285424803,["GJX@GJXAIOU",[[-1,2712,"【没有对象】"]],[2712,2718],[2712,2712]]],[1563285432120,["GJX@GJXAIOU",[[1,2257,"- "]],[2257,2257],[2259,2259]]],[1563285434989,["GJX@GJXAIOU",[[1,2513,"- "]],[2513,2513],[2515,2515]]],[1563285494682,["GJX@GJXAIOU",[[1,2721,"**"],[1,2754,"**"]],[2721,2754],[2721,2758]]],[1563285497005,["GJX@GJXAIOU",[[-1,2721,"**"],[-1,2756,"**"]],[2721,2758],[2721,2754]]],[1563285499641,["GJX@GJXAIOU",[[1,2721,"=="],[1,2754,"=="]],[2721,2754],[2721,2758]]],[1563285512300,["GJX@GJXAIOU",[[-1,2832,"【没有对象】"]],[2832,2838],[2832,2832]]],[1563285514714,["GJX@GJXAIOU",[[-1,2833,"\n"]],[2833,2833],[2832,2832]]],[1563285515778,["GJX@GJXAIOU",[[-1,2717,"\n"]],[2717,2717],[2716,2716]]],[1563286145027,["GJX@GJXAIOU",[[-1,3815,"\n"]],[3816,3816],[3815,3815]]],[1563286212123,["GJX@GJXAIOU",[[1,7292,"\n    "]],[7292,7292],[7297,7297]]],[1563286214499,["GJX@GJXAIOU",[[-1,7288,"    "],[1,7292,"\n"]],[7292,7292],[7289,7289]]],[1563286214907,["GJX@GJXAIOU",[[-1,7289,"\n"]],[7289,7289],[7288,7288]]],[1563286216639,["GJX@GJXAIOU",[[1,7288,"··"]],[7288,7288],[7290,7290]]],[1563286217708,["GJX@GJXAIOU",[[-1,7288,"··"]],[7290,7290],[7288,7288]]],[1563286219041,["GJX@GJXAIOU",[[1,7288,"```"]],[7288,7288],[7291,7291]]],[1563286219074,["GJX@GJXAIOU",[[1,7291,"language\n```\n"]],[7291,7291],[7291,7299]]],[1563286220055,["GJX@GJXAIOU",[[-1,7291,"language"],[1,7299,"j"]],[7291,7299],[7292,7292]]],[1563286220462,["GJX@GJXAIOU",[[1,7292,"ava"]],[7292,7292],[7295,7295]]],[1563286223102,["GJX@GJXAIOU",[[-1,7296,"```"]],[7296,7299],[7296,7296]]],[1563286224914,["GJX@GJXAIOU",[[1,7378,"```"]],[7378,7378],[7381,7381]]],[1563286226611,["GJX@GJXAIOU",[[-1,7297,"\n"]],[7297,7297],[7296,7296]]],[1563286227075,["GJX@GJXAIOU",[[-1,7296,"\n"]],[7296,7296],[7295,7295]]],[1563286233610,["GJX@GJXAIOU",[[-1,7298,"  "],[-1,7314,"  "],[-1,7364,"\t"],[-1,7366,"  "],[-1,7297," \t"]],[7300,7375],[7297,7297]]],[1563286238563,["GJX@GJXAIOU",[[-1,7225," "]],[7226,7226],[7225,7225]]],[1563286241227,["GJX@GJXAIOU",[[1,7287,"\n"]],[7286,7286],[7287,7287]]],[1563286244399,["GJX@GJXAIOU",[[-1,7287,"\n"]],[7288,7288],[7287,7287]]],[1563286245508,["GJX@GJXAIOU",[[1,7287,"\n"]],[7287,7287],[7288,7288]]],[1563286248155,["GJX@GJXAIOU",[[-1,7366,"\n"]],[7367,7367],[7366,7366]]],[1563286250628,["GJX@GJXAIOU",[[1,7366,"\n"]],[7366,7366],[7367,7367]]],[1563286256397,["GJX@GJXAIOU",[[-1,7296," class Demo6 {\n      public static void main(String[] args) {\n\t\n  \t}\n}"]],[7296,7366],[7296,7296]]],[1563286258283,["GJX@GJXAIOU",[[-1,7296,"\n"]],[7296,7296],[7295,7295]]],[1563286262494,["GJX@GJXAIOU",[[-1,7288,"```java\n```"]],[7288,7299],[7288,7288]]],[1563286263374,["GJX@GJXAIOU",[[1,7288,"```"]],[7288,7288],[7291,7291]]],[1563286263407,["GJX@GJXAIOU",[[1,7291,"language\n```\n"]],[7291,7291],[7291,7299]]],[1563286263888,["GJX@GJXAIOU",[[-1,7291,"language"],[1,7299,"j"]],[7291,7299],[7292,7292]]],[1563286265168,["GJX@GJXAIOU",[[1,7292,"ava"]],[7292,7292],[7295,7295]]],[1563286265284,["GJX@GJXAIOU",[[1,7296,"\n"]],[7295,7295],[7296,7296]]],[1563286266274,["GJX@GJXAIOU",[[1,7296," class Demo6 {\n      public static void main(String[] args) {\n\t\n  \t}\n}"]],[7296,7296],[7366,7366]]],[1563286326381,[null,[[-1,7371,"mo6 {\n        public static void main(String[] args) {\n\t\t\n    \t}\n\t}\n```"]],[7371,7371],[7371,7371]]],[1563286326381,[null,[[1,7371,"mo6 {\n        public static void main(String[] args) {\n\t\t\n    \t}\n\t}\n```"]],[7371,7371],[7371,7371]]],[1563286269419,["GJX@GJXAIOU",[[-1,7296," "]],[7297,7297],[7296,7296]]],[1563286277947,["GJX@GJXAIOU",[[-1,7372,"\t"],[-1,7431,"\t"],[-1,7456,"\t"],[-1,7458,"\t"],[-1,7520,"\t"],[-1,7534,"\t"],[-1,7571,"\t"],[-1,7581,"\t"],[-1,7644,"\t"],[-1,7651,"\t"],[-1,7653,"\t"],[-1,7710,"\t"],[-1,7712,"\t"],[-1,7775,"\t"]],[7373,7803],[7372,7789]]],[1563286315767,["GJX@GJXAIOU",[[1,4015,"s "]],[4015,4015],[4016,4016]]],[1563286315940,["GJX@GJXAIOU",[[1,4016,"i"]],[4016,4016],[4017,4017]]],[1563286316563,["GJX@GJXAIOU",[[-1,4015,"si"]],[4017,4017],[4015,4015]]],[1563286318910,["GJX@GJXAIOU",[[1,4015,"四、"]],[4015,4015],[4017,4017]]],[1563286324558,["GJX@GJXAIOU",[[1,5165,"五、"]],[5165,5165],[5167,5167]]],[1563286386385,[null,[[-1,7375,"mo {\n        public static void main(String[] args) {\n\t"],[-1,7432,"   \t}\n\t}\n```\t\n\t"],[1,7459,"饰"],[1,7460,"，"],[-1,7503,"\t"],[1,7521,"序"],[-1,7527,"\t"],[-1,7529,"\t"],[1,7534,"i"],[1,7570,"可"],[1,7579,"m"],[-1,7588,"\t"],[-1,7602,"\t"],[-1,7639,"\t"],[1,7640," "],[-1,7647,"\t"],[1,7648,"\nv"],[1,7704,"并"],[1,7705,"需"],[-1,7707,"\t"],[-1,7714,"\t"],[-1,7716,"\t"],[1,7767,"C"],[-1,7772,"\t"],[-1,7774,"\t"],[-1,7837,"\t"]],[7375,7375],[7837,7837]]],[1563286386385,[null,[[1,7375,"mo {\n        public static void main(String[] args) {\n\t"],[1,7377,"   \t}\n\t}\n```\t\n\t"],[-1,7389,"饰"],[-1,7391,"，"],[1,7435,"\t"],[-1,7452,"序"],[1,7459,"\t"],[1,7460,"\t"],[-1,7464,"i"],[-1,7501,"可"],[-1,7511,"m"],[1,7521,"\t"],[1,7534,"\t"],[1,7570,"\t"],[-1,7570," "],[1,7578,"\t"],[-1,7578,"\nv"],[-1,7636,"并"],[-1,7638,"需"],[1,7641,"\t"],[1,7647,"\t"],[1,7648,"\t"],[-1,7698,"C"],[1,7704,"\t"],[1,7705,"\t"],[1,7767,"\t"]],[7837,7837],[7375,7375]]],[1563286334502,["GJX@GJXAIOU",[[1,7220,"六、"]],[7220,7220],[7222,7222]]],[1563286338112,["GJX@GJXAIOU",[[1,7283,"其"]],[7283,7283],[7284,7284]]],[1563286338595,["GJX@GJXAIOU",[[-1,7283,"其"]],[7284,7284],[7283,7283]]],[1563286340245,["GJX@GJXAIOU",[[1,7283,"七、"]],[7283,7283],[7285,7285]]],[1563286347597,["GJX@GJXAIOU",[[1,7381,"- "]],[7381,7381],[7383,7383]]],[1563286350629,["GJX@GJXAIOU",[[1,7466,"- "]],[7466,7466],[7468,7468]]],[1563286354206,["GJX@GJXAIOU",[[1,7587,"- "]],[7587,7587],[7589,7589]]],[1563286357026,["GJX@GJXAIOU",[[1,7658,"- "]],[7658,7658],[7660,7660]]],[1563286360128,["GJX@GJXAIOU",[[1,7717,"- "]],[7717,7717],[7719,7719]]],[1563286446384,[null,[[-1,7379,"mo-  {\n        public static void main(String[] args) {\n\t"],[-1,7438,"   \t}\n\t}\n```\t\n\t"],[1,7453,"- "],[-1,7465,"符- "],[1,7468,"饰符，"],[-1,7511,"\t"],[1,7529,"序"],[-1,7535,"\t\n\t"],[1,7538,"\n- "],[1,7542,"i"],[1,7578,"可"],[-1,7587,"- "],[1,7589,"m"],[-1,7598,"\t"],[-1,7612,"\t"],[-1,7649,"\t"],[1,7650," "],[-1,7657,"\t"],[1,7658,"\n"],[1,7660,"v"],[-1,7716,"不- "],[1,7719,"并不需"],[-1,7721,"\t"],[-1,7728,"\t\n\t"],[1,7731,"\n- "],[1,7781,"C"],[-1,7786,"\t\n\t"],[1,7789,"\n- "],[-1,7851,"\t"]],[7379,7379],[7851,7851]]],[1563286446384,[null,[[1,7379,"mo-  {\n        public static void main(String[] args) {\n\t"],[1,7381,"   \t}\n\t}\n```\t\n\t"],[-1,7381,"- "],[1,7395,"符- "],[-1,7395,"饰符，"],[1,7441,"\t"],[-1,7458,"序"],[1,7465,"\t\n\t"],[-1,7465,"\n- "],[-1,7472,"i"],[-1,7509,"可"],[1,7519,"- "],[-1,7519,"m"],[1,7529,"\t"],[1,7542,"\t"],[1,7578,"\t"],[-1,7578," "],[1,7586,"\t"],[-1,7586,"\n"],[-1,7589,"v"],[1,7646,"不- "],[-1,7646,"并不需"],[1,7651,"\t"],[1,7657,"\t\n\t"],[-1,7657,"\n- "],[-1,7710,"C"],[1,7716,"\t\n\t"],[-1,7716,"\n- "],[1,7781,"\t"]],[7851,7851],[7379,7379]]],[1563286404725,["GJX@GJXAIOU",[[-1,7829," "]],[7829,7829],[7828,7828]]],[1563286411773,["GJX@GJXAIOU",[[1,7819,"把"]],[7819,7819],[7820,7820]]],[1563286412585,["GJX@GJXAIOU",[[-1,7819,"把"]],[7820,7820],[7819,7819]]],[1563286413423,["GJX@GJXAIOU",[[1,7819,"吧"]],[7819,7819],[7820,7820]]],[1563286414106,["GJX@GJXAIOU",[[-1,7819,"吧"]],[7820,7820],[7819,7819]]],[1563286415949,["GJX@GJXAIOU",[[1,7819,"八、"]],[7819,7819],[7821,7821]]],[1563286419594,["GJX@GJXAIOU",[[-1,7810,"   \t\t"]],[7815,7815],[7810,7810]]],[1563286420562,["GJX@GJXAIOU",[[-1,7809," "],[1,7810,"\n"]],[7810,7810],[7810,7810]]],[1563286421254,["GJX@GJXAIOU",[[1,7810,"---"]],[7810,7810],[7813,7813]]],[1563286426251,["GJX@GJXAIOU",[[1,7280,"\n"]],[7279,7279],[7280,7280]]],[1563286426846,["GJX@GJXAIOU",[[1,7280,"---"]],[7280,7280],[7283,7283]]],[1563286429627,["GJX@GJXAIOU",[[-1,7213,"   "],[1,7216,"\n"]],[7216,7216],[7214,7214]]],[1563286430334,["GJX@GJXAIOU",[[1,7214,"---"]],[7214,7214],[7217,7217]]],[1563286431650,["GJX@GJXAIOU",[[1,7218,"\n"]],[7217,7217],[7218,7218]]],[1563286437610,["GJX@GJXAIOU",[[-1,5153,"        "],[1,5161,"\n"]],[5161,5161],[5154,5154]]],[1563286438877,["GJX@GJXAIOU",[[1,5154,"--- "]],[5154,5154],[5158,5158]]],[1563286439946,["GJX@GJXAIOU",[[1,5159,"\n"]],[5158,5158],[5159,5159]]],[1563286445372,["GJX@GJXAIOU",[[1,4010,"---"]],[4010,4010],[4013,4013]]],[1563286482991,[null,[[-1,7386,"mo-  {\n        public static void main(String[] args) {\n\t"],[-1,7445,"   \t}\n\t}\n```\t\n\t"],[1,7460,"- "],[-1,7472,"符- "],[1,7475,"饰符，"],[-1,7518,"\t"],[1,7536,"序"],[-1,7542,"\t\n\t"],[1,7545,"\n- "],[1,7549,"i"],[1,7585,"可"],[-1,7594,"- "],[1,7596,"m"],[-1,7605,"\t"],[-1,7619,"\t"],[-1,7656,"\t"],[1,7657," "],[-1,7664,"\t"],[1,7665,"\n"],[1,7667,"v"],[-1,7723,"不- "],[1,7726,"并不需"],[-1,7728,"\t"],[-1,7735,"\t\n\t"],[1,7738,"\n- "],[1,7788,"C"],[-1,7793,"\t\n\t"],[1,7796,"\n- "],[-1,7816,"\n---"],[1,7820,"n函数运行需"],[-1,7824,"八、"],[1,7836,"是"],[-1,7857,"\t"],[-1,7886,"    \t\t"],[1,7892,"\n---"],[1,7896,"八、"],[-1,7903," "]],[7386,7386],[7903,7903]]],[1563286482991,[null,[[1,7386,"mo-  {\n        public static void main(String[] args) {\n\t"],[1,7388,"   \t}\n\t}\n```\t\n\t"],[-1,7388,"- "],[1,7402,"符- "],[-1,7402,"饰符，"],[1,7448,"\t"],[-1,7465,"序"],[1,7472,"\t\n\t"],[-1,7472,"\n- "],[-1,7479,"i"],[-1,7516,"可"],[1,7526,"- "],[-1,7526,"m"],[1,7536,"\t"],[1,7549,"\t"],[1,7585,"\t"],[-1,7585," "],[1,7593,"\t"],[-1,7593,"\n"],[-1,7596,"v"],[1,7653,"不- "],[-1,7653,"并不需"],[1,7658,"\t"],[1,7664,"\t\n\t"],[-1,7664,"\n- "],[-1,7717,"C"],[1,7723,"\t\n\t"],[-1,7723,"\n- "],[1,7746,"\n---"],[-1,7746,"n函数运行需"],[1,7756,"八、"],[-1,7766,"是"],[1,7788,"\t"],[1,7816,"    \t\t"],[-1,7816,"\n---"],[-1,7824,"八、"],[1,7833," "]],[7903,7903],[7386,7386]]],[1563286447428,["GJX@GJXAIOU",[[-1,4009,"\n"]],[4009,4009],[4008,4008]]],[1563286447572,["GJX@GJXAIOU",[[-1,4008,"\n"]],[4008,4008],[4007,4007]]]],null,"GJX@GJXAIOU"]]}