{"compress":true,"commitItems":[["ca084ce7-5851-4a95-9e79-49b2be5b43b7",1568966718201,"# [今日课程大纲]\n\n**自定义拦截器登录状态验证**\n\n# [知识点详解]\n\n## 一.自定义拦截器\n\nAOP拦截的是方法，这里拦截的是请求\n\n1. 跟过滤器比较像的技术.\n\n2. 发送**请求**时被拦截器拦截，拦截之后可以在控制器的前后添加额外功能.\n\n2.1 跟 AOP 区分开.AOP 在特定方法前后进行扩充(主要针对对 ServiceImpl)，特定方法指的是：只要这个方法可以被spring管理，就可以在这个方法前后进行扩充\n\n2.2 拦截器,请求的拦截.针对点是控制器方法.(主要针对 Controller)\n\n3. SpringMVC 拦截器和Filter 的区别\n\n3.1 拦截器只能拦截 Controller\n\n3.2 Filter 可以拦截任何请求. 4.实现自定义拦截器的步骤:\n\n4.1     |  |\n|  | ![文本框: public class DemoInterceptor implements\n\n\nHandlerInterceptor {\n\n\n//在进入控制器之前执行\n\n//如果返回值为false,阻止进入控制器\n\n//控制代码@Override\n\n](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image001.gif) | \n新建类实现 HandlerInterceptor\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif)\n\n**public boolean** preHandle(HttpServletRequest arg0, HttpServletResponse  arg1,  Object  arg2)  **throws** Exception\n\n{\n\nSystem.**_out_**.println(\"arg2:\"+arg2); System.**_out_**.println(\"preHandle\"); **return true**;\n\n}\n\n//控制器执行完成,进入到jsp  之前执行.\n\n//日志记录.\n\n//敏感词语过滤@Override\n\n**public void** postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)\n\n**throws** Exception {\n\nSystem.**_out_**.println(\"往\"+arg3.getViewName()+\"跳转\n\n\");\n\nSystem.**_out_**.println(\"model 的值\n\n\"+arg3.getModel().get(\"model\")); String word =\n\narg3.getModel().get(\"model\").toString();\n\n![文本框: String newWord = word.replace(\"祖国\", \"**\"); arg3.getModel().put(\"model\", newWord);\n\n//\targ3.getModel().put(\"model\", \"修改后的内容\"); System.out.println(\"postHandle\");\n\n}\n\n\n//jsp 执行完成后执行\n\n//记录执行过程中出现的异常.\n\n//可以把异常记录到日志中@Override\n\npublic void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)\n\nthrows Exception {\n\n\nSystem.out.println(\"afterCompletion\"+arg3.getMessag e());\n\n}\n\n\n}\n\n](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image003.gif)\n\n4.2 在springmvc.xml 配置拦截器需要拦截哪些控制器\n\n4.2.1     |  |\n|  | ![文本框: <mvc:interceptors>\n\n<bean class=\"com.bjsxt.interceptor.DemoInterceptor\"></bean>\n\n](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image004.gif) | \n拦截所有控制器\n\n![文本框: </mvc:interceptors>](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image005.gif)\n\n4.2.2     |  |\n|  | ![文本框: <mvc:interceptors>\n\n\n<mvc:interceptor>\n\n\n<mvc:mapping path=\"/demo\"/>\n\n\n<mvc:mapping path=\"/demo1\"/>\n\n\n<mvc:mapping path=\"/demo2\"/>\n\n\n<bean class=\"com.bjsxt.interceptor.DemoInterceptor\"></bean>\n\n</mvc:interceptor>\n\n\n</mvc:interceptors>\n\n](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image006.gif) | \n拦截特定的的url\n\n## 二. 拦截器栈\n\n1. 多个拦截器同时生效时,组成了拦截器栈\n\n2. 顺序:先进后出.\n\n3. 执行顺序和在springmvc.xml 中配置顺序有关\n\n4. 设置先配置拦截器A 在配置拦截器B 执行顺序为\n\npreHandle(A)  --> preHandle(B)  -->  控制器方法  -->  postHandle(B)\n\n-->  postHanle(A)  -->  JSP  -->  afterCompletion(B)  -->  afterCompletion(A)\n\n## 三.SpringMVC 运行原理\n\n1\\. 文字解释\n\n如果在  web.xml 中设置  DispatcherServlet 的<url-pattern>为/时,当用户发起请求, 请求一个控制器时, 首先会执行  DispatcherServlet. 由DispatcherServlet 调  用  HandlerMapping 的DefaultAnnotationHandlerMapping 解  析  URL, 解  析  后  调  用HandlerAdatper 组  件  的  AnnotationMethodHandlerAdapter 去  调  用Controller 中的  HandlerMethod.当  HandlerMethod 执行完成后会返回View,返回的view会被  ViewResovler 进行视图解析,解析后调用  jsp 对应的.class 文件并运行,最终把运行.class 文件的结果响应给客户端.\n\n以上就是 springmvc 运行原理\n\n## 四.SpringMVC 对 Date 类型转换.\n\n1. 在springmvc.xml 中配置,代码中不需要做任何修改\n\n1.1 必须额外导入 joda-time.jar\n\n1.2     |  |\n|  | ![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image007.gif) | \n时间类型 java.sql.Date\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image008.gif)\n\n<bean id=_\"conversionService\"_\n\nclass=_\"org.springframework.format.support.Formattin gConversionServiceFactoryBean\"_>\n\n<property name=_\"registerDefaultFormatters\"_ value=_\"false\"_ />\n\n<property name=_\"formatters\"_>\n\n<set>\n\n<bean\n\nclass=_\"org.springframework.format.number.NumberForm atAnnotationFormatterFactory\"_ />\n\n</set>\n\n</property>\n\n<property name=_\"formatterRegistrars\"_>\n\n<set>\n\n<bean\n\nclass=_\"org.springframework.format.datetime.joda.Jod aTimeFormatterRegistrar\"_>\n\n![文本框: <property name=\"dateFormatter\">\n\n\n<bean\n\n\nclass=\"org.springframework.format.datetime.joda.Dat eTimeFormatterFactoryBean\">\n\n<property name=\"pattern\" value=\"yyyy-MM-dd\" />\n\n</bean>\n\n\n</property>\n\n\n</bean>\n\n\n</set>\n\n\n</property>\n\n\n</bean>\n\n](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image009.gif)\n\n2. 使 用 注 解 . 在 需 要 转 换 的 参 数 或 实 体 类 属 性 上 添 加\n\n@DateTimeFormatter(pattern=”表达式”)\n\n2.1     |  |\n|  | ![文本框: @RequestMapping(\"demo\")\n\n\npublic String\n\n\ndemo(@DateTimeFormat(pattern=\"yyyy-MM-dd\") Date time){ System.out.println(time);\n\nreturn \"abc.jsp\";\n\n\n}\n\n](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif) | \n使用Date 参数接收\n\n2.2     |  |\n|  | ![文本框: @RequestMapping(\"demo\")\n\n\npublic String demo( Demo1 demo){ System.out.println(demo); return \"abc.jsp\";\n\n}\n\n](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image011.gif) | \n在实体类中\n\n2.3     |  | \n\n**public class** Demo1 { @DateTimeFormat(pattern=\"yyyy/MM/dd\")\n\n**private** Date time;\n\n |   | 注意地方:\n\n2.3.1 不需要导入额外jar\n\n2.3.2 Date 是java.util.Date",[[1568966701345,["GJX@GJXAIOU",[[-1,0,"# [今日课程大纲]"]],[0,10],[0,0]]],[1568966703673,["GJX@GJXAIOU",[[1,0,"*"],[-1,1,""],[-1,348,"    "],[1,352,"    "],[-1,1817,"    "],[1,1821,"    "],[-1,2122,"    "],[1,2126,"    "],[-1,2617," "],[1,2618," "],[-1,3270,"    "],[1,3274,"    "],[-1,4356,"    "],[1,4360,"    "],[-1,4623,"    "],[1,4627,"    "],[-1,4844,"    "],[1,4848,"    "],[-1,4947," "],[1,4948," "]],[0,0],[1,1]]],[1568966703796,["GJX@GJXAIOU",[[1,0,"*"]],[1,1],[2,2]]],[1568966704530,["GJX@GJXAIOU",[[1,0,"**zhog"]],[2,2],[6,6]]],[1568966705450,["GJX@GJXAIOU",[[-1,2,"zhog"]],[6,6],[2,2]]],[1568966711485,["GJX@GJXAIOU",[[1,2,"重要知识点"]],[2,2],[7,7]]],[1568966713248,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1568966713385,["GJX@GJXAIOU",[[1,0,"\n"]],[1,1],[2,2]]],[1568966717091,["GJX@GJXAIOU",[[1,0,"# "]],[0,0],[2,2]]],[1568966725388,["GJX@GJXAIOU",[[1,2,"FrameDay03——3"]],[2,2],[15,15]]],[1568966726521,["GJX@GJXAIOU",[[-1,12,"——3"]],[15,15],[12,12]]],[1568966733577,["GJX@GJXAIOU",[[1,12,"_3 SpringMVC"]],[12,12],[24,24]]],[1568966734282,["GJX@GJXAIOU",[[1,26,"\n"]],[24,24],[25,25]]],[1568966738209,["GJX@GJXAIOU",[[-1,38,"**"]],[40,40],[38,38]]],[1568966738624,["GJX@GJXAIOU",[[-1,37,"\n"]],[38,38],[37,37]]],[1568966741826,["GJX@GJXAIOU",[[-1,49,"**"]],[51,51],[49,49]]],[1568966744721,["GJX@GJXAIOU",[[1,43,"\n"]],[43,43],[44,44]]],[1568966748337,["GJX@GJXAIOU",[[1,37,"* "],[1,44,"* "]],[37,50],[39,54]]],[1568966782248,["GJX@GJXAIOU",[[-1,56,"# [知识点详解]"]],[56,65],[56,56]]],[1568966784175,["GJX@GJXAIOU",[[-1,57,"\n"]],[57,57],[56,56]]],[1568966789648,["GJX@GJXAIOU",[[-1,61,"."]],[62,62],[61,61]]],[1568966790232,["GJX@GJXAIOU",[[1,61,"/"]],[61,61],[62,62]]],[1568966791335,["GJX@GJXAIOU",[[-1,61,"/"]],[62,62],[61,61]]],[1568966792027,["GJX@GJXAIOU",[[1,61,"、"]],[61,61],[62,62]]],[1568966796665,["GJX@GJXAIOU",[[1,70,"**"],[1,88,"**"]],[70,88],[70,92]]],[1568966799999,["GJX@GJXAIOU",[[-1,82,"这里"]],[84,84],[82,82]]],[1568966803862,["GJX@GJXAIOU",[[1,82,"Spring "]],[82,82],[88,88]]],[1568966807626,["GJX@GJXAIOU",[[1,88,"MVC拦截器"]],[88,88],[94,94]]],[1568966807658,["GJX@GJXAIOU",[[1,91," "]],[94,94],[95,95]]],[1568966810073,["GJX@GJXAIOU",[[-1,95," "]],[96,96],[95,95]]],[1568966815808,["GJX@GJXAIOU",[[-1,105,"1. "]],[105,108],[105,105]]],[1568966816473,["GJX@GJXAIOU",[[1,105,"- "]],[105,105],[107,107]]],[1568966818230,["GJX@GJXAIOU",[[-1,117,"."]],[118,118],[117,117]]],[1568966818609,["GJX@GJXAIOU",[[1,117,"；"]],[117,117],[118,118]]],[1568966821063,["GJX@GJXAIOU",[[-1,120,"2."]],[120,122],[120,120]]],[1568966821313,["GJX@GJXAIOU",[[1,120,"-"]],[120,120],[121,121]]],[1568966822535,["GJX@GJXAIOU",[[-1,119,"\n"]],[119,119],[118,118]]],[1568966825391,["GJX@GJXAIOU",[[-1,156,"."]],[157,157],[156,156]]],[1568966825778,["GJX@GJXAIOU",[[1,156,"；"]],[156,156],[157,157]]],[1568966831311,["GJX@GJXAIOU",[[-1,159,"2.1"]],[159,162],[159,159]]],[1568966831703,["GJX@GJXAIOU",[[-1,158,"\n"]],[159,159],[158,158]]],[1568966832465,["GJX@GJXAIOU",[[1,159,"  "]],[158,158],[160,160]]],[1568966832747,["GJX@GJXAIOU",[[1,160,"-"]],[160,160],[161,161]]],[1568966832897,["GJX@GJXAIOU",[[1,162," "]],[161,161],[162,162]]],[1568966835439,["GJX@GJXAIOU",[[-1,172,"."]],[173,173],[172,172]]],[1568966836106,["GJX@GJXAIOU",[[1,172,"；\n  "]],[172,172],[176,176]]],[1568966838593,["GJX@GJXAIOU",[[1,176,"- "]],[176,176],[178,178]]],[1568966842624,["GJX@GJXAIOU",[[-1,198,"对"]],[199,199],[198,198]]],[1568966846738,["GJX@GJXAIOU",[[1,210,"进行"]],[210,210],[212,212]]],[1568966846769,["GJX@GJXAIOU",[[1,210," "]],[212,212],[213,213]]],[1568966850652,["GJX@GJXAIOU",[[1,213,"扩充"]],[213,213],[215,215]]],[1568966862644,["GJX@GJXAIOU",[[1,217,"其中的"]],[217,217],[220,220]]],[1568966863345,["GJX@GJXAIOU",[[-1,219,"的"]],[220,220],[219,219]]],[1568966867123,["GJX@GJXAIOU",[[1,259,"；"]],[259,259],[260,260]]],[1568966869945,["GJX@GJXAIOU",[[-1,262,"2.2 "]],[262,266],[262,262]]],[1568966870384,["GJX@GJXAIOU",[[-1,261,"\n"]],[262,262],[261,261]]],[1568966871427,["GJX@GJXAIOU",[[1,261,"- "]],[261,261],[263,263]]],[1568966872216,["GJX@GJXAIOU",[[1,261,"  "]],[263,263],[265,265]]],[1568966875291,["GJX@GJXAIOU",[[1,265,"Spring "]],[265,265],[271,271]]],[1568966876467,["GJX@GJXAIOU",[[1,271,"MVC"]],[271,271],[274,274]]],[1568966879697,["GJX@GJXAIOU",[[-1,278,","]],[279,279],[278,278]]],[1568966880291,["GJX@GJXAIOU",[[1,278,"；"]],[278,278],[279,279]]],[1568966880731,["GJX@GJXAIOU",[[-1,278,"；"]],[279,279],[278,278]]],[1568966881049,["GJX@GJXAIOU",[[1,278,"："]],[278,278],[279,279]]],[1568966883312,["GJX@GJXAIOU",[[-1,284,"."]],[285,285],[284,284]]],[1568966883899,["GJX@GJXAIOU",[[1,284,"，"]],[284,284],[285,285]]],[1568966886968,["GJX@GJXAIOU",[[-1,294,"."]],[295,295],[294,294]]],[1568966893387,["GJX@GJXAIOU",[[1,311,"；"]],[311,311],[312,312]]],[1568966913889,["GJX@GJXAIOU",[[-1,314,"3. "]],[314,317],[314,314]]],[1568966914347,["GJX@GJXAIOU",[[1,314,"- "]],[314,314],[316,316]]],[1568966935712,["GJX@GJXAIOU",[[-1,341,"\n3.1 "]],[341,346],[341,341]]],[1568966936764,["GJX@GJXAIOU",[[1,341,"  - "]],[341,341],[345,345]]],[1568966939234,["GJX@GJXAIOU",[[1,363,"；"]],[363,363],[364,364]]],[1568966943984,["GJX@GJXAIOU",[[-1,365,"\n3.2"]],[365,369],[365,365]]],[1568966944282,["GJX@GJXAIOU",[[1,365,"-"]],[365,365],[366,366]]],[1568966944484,["GJX@GJXAIOU",[[1,367," "]],[366,366],[367,367]]],[1568966945466,["GJX@GJXAIOU",[[1,365,"  "]],[367,367],[369,369]]],[1568966947337,["GJX@GJXAIOU",[[-1,369," "]],[370,370],[369,369]]],[1568966950192,["GJX@GJXAIOU",[[-1,384,"."]],[385,385],[384,384]]],[1568966952025,["GJX@GJXAIOU",[[1,384,"；\n  \n   "]],[384,384],[392,392]]],[1568966955289,["GJX@GJXAIOU",[[-1,389,"    4."]],[389,395],[389,389]]],[1568966959345,["GJX@GJXAIOU",[[1,389,"**"],[1,401,"**"]],[389,401],[389,405]]],[1568968888751,["GJX@GJXAIOU",[[-1,407,"4.1     |  |\n|  | ![文本框: public class DemoInterceptor implements"]],[407,471],[407,407]]],[1568968905249,["GJX@GJXAIOU",[[1,407,"- 首先新建类并实现 Handlerin"]],[407,407],[427,427]]],[1568968906287,["GJX@GJXAIOU",[[-1,425,"in"]],[427,427],[425,425]]],[1568968912482,["GJX@GJXAIOU",[[1,425,"Interceptor;"]],[425,425],[437,437]]],[1568968913153,["GJX@GJXAIOU",[[-1,436,";"]],[437,437],[436,436]]],[1568968913587,["GJX@GJXAIOU",[[1,436,"；"]],[436,436],[437,437]]],[1568968941144,["GJX@GJXAIOU",[[1,438,"·"]],[438,438],[439,439]]],[1568968942215,["GJX@GJXAIOU",[[-1,438,"·"]],[439,439],[438,438]]],[1568968943090,["GJX@GJXAIOU",[[1,438,"```"]],[438,438],[441,441]]],[1568968943120,["GJX@GJXAIOU",[[1,441,"language\n```\n"]],[441,441],[441,449]]],[1568968944448,["GJX@GJXAIOU",[[-1,441,"language"],[1,449,"j"]],[441,449],[442,442]]],[1568968944811,["GJX@GJXAIOU",[[1,442,"ava"]],[442,442],[445,445]]],[1568968944943,["GJX@GJXAIOU",[[1,446,"\n"]],[445,445],[446,446]]],[1568968947374,["GJX@GJXAIOU",[[1,446,"package com.bjsxt.interceptor;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.ModelAndView;\n\n// 步骤一：实现 HandlerInterceptor, 同时添加未实现方法\npublic class DemoInterceptor implements HandlerInterceptor {\n\t// 该方法在进入控制器之前执行\n\t// 如果返回值为false,阻止进入控制器\n\t// 所有控制代码写在这里，什么情况可以访问路径，什么情况不能访问路径；\n\t@Override\n\t// Object 参数含义，就是拦截器拦截的方法名称（全称）\n\tpublic boolean preHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2) throws Exception {\n\t\tSystem.out.println(\"arg2:\"+arg2);\n\t\tSystem.out.println(\"preHandle\");\n\t\treturn true;\n\t}\n\t// 控制器执行完成,进入到jsp之前执行.\n\t// 作用可以是日志记录.\n\t// 敏感词语过滤\n\t@Override\n\tpublic void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)\n\t\t\tthrows Exception {\n\t\t// 可以取到视图的值\n\t\tSystem.out.println(\"往\"+arg3.getViewName()+\"跳转\");\n\t\t// 可以取到 model 的值，因为 getModel() 返回值为 Map，因此可以通过 get(键) 获取到值；值能改\n\t\tSystem.out.println(\"model的值\"+arg3.getModel().get(\"model\"));\n\t\targ3.getModel().put(\"model\", \"修改后的内容\");\n\t\tString word = arg3.getModel().get(\"model\").toString();\n\t\tString newWord = word.replace(\"祖国\", \"**\");\n\t\targ3.getModel().put(\"model\", newWord);\n\n\t\tSystem.out.println(\"postHandle\");\n\t}\n\t// jsp执行完成后执行\n\t//记录执行过程中出现的异常.\n\t//可以把异常记录到日志中\n\t@Override\n\tpublic void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)\n\t\t\tthrows Exception {\n\t\t// 可以通过 arg3 是否为 NULL 判断是否出现异常；\n\t\tSystem.out.println(\"arg3:\"+arg3);\n\t\tSystem.out.println(\"afterCompletion\"+arg3.getMessage());\n\t}\n}\n"]],[446,446],[2038,2038]]],[1568968971534,["GJX@GJXAIOU",[[1,1716,"\n\t"]],[1714,1714],[1716,1716]]],[1568968974078,["GJX@GJXAIOU",[[1,1109,"\n\t"]],[1107,1107],[1109,1109]]],[1568969011670,["GJX@GJXAIOU",[[-1,2049,"HandlerInterceptor {\n\n\n//在进入控制器之前执行\n\n//如果返回值为false,阻止进入控制器\n\n//控制代码@Override\n\n](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image001.gif) | \n新建类实现 HandlerInterceptor\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif)\n\n**public boolean** preHandle(HttpServletRequest arg0, HttpServletResponse  arg1,  Object  arg2)  **throws** Exception\n\n{\n\nSystem.**_out_**.println(\"arg2:\"+arg2); System.**_out_**.println(\"preHandle\"); **return true**;\n\n}\n\n//控制器执行完成,进入到jsp  之前执行.\n\n//日志记录.\n\n//敏感词语过滤@Override\n\n**public void** postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)\n\n**throws** Exception {\n\nSystem.**_out_**.println(\"往\"+arg3.getViewName()+\"跳转\n\n\");\n\nSystem.**_out_**.println(\"model 的值\n\n\"+arg3.getModel().get(\"model\")); String word =\n\narg3.getModel().get(\"model\").toString();\n\n![文本框: String newWord = word.replace(\"祖国\", \"**\"); arg3.getModel().put(\"model\", newWord);\n\n//\targ3.getModel().put(\"model\", \"修改后的内容\"); System.out.println(\"postHandle\");\n\n}\n\n\n//jsp 执行完成后执行\n\n//记录执行过程中出现的异常.\n\n//可以把异常记录到日志中@Override\n\npublic void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)\n\nthrows Exception {\n\n\nSystem.out.println(\"afterCompletion\"+arg3.getMessag e());\n\n}\n\n\n}\n\n](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image003.gif)\n"]],[2049,3413],[2049,2049]]],[1568969014014,["GJX@GJXAIOU",[[-1,2050,"4.2"]],[2050,2053],[2050,2050]]],[1568969014239,["GJX@GJXAIOU",[[-1,2049,"\n"]],[2050,2050],[2049,2049]]],[1568969014783,["GJX@GJXAIOU",[[-1,2048,"\n"]],[2049,2049],[2048,2048]]],[1568969015649,["GJX@GJXAIOU",[[1,2048,"-"]],[2048,2048],[2049,2049]]],[1568969017161,["GJX@GJXAIOU",[[1,2050," r "]],[2049,2049],[2052,2052]]],[1568969017655,["GJX@GJXAIOU",[[1,2052,"anho"]],[2052,2052],[2056,2056]]],[1568969019702,["GJX@GJXAIOU",[[-1,2051,"ranho "]],[2056,2056],[2051,2051]]],[1568969020219,["GJX@GJXAIOU",[[1,2051,"r "]],[2051,2051],[2052,2052]]],[1568969020432,["GJX@GJXAIOU",[[1,2052,"an"]],[2052,2052],[2054,2054]]],[1568969022110,["GJX@GJXAIOU",[[-1,2051,"ran "]],[2054,2054],[2051,2051]]],[1568969023488,["GJX@GJXAIOU",[[1,2051,"然后"]],[2051,2051],[2053,2053]]],[1568969060890,["GJX@GJXAIOU",[[-1,2084,"4.2.1     |  |\n|  | ![文本框: <mvc:interceptors>\n\n<bean class=\"com.bjsxt.interceptor.DemoInterceptor\"></bean>\n\n](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image004.gif) | \n"]],[2083,2273],[2083,2083]]],[1568969069247,["GJX@GJXAIOU",[[-1,2199,"4.2.2     |  |\n|  | ![文本框: <mvc:interceptors>\n\n\n<mvc:interceptor>\n\n\n<mvc:mapping path=\"/demo\"/>\n\n\n<mvc:mapping path=\"/demo1\"/>\n\n\n<mvc:mapping path=\"/demo2\"/>\n\n\n<bean class=\"com.bjsxt.interceptor.DemoInterceptor\"></bean>\n\n</mvc:interceptor>\n\n\n</mvc:interceptors>\n\n](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image006.gif) | "]],[2199,2543],[2199,2199]]],[1568969071561,["GJX@GJXAIOU",[[-1,2093,"![文本框: </mvc:interceptors>](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image005.gif)\n"]],[2093,2198],[2093,2093]]],[1568969074305,["GJX@GJXAIOU",[[1,2092,"```"]],[2092,2092],[2095,2095]]],[1568969074336,["GJX@GJXAIOU",[[1,2095,"language\n```\n"]],[2095,2095],[2095,2103]]],[1568969079337,["GJX@GJXAIOU",[[-1,2095,"language"],[1,2103,"x"]],[2095,2103],[2096,2096]]],[1568969079600,["GJX@GJXAIOU",[[1,2096,"ml"]],[2096,2096],[2098,2098]]],[1568969079873,["GJX@GJXAIOU",[[1,2099,"\n"]],[2098,2098],[2099,2099]]],[1568969080872,["GJX@GJXAIOU",[[1,2099,"<!--第一种表示所有控制器全部拦截--> <!--   <mvc:interceptors>--> <!--      <bean class=\"com.bjsxt.interceptor.DemoInterceptor\"></bean>--> <!--   </mvc:interceptors>-->   <!-- 第二种表示只拦截以下路径的控制器-->\n  <mvc:interceptors>\n <mvc:interceptor>\n <mvc:mapping path=\"/demo\"/>\n <mvc:mapping path=\"/demo1\"/>\n <mvc:mapping path=\"/demo2\"/>\n <bean class=\"com.bjsxt.interceptor.DemoInterceptor\"></bean>\n </mvc:interceptor>\n </mvc:interceptors>"]],[2099,2099],[2510,2510]]],[1568969085232,["GJX@GJXAIOU",[[-1,2083,"\n"]],[2083,2083],[2082,2082]]],[1568969087497,["GJX@GJXAIOU",[[1,2083,"f "]],[2083,2083],[2084,2084]]],[1568969087960,["GJX@GJXAIOU",[[1,2084,"enwei"]],[2084,2084],[2089,2089]]],[1568969089448,["GJX@GJXAIOU",[[-1,2083,"fenwei"]],[2089,2089],[2083,2083]]],[1568969091817,["GJX@GJXAIOU",[[1,2083,"分为"]],[2083,2083],[2085,2085]]],[1568969103345,["GJX@GJXAIOU",[[1,2093,"和拦截特定URL"]],[2093,2093],[2101,2101]]],[1568969103375,["GJX@GJXAIOU",[[1,2098," "]],[2101,2101],[2102,2102]]],[1568969105459,["GJX@GJXAIOU",[[1,2102,"的"]],[2102,2102],[2103,2103]]],[1568969105491,["GJX@GJXAIOU",[[1,2102," "]],[2103,2103],[2104,2104]]],[1568969108608,["GJX@GJXAIOU",[[1,2104,"控制器；"]],[2104,2104],[2108,2108]]],[1568969110831,["GJX@GJXAIOU",[[-1,2085," "]],[2086,2086],[2085,2085]]],[1568969115310,["GJX@GJXAIOU",[[-1,2137,"<!--  "]],[2137,2143],[2137,2137]]],[1568969117342,["GJX@GJXAIOU",[[1,2138,"\n"]],[2138,2138],[2139,2139]]],[1568969120624,["GJX@GJXAIOU",[[-1,2157,"--> <!--"]],[2157,2165],[2157,2157]]],[1568969121968,["GJX@GJXAIOU",[[1,2163,"\n"]],[2163,2163],[2164,2164]]],[1568969124103,["GJX@GJXAIOU",[[1,2164,"    "]],[2164,2164],[2168,2168]]],[1568969127545,["GJX@GJXAIOU",[[-1,2227,"--> <!--"]],[2227,2235],[2227,2227]]],[1568969488614,["GJX@GJXAIOU",[[1,2255,"\n    \n    "]],[2255,2255],[2265,2265]]],[1568969491829,["GJX@GJXAIOU",[[-1,2261,"    "]],[2261,2265],[2261,2261]]],[1568969493430,["GJX@GJXAIOU",[[-1,2287," "]],[2288,2288],[2287,2287]]],[1568969499566,["GJX@GJXAIOU",[[1,2307,"  "],[1,2325,"  "],[1,2354,"  "],[1,2385,"  "],[1,2414,"  "],[1,2475,"  "]],[2307,2494],[2309,2506]]],[1568969499717,["GJX@GJXAIOU",[[1,2309,"  "],[1,2327,"  "],[1,2358,"  "],[1,2393,"  "],[1,2422,"  "],[1,2485,"  "]],[2309,2506],[2311,2518]]],[1568969502630,["GJX@GJXAIOU",[[1,2334,"  "],[1,2362,"  "],[1,2401,"  "],[1,2430,"  "]],[2334,2494],[2336,2502]]],[1568969502792,["GJX@GJXAIOU",[[1,2336,"  "],[1,2364,"  "],[1,2407,"  "],[1,2436,"  "]],[2336,2502],[2338,2510]]],[1568969616046,["GJX@GJXAIOU",[[1,2563,"\n"]],[2560,2560],[2561,2561]]],[1568969625010,["GJX@GJXAIOU",[[1,2561,"- 控制器中实现的Demo"]],[2561,2561],[2574,2574]]],[1568969625042,["GJX@GJXAIOU",[[1,2570," "]],[2574,2574],[2575,2575]]],[1568969630547,["GJX@GJXAIOU",[[1,2575,"Controller为"]],[2575,2575],[2586,2586]]],[1568969630577,["GJX@GJXAIOU",[[1,2585," "]],[2586,2586],[2587,2587]]],[1568969631024,["GJX@GJXAIOU",[[1,2587,"："]],[2587,2587],[2588,2588]]],[1568969631280,["GJX@GJXAIOU",[[1,2589,"- \n"]],[2588,2588],[2591,2591]]],[1568969631950,["GJX@GJXAIOU",[[-1,2589,"- "]],[2591,2591],[2589,2589]]],[1568969633391,["GJX@GJXAIOU",[[1,2589,"```"]],[2589,2589],[2592,2592]]],[1568969633423,["GJX@GJXAIOU",[[1,2592,"language\n```\n"]],[2592,2592],[2592,2600]]],[1568969634696,["GJX@GJXAIOU",[[-1,2592,"language"],[1,2600,"j"]],[2592,2600],[2593,2593]]],[1568969635153,["GJX@GJXAIOU",[[1,2593,"ava"]],[2593,2593],[2596,2596]]],[1568969635255,["GJX@GJXAIOU",[[1,2597,"\n"]],[2596,2596],[2597,2597]]],[1568969638109,["GJX@GJXAIOU",[[1,2597,"@Controller\npublic class DemoController {\n\t@RequestMapping(\"demo\")\n\tpublic String demo( ){\n\t\tSystem.out.println(\"执行demo\");\n//\t\tint i = 5/0;\n\t\treturn \"index.jsp\";\n\t}\n\n\t// demo4 没有在 springmvc 中配置，因此拦截器不会拦截\n\t@RequestMapping(\"demo4\")\n\tpublic String demo4( Model model){\n\t\tSystem.out.println(\"执行demo4\");\n//\t\tint i = 5/0;\n\t\tmodel.addAttribute(\"model\", \"我们都爱祖国.\");\n\t\treturn \"index.jsp\";\n\t}\n}\n"]],[2597,2597],[2982,2982]]],[1568969645966,["GJX@GJXAIOU",[[-1,2990,"拦截特定的的url\n"]],[2990,3000],[2990,2990]]],[1568969646294,["GJX@GJXAIOU",[[-1,2990,"\n"]],[2990,2990],[2989,2989]]],[1568969646608,["GJX@GJXAIOU",[[-1,2989,"\n"]],[2989,2989],[2988,2988]]],[1568969654414,["GJX@GJXAIOU",[[-1,2994," "]],[2995,2995],[2994,2994]]],[1568969655056,["GJX@GJXAIOU",[[1,2994,"/"]],[2994,2994],[2995,2995]]],[1568969656407,["GJX@GJXAIOU",[[-1,2993,"./"]],[2995,2995],[2993,2993]]],[1568969657617,["GJX@GJXAIOU",[[1,2993,"、"]],[2993,2993],[2994,2994]]],[1568969662904,["GJX@GJXAIOU",[[-1,3000,"1. "]],[3000,3003],[3000,3000]]],[1568969663562,["GJX@GJXAIOU",[[1,3000,"- "]],[3000,3000],[3002,3002]]],[1568969665430,["GJX@GJXAIOU",[[-1,3022,"2."]],[3022,3024],[3022,3022]]],[1568969665656,["GJX@GJXAIOU",[[1,3022,"-"]],[3022,3022],[3023,3023]]],[1568969666646,["GJX@GJXAIOU",[[-1,3021,"\n"]],[3021,3021],[3020,3020]]],[1568969669173,["GJX@GJXAIOU",[[-1,3025,":"]],[3026,3026],[3025,3025]]],[1568969669680,["GJX@GJXAIOU",[[1,3025,"："]],[3025,3025],[3026,3026]]],[1568969675531,["GJX@GJXAIOU",[[1,3023,"执行"]],[3023,3023],[3025,3025]]],[1568969678469,["GJX@GJXAIOU",[[-1,3032,"."]],[3033,3033],[3032,3032]]],[1568969678912,["GJX@GJXAIOU",[[1,3032,"；"]],[3032,3032],[3033,3033]]],[1568969681856,["GJX@GJXAIOU",[[-1,3035,"3. "]],[3035,3038],[3035,3035]]],[1568969681975,["GJX@GJXAIOU",[[-1,3034,"\n"]],[3035,3035],[3034,3034]]],[1568969682392,["GJX@GJXAIOU",[[1,3034,"- "]],[3034,3034],[3036,3036]]],[1568969688386,["GJX@GJXAIOU",[[1,3028,"整体标准为"]],[3028,3028],[3033,3033]]],[1568969691816,["GJX@GJXAIOU",[[1,3047," "]],[3047,3047],[3048,3048]]],[1568969699054,["GJX@GJXAIOU",[[-1,3070,"\n4. "]],[3070,3074],[3070,3070]]],[1568969699616,["GJX@GJXAIOU",[[1,3070,"- "]],[3070,3070],[3072,3072]]],[1568969800511,["GJX@GJXAIOU",[[-1,3160,"\n"]],[3161,3161],[3160,3160]]],[1568969800904,["GJX@GJXAIOU",[[-1,3159,"\n"]],[3160,3160],[3159,3159]]],[1568969804830,["GJX@GJXAIOU",[[-1,3096,"\n"]],[3096,3096],[3095,3095]]],[1568969808238,["GJX@GJXAIOU",[[1,3237,"\n"]],[3236,3236],[3237,3237]]],[1568969808350,["GJX@GJXAIOU",[[1,3238,"\n"]],[3237,3237],[3238,3238]]],[1568969808630,["GJX@GJXAIOU",[[1,3239,"\n"]],[3238,3238],[3239,3239]]],[1568969814159,["GJX@GJXAIOU",[[1,3237,"****"]],[3237,3237],[3239,3239]]],[1568969816287,["GJX@GJXAIOU",[[1,3239,"代码示例："]],[3239,3239],[3244,3244]]],[1568969826219,["GJX@GJXAIOU",[[1,3247,"同时低"]],[3247,3247],[3250,3250]]],[1568969827065,["GJX@GJXAIOU",[[-1,3247,"同时低"]],[3250,3250],[3247,3247]]],[1568969827174,["GJX@GJXAIOU",[[-1,3248,"\n"]],[3247,3247],[3246,3246]]],[1568969828128,["GJX@GJXAIOU",[[1,3248,"\n"]],[3246,3246],[3247,3247]]],[1568969832488,["GJX@GJXAIOU",[[1,3247,"同时在包 "]],[3247,3247],[3252,3252]]],[1568969865095,["GJX@GJXAIOU",[[1,3252,"com.bjsxt.interceptor bao"]],[3252,3252],[3277,3277]]],[1568969865797,["GJX@GJXAIOU",[[-1,3274,"bao"]],[3277,3277],[3274,3274]]],[1568969869000,["GJX@GJXAIOU",[[1,3274,"包下面失恋"]],[3274,3274],[3279,3279]]],[1568969869661,["GJX@GJXAIOU",[[-1,3277,"失恋"]],[3279,3279],[3277,3277]]],[1568969880153,["GJX@GJXAIOU",[[1,3277,"实现两个烂机器"]],[3277,3277],[3284,3284]]],[1568969880870,["GJX@GJXAIOU",[[-1,3281,"烂机器"]],[3284,3284],[3281,3281]]],[1568969894287,["GJX@GJXAIOU",[[1,3281,"拦截器：interceptor1 "]],[3281,3281],[3298,3298]]],[1568969897087,["GJX@GJXAIOU",[[1,3298,"和 interceptor2"]],[3298,3298],[3312,3312]]],[1568969899286,["GJX@GJXAIOU",[[1,3314,"\n"]],[3312,3312],[3313,3313]]],[1568969902151,["GJX@GJXAIOU",[[-1,3314,"\n"]],[3313,3313],[3312,3312]]],[1568969903984,["GJX@GJXAIOU",[[1,3312,"，两个"]],[3312,3312],[3315,3315]]],[1568969904934,["GJX@GJXAIOU",[[-1,3313,"两个"]],[3315,3315],[3313,3313]]],[1568969913153,["GJX@GJXAIOU",[[1,3313,"两者的示例代码想听，"]],[3313,3313],[3323,3323]]],[1568969913773,["GJX@GJXAIOU",[[-1,3320,"想听，"]],[3323,3323],[3320,3320]]],[1568969926258,["GJX@GJXAIOU",[[1,3320,"相同，但是print"]],[3320,3320],[3330,3330]]],[1568969926291,["GJX@GJXAIOU",[[1,3325," "]],[3330,3330],[3331,3331]]],[1568969928320,["GJX@GJXAIOU",[[1,3331,"函数"]],[3331,3331],[3333,3333]]],[1568969928352,["GJX@GJXAIOU",[[1,3331," "]],[3333,3333],[3334,3334]]],[1568969934711,["GJX@GJXAIOU",[[1,3334,"结果不同作为区分；"]],[3334,3334],[3343,3343]]],[1568969935183,["GJX@GJXAIOU",[[1,3345,"\n"]],[3343,3343],[3344,3344]]],[1568969936727,["GJX@GJXAIOU",[[1,3344,"```"]],[3344,3344],[3347,3347]]],[1568969936759,["GJX@GJXAIOU",[[1,3347,"language\n```\n"]],[3347,3347],[3347,3355]]],[1568969937422,["GJX@GJXAIOU",[[-1,3347,"language"],[1,3355,"j"]],[3347,3355],[3348,3348]]],[1568969937790,["GJX@GJXAIOU",[[1,3348,"ava"]],[3348,3348],[3351,3351]]],[1568969937878,["GJX@GJXAIOU",[[1,3352,"\n"]],[3351,3351],[3352,3352]]],[1568969993814,["GJX@GJXAIOU",[[1,3359,"\n"]],[3356,3356],[3357,3357]]],[1568969994101,["GJX@GJXAIOU",[[1,3360,"\n"]],[3357,3357],[3358,3358]]],[1568969995150,["GJX@GJXAIOU",[[1,3358,"ranho"]],[3358,3358],[3363,3363]]],[1568969996092,["GJX@GJXAIOU",[[-1,3358,"ranho"]],[3363,3363],[3358,3358]]],[1568969996574,["GJX@GJXAIOU",[[-1,3360,"\n"]],[3358,3358],[3357,3357]]],[1568969997701,["GJX@GJXAIOU",[[1,3360,"\n"]],[3357,3357],[3358,3358]]],[1568969998608,["GJX@GJXAIOU",[[1,3358,"然后"]],[3358,3358],[3360,3360]]],[1568969999372,["GJX@GJXAIOU",[[-1,3358,"然后"]],[3360,3360],[3358,3358]]],[1568969999516,["GJX@GJXAIOU",[[-1,3360,"\n"]],[3358,3358],[3357,3357]]],[1568970000486,["GJX@GJXAIOU",[[1,3360,"\n"]],[3357,3357],[3358,3358]]],[1568970002841,["GJX@GJXAIOU",[[1,3358,"然后在 "]],[3358,3358],[3362,3362]]],[1568970070633,["GJX@GJXAIOU",[[1,3362,"springmvc"]],[3362,3362],[3371,3371]]],[1568970085959,["GJX@GJXAIOU",[[1,3371,"。"]],[3371,3371],[3372,3372]]],[1568970086780,["GJX@GJXAIOU",[[-1,3371,"。"]],[3372,3372],[3371,3371]]],[1568970087750,["GJX@GJXAIOU",[[1,3371,"x."]],[3371,3371],[3373,3373]]],[1568970088222,["GJX@GJXAIOU",[[-1,3371,"x."]],[3373,3373],[3371,3371]]],[1568970089237,["GJX@GJXAIOU",[[1,3371,".xnm"]],[3371,3371],[3375,3375]]],[1568970090085,["GJX@GJXAIOU",[[-1,3373,"nm"]],[3375,3375],[3373,3373]]],[1568970096631,["GJX@GJXAIOU",[[1,3373,"ml 配置拦截器为："]],[3373,3373],[3383,3383]]],[1568970097189,["GJX@GJXAIOU",[[1,3386,"\n"]],[3383,3383],[3384,3384]]],[1568970662721,["GJX@GJXAIOU",[[1,3384,"```"]],[3384,3384],[3387,3387]]],[1568970662754,["GJX@GJXAIOU",[[1,3387,"language\n```\n"]],[3387,3387],[3387,3395]]],[1568970664001,["GJX@GJXAIOU",[[-1,3387,"language"],[1,3395,"x"]],[3387,3395],[3388,3388]]],[1568970664279,["GJX@GJXAIOU",[[1,3388,"ml"]],[3388,3388],[3390,3390]]],[1568970664528,["GJX@GJXAIOU",[[1,3391,"\n"]],[3390,3390],[3391,3391]]],[1568970667207,["GJX@GJXAIOU",[[1,3391,"<!-- 拦截器 -->\n\t<mvc:interceptors>\n\t\t\t<!--拦截顺序和配置顺序有关-->\n\t\t\t<bean class=\"com.bjsxt.interceptor.DemoInterceptor1\"></bean>\n\t\t\t<bean class=\"com.bjsxt.interceptor.DemoInterceptor2\"></bean>\n\t</mvc:interceptors>"]],[3391,3391],[3594,3594]]],[1568970670478,["GJX@GJXAIOU",[[-1,3404,"\t"],[-1,3424,"\t"],[-1,3446,"\t"],[-1,3512,"\t"],[-1,3574,"\t"]],[3405,3594],[3404,3589]]],[1568970670671,["GJX@GJXAIOU",[[-1,3424,"\t"],[-1,3444,"\t"],[-1,3507,"\t"]],[3404,3589],[3404,3586]]],[1568970686556,["GJX@GJXAIOU",[[1,3352,"package com.bjsxt.interceptor;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.ModelAndView;\n\npublic class DemoInterceptor1 implements HandlerInterceptor {\n\t@Override\n\tpublic boolean preHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2) throws Exception {\n\t\tSystem.out.println(\"preHandle\");\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)\n\t\t\tthrows Exception {\n\t\tSystem.out.println(\"postHandle\");\n\t}\n\n\t@Override\n\tpublic void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)\n\t\t\tthrows Exception {\n\t\tSystem.out.println(\"afterCompletion\");\n\t}\n}\n"]],[3352,3352],[4195,4195]]],[1568970689599,["GJX@GJXAIOU",[[1,3804,"1"]],[3804,3804],[3805,3805]]],[1568970691537,["GJX@GJXAIOU",[[1,4000,"1"]],[4000,4000],[4001,4001]]],[1568970693727,["GJX@GJXAIOU",[[1,4188,"1"]],[4188,4188],[4189,4189]]],[1568970838710,["GJX@GJXAIOU",[[1,4440,"\n"]],[4436,4436],[4437,4437]]],[1568970839624,["GJX@GJXAIOU",[[1,4437,"jia"]],[4437,4437],[4440,4440]]],[1568970840764,["GJX@GJXAIOU",[[-1,4437,"jia"]],[4440,4440],[4437,4437]]],[1568970847657,["GJX@GJXAIOU",[[1,4437,"假设 controller中"]],[4437,4437],[4451,4451]]],[1568970847690,["GJX@GJXAIOU",[[1,4450," "]],[4451,4451],[4452,4452]]],[1568970852494,["GJX@GJXAIOU",[[1,4452,"只有一个控制器："]],[4452,4452],[4460,4460]]],[1568970852767,["GJX@GJXAIOU",[[1,4464,"\n"]],[4460,4460],[4461,4461]]],[1568970854358,["GJX@GJXAIOU",[[1,4461,"```"]],[4461,4461],[4464,4464]]],[1568970854391,["GJX@GJXAIOU",[[1,4464,"language\n```\n"]],[4464,4464],[4464,4472]]],[1568970856102,["GJX@GJXAIOU",[[-1,4464,"language"],[1,4472,"j"]],[4464,4472],[4465,4465]]],[1568970856463,["GJX@GJXAIOU",[[1,4465,"ava"]],[4465,4465],[4468,4468]]],[1568970856629,["GJX@GJXAIOU",[[1,4469,"\n"]],[4468,4468],[4469,4469]]],[1568970858990,["GJX@GJXAIOU",[[1,4469,"@Controller\npublic class DemoController {\n\t@RequestMapping(\"demo\")\n\tpublic String demo( ){\n\t\tSystem.out.println(\"执行demo\");\n\t\treturn \"index.jsp\";\n\t}\n}"]],[4469,4469],[4618,4618]]],[1568970872108,["GJX@GJXAIOU",[[1,4627,"\n"]],[4622,4622],[4623,4623]]],[1568970873027,["GJX@GJXAIOU",[[1,4623,"fang"]],[4623,4623],[4627,4627]]],[1568970873956,["GJX@GJXAIOU",[[-1,4623,"fang"]],[4627,4627],[4623,4623]]],[1568970879632,["GJX@GJXAIOU",[[1,4623,"当通过URL"]],[4623,4623],[4629,4629]]],[1568970879665,["GJX@GJXAIOU",[[1,4626," "]],[4629,4629],[4630,4630]]],[1568970880959,["GJX@GJXAIOU",[[1,4630,"访问"]],[4630,4630],[4632,4632]]],[1568970880993,["GJX@GJXAIOU",[[1,4630," "]],[4632,4632],[4633,4633]]],[1568970911534,["GJX@GJXAIOU",[[1,4633,"：[http://localhost:8080/springmvc07_war_exploded/demo](http://localhost:8080/springmvc07_war_exploded/demo)"]],[4633,4633],[4740,4740]]],[1568970915485,["GJX@GJXAIOU",[[-1,4686,"](http://localhost:8080/springmvc07_war_exploded/demo)"]],[4686,4740],[4686,4686]]],[1568970916544,["GJX@GJXAIOU",[[1,4686,"·"]],[4686,4686],[4687,4687]]],[1568970917749,["GJX@GJXAIOU",[[-1,4686,"·"]],[4687,4687],[4686,4686]]],[1568970918176,["GJX@GJXAIOU",[[1,4686,"`"]],[4686,4686],[4687,4687]]],[1568970921022,["GJX@GJXAIOU",[[-1,4634,"["]],[4635,4635],[4634,4634]]],[1568970921142,["GJX@GJXAIOU",[[1,4634,"`"]],[4634,4634],[4635,4635]]],[1568970925255,["GJX@GJXAIOU",[[1,4687,"时候，"]],[4687,4687],[4690,4690]]],[1568970926453,["GJX@GJXAIOU",[[-1,4689,"，"]],[4690,4690],[4689,4689]]],[1568970928282,["GJX@GJXAIOU",[[1,4689,"结果"]],[4689,4689],[4691,4691]]],[1568970929654,["GJX@GJXAIOU",[[-1,4689,"结果"]],[4691,4691],[4689,4689]]],[1568970931969,["GJX@GJXAIOU",[[1,4689,"，结果为："]],[4689,4689],[4694,4694]]],[1568970943841,["GJX@GJXAIOU",[[1,4695,"··"]],[4695,4695],[4697,4697]]],[1568970945501,["GJX@GJXAIOU",[[-1,4695,"··"]],[4697,4697],[4695,4695]]],[1568970946905,["GJX@GJXAIOU",[[1,4695,"```"]],[4695,4695],[4698,4698]]],[1568970946939,["GJX@GJXAIOU",[[1,4698,"language\n```\n"]],[4698,4698],[4698,4706]]],[1568970948040,["GJX@GJXAIOU",[[-1,4698,"language"],[1,4706,"j"]],[4698,4706],[4699,4699]]],[1568970948359,["GJX@GJXAIOU",[[1,4699,"ava"]],[4699,4699],[4702,4702]]],[1568970948454,["GJX@GJXAIOU",[[1,4703,"\n"]],[4702,4702],[4703,4703]]],[1568970951082,["GJX@GJXAIOU",[[1,4703,"preHandle1\npreHandle2\n执行demo\npostHandle2\npostHandle1\nindex.jsp\nafterCompletion2\nafterCompletion1\n"]],[4703,4703],[4800,4800]]],[1568970953350,["GJX@GJXAIOU",[[-1,4800,"\n"]],[4800,4800],[4799,4799]]],[1568970953926,["GJX@GJXAIOU",[[-1,4798,"1"]],[4799,4799],[4798,4798]]],[1568970958087,["GJX@GJXAIOU",[[1,4798,"1"]],[4798,4798],[4799,4799]]],[1568970963888,["GJX@GJXAIOU",[[-1,4812,"."]],[4813,4813],[4812,4812]]],[1568970964744,["GJX@GJXAIOU",[[1,4812,"/"]],[4812,4812],[4813,4813]]],[1568970965893,["GJX@GJXAIOU",[[-1,4812,"/"]],[4813,4813],[4812,4812]]],[1568970966374,["GJX@GJXAIOU",[[1,4812,"、"]],[4812,4812],[4813,4813]]],[1568970968797,["GJX@GJXAIOU",[[-1,4807,"\n"]],[4807,4807],[4806,4806]]],[1568970968981,["GJX@GJXAIOU",[[-1,4806,"\n"]],[4806,4806],[4805,4805]]],[1568970973414,["GJX@GJXAIOU",[[-1,4827,"1\\. 文字解释"]],[4827,4835],[4827,4827]]],[1568970973844,["GJX@GJXAIOU",[[-1,4828,"\n"]],[4827,4827],[4826,4826]]],[1568970974576,["GJX@GJXAIOU",[[-1,4827,"\n"]],[4827,4827],[4826,4826]]],[1568970979429,["GJX@GJXAIOU",[[-1,5228,"以上就是 springmvc 运行原理"]],[5228,5247],[5228,5228]]],[1568970979887,["GJX@GJXAIOU",[[-1,5229,"\n"]],[5228,5228],[5227,5227]]],[1568970980989,["GJX@GJXAIOU",[[-1,5225,"."]],[5226,5226],[5225,5225]]],[1568970982562,["GJX@GJXAIOU",[[1,5225,"。"]],[5225,5225],[5226,5226]]],[1568970999715,["GJX@GJXAIOU",[[-1,4880,","],[1,4881,"，"]],[4880,4881],[4880,4881]]],[1568971000354,["GJX@GJXAIOU",[[-1,4888,","],[1,4889,"，"]],[4888,4889],[4888,4889]]],[1568971001232,["GJX@GJXAIOU",[[-1,4898,","],[1,4899,"，"]],[4898,4899],[4898,4899]]],[1568971002077,["GJX@GJXAIOU",[[-1,5008,","],[1,5009,"，"]],[5008,5009],[5008,5009]]],[1568971002882,["GJX@GJXAIOU",[[-1,5143,","],[1,5144,"，"]],[5143,5144],[5143,5144]]],[1568971003514,["GJX@GJXAIOU",[[-1,5174,","],[1,5175,"，"]],[5174,5175],[5174,5175]]],[1568971004113,["GJX@GJXAIOU",[[-1,5201,","],[1,5202,"，"]],[5201,5202],[5201,5202]]],[1568971028935,["GJX@GJXAIOU",[[-1,4924,"."],[1,4925,"。"]],[4924,4925],[4924,4925]]],[1568971031946,["GJX@GJXAIOU",[[-1,5113,"."],[1,5114,"。"]],[5113,5114],[5113,5114]]],[1568971039006,["GJX@GJXAIOU",[[-1,5255,"."]],[5256,5256],[5255,5255]]],[1568971059372,["GJX@GJXAIOU",[[-1,5257,"1. "]],[5257,5260],[5257,5257]]],[1568971063208,["GJX@GJXAIOU",[[1,5257,"只需要"]],[5257,5257],[5260,5260]]],[1568971546493,["GJX@GJXAIOU",[[-1,5318,"1.2     |  |\n|  | ![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image007.gif) | "]],[5318,5419],[5318,5318]]],[1568971546844,["GJX@GJXAIOU",[[-1,5318,"\n"]],[5318,5318],[5317,5317]]],[1568971547837,["GJX@GJXAIOU",[[-1,5317,"\n"]],[5317,5317],[5316,5316]]],[1568971550590,["GJX@GJXAIOU",[[-1,5292,"1.1 "]],[5292,5296],[5292,5292]]],[1568971550957,["GJX@GJXAIOU",[[-1,5291,"\n"]],[5292,5292],[5291,5291]]],[1568971554140,["GJX@GJXAIOU",[[1,5291,"  "],[1,5312,"  "]],[5291,5330],[5291,5334]]],[1568971554715,["GJX@GJXAIOU",[[-1,5291,"  必须额外导入 joda"],[-1,5305,"time.jar\n  时间类型 java.sql.Date"]],[5291,5291],[5292,5292]]],[1568971557971,["GJX@GJXAIOU",[[1,5291,"  必须额外导入 joda"],[1,5292,"time.jar\n  时间类型 java.sql.Date"]],[5292,5292],[5291,5291]]],[1568971559844,["GJX@GJXAIOU",[[1,5293,"* "]],[5291,5291],[5293,5293]]],[1568971562980,["GJX@GJXAIOU",[[1,5318,"* "]],[5318,5318],[5320,5320]]],[1568971565736,["GJX@GJXAIOU",[[1,5290,"；"]],[5290,5290],[5291,5291]]],[1568971569545,["GJX@GJXAIOU",[[1,5257,"- "]],[5257,5257],[5259,5259]]],[1568971651631,["GJX@GJXAIOU",[[1,5342,"springmvc 内容为："]],[5342,5342],[5356,5356]]],[1568971652397,["GJX@GJXAIOU",[[1,5357,"\n"]],[5356,5356],[5357,5357]]],[1568971653823,["GJX@GJXAIOU",[[1,5357,"```"]],[5357,5357],[5360,5360]]],[1568971653856,["GJX@GJXAIOU",[[1,5360,"language\n```\n"]],[5360,5360],[5360,5368]]],[1568971655158,["GJX@GJXAIOU",[[-1,5360,"language"],[1,5368,"x"]],[5360,5368],[5361,5361]]],[1568971655446,["GJX@GJXAIOU",[[1,5361,"ml"]],[5361,5361],[5363,5363]]],[1568971658743,["GJX@GJXAIOU",[[1,5351,".xml"]],[5351,5351],[5355,5355]]],[1568971661903,["GJX@GJXAIOU",[[1,5368,"\n"]],[5367,5367],[5368,5368]]],[1568971664844,["GJX@GJXAIOU",[[1,5368,"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/mvc\n        http://www.springframework.org/schema/mvc/spring-mvc.xsd\">\n\t<!-- 扫描注解 -->\n\t<context:component-scan base-package=\"com.bjsxt.controller\"></context:component-scan>\n\t<!-- 注解驱动 -->\n\t<mvc:annotation-driven conversion-service=\"conversionService\"></mvc:annotation-driven>\n\n\n<bean id=\"conversionService\"\n\t\tclass=\"org.springframework.format.support.FormattingConversionServiceFactoryBean\">\n\t\t<property name=\"registerDefaultFormatters\" value=\"false\" />\n\t\t<property name=\"formatters\">\n\t\t\t<set>\n\t\t\t\t<bean\n\t\t\t\t\tclass=\"org.springframework.format.number.NumberFormatAnnotationFormatterFactory\" />\n\t\t\t</set>\n\t\t</property>\n\t\t<property name=\"formatterRegistrars\">\n\t\t\t<set>\n\t\t\t\t<bean\n\t\t\t\t\tclass=\"org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar\">\n\t\t\t\t\t<property name=\"dateFormatter\">\n\t\t\t\t\t\t<bean\n\t\t\t\t\t\t\tclass=\"org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean\">\n\t\t\t\t\t\t\t<property name=\"pattern\" value=\"yyyy-MM-dd\" />\n\t\t\t\t\t\t</bean>\n\t\t\t\t\t</property>\n\t\t\t\t</bean>\n\t\t\t</set>\n\t\t</property>\n\t</bean>\n</beans>"]],[5368,5368],[6976,6976]]],[1568971683541,["GJX@GJXAIOU",[[-1,6982,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image008.gif)\n\n<bean id=_\"conversionService\"_\n\nclass=_\"org.springframework.format.support.Formattin gConversionServiceFactoryBean\"_>\n\n<property name=_\"registerDefaultFormatters\"_ value=_\"false\"_ />\n\n<property name=_\"formatters\"_>\n\n<set>\n\n<bean\n\nclass=_\"org.springframework.format.number.NumberForm atAnnotationFormatterFactory\"_ />\n\n</set>\n\n</property>\n\n<property name=_\"formatterRegistrars\"_>\n\n<set>\n\n<bean\n\nclass=_\"org.springframework.format.datetime.joda.Jod aTimeFormatterRegistrar\"_>\n\n![文本框: <property name=\"dateFormatter\">\n\n\n<bean\n\n\nclass=\"org.springframework.format.datetime.joda.Dat eTimeFormatterFactoryBean\">\n\n<property name=\"pattern\" value=\"yyyy-MM-dd\" />\n\n</bean>\n\n\n</property>\n\n\n</bean>\n\n\n</set>\n\n\n</property>\n\n\n</bean>\n\n](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image009.gif)\n"]],[6982,7862],[6982,6982]]],[1568971690781,["GJX@GJXAIOU",[[-1,6983,"2."]],[6983,6985],[6983,6983]]],[1568971691030,["GJX@GJXAIOU",[[1,6983,"-"]],[6983,6983],[6984,6984]]],[1568971694388,["GJX@GJXAIOU",[[-1,6992," . "]],[6995,6995],[6992,6992]]],[1568971695462,["GJX@GJXAIOU",[[1,6992,":"]],[6992,6992],[6993,6993]]],[1568971699109,["GJX@GJXAIOU",[[-1,7027,"\n"]],[7028,7028],[7027,7027]]],[1568971699477,["GJX@GJXAIOU",[[-1,7026,"\n"]],[7027,7027],[7026,7026]]],[1568971703526,["GJX@GJXAIOU",[[-1,7024," 加"]],[7026,7026],[7024,7024]]],[1568971704527,["GJX@GJXAIOU",[[1,7024,"t"]],[7024,7024],[7025,7025]]],[1568971704561,["GJX@GJXAIOU",[[1,7024," "]],[7025,7025],[7026,7026]]],[1568971704796,["GJX@GJXAIOU",[[1,7026,"ian"]],[7026,7026],[7029,7029]]],[1568971707037,["GJX@GJXAIOU",[[-1,7023,"添 tian"]],[7029,7029],[7023,7023]]],[1568971708816,["GJX@GJXAIOU",[[1,7023,"添加"]],[7023,7023],[7025,7025]]],[1568971710613,["GJX@GJXAIOU",[[-1,7022," "]],[7023,7023],[7022,7022]]],[1568971711725,["GJX@GJXAIOU",[[-1,7020," "]],[7021,7021],[7020,7020]]],[1568971712773,["GJX@GJXAIOU",[[-1,7018," "]],[7019,7019],[7018,7018]]],[1568971713860,["GJX@GJXAIOU",[[-1,7016," "]],[7017,7017],[7016,7016]]],[1568971714526,["GJX@GJXAIOU",[[-1,7014," "]],[7015,7015],[7014,7014]]],[1568971715069,["GJX@GJXAIOU",[[-1,7012," "]],[7013,7013],[7012,7012]]],[1568971715516,["GJX@GJXAIOU",[[-1,7010," "]],[7011,7011],[7010,7010]]],[1568971715982,["GJX@GJXAIOU",[[-1,7008," "]],[7009,7009],[7008,7008]]],[1568971716500,["GJX@GJXAIOU",[[-1,7006," "]],[7007,7007],[7006,7006]]],[1568971716925,["GJX@GJXAIOU",[[-1,7004," "]],[7005,7005],[7004,7004]]],[1568971717694,["GJX@GJXAIOU",[[-1,7002," "]],[7003,7003],[7002,7002]]],[1568971718091,["GJX@GJXAIOU",[[-1,7000," "]],[7001,7001],[7000,7000]]],[1568971718526,["GJX@GJXAIOU",[[-1,6998," "]],[6999,6999],[6998,6998]]],[1568971718967,["GJX@GJXAIOU",[[-1,6996," "]],[6997,6997],[6996,6996]]],[1568971719405,["GJX@GJXAIOU",[[-1,6994," "]],[6995,6995],[6994,6994]]],[1568971720829,["GJX@GJXAIOU",[[-1,6990," "]],[6991,6991],[6990,6990]]],[1568971722606,["GJX@GJXAIOU",[[-1,6988," "]],[6989,6989],[6988,6988]]],[1568971723285,["GJX@GJXAIOU",[[-1,6986," "]],[6987,6987],[6986,6986]]],[1568971725166,["GJX@GJXAIOU",[[-1,6989,":"]],[6990,6990],[6989,6989]]],[1568971725783,["GJX@GJXAIOU",[[1,6989,"："]],[6989,6989],[6990,6990]]],[1568971730614,["GJX@GJXAIOU",[[1,7007,"`"]],[7007,7007],[7008,7008]]],[1568971732776,["GJX@GJXAIOU",[[1,7041,"`"]],[7041,7041],[7042,7042]]],[1568971741805,["GJX@GJXAIOU",[[-1,7044,"2.1     |  |\n|  | ![文本框: @RequestMapping(\"demo\")\n\n\npublic String\n\n\ndemo(@DateTimeFormat(pattern=\"yyyy-MM-dd\") Date time){ System.out.println(time);\n\nreturn \"abc.jsp\";\n\n\n}\n\n](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif) | "]],[7044,7297],[7044,7044]]],[1568971742156,["GJX@GJXAIOU",[[-1,7044,"\n"]],[7044,7044],[7043,7043]]],[1568971745253,["GJX@GJXAIOU",[[-1,7043,"\n"]],[7043,7043],[7042,7042]]],[1568971747133,["GJX@GJXAIOU",[[1,7046,"  "]],[7046,7046],[7048,7048]]],[1568971750341,["GJX@GJXAIOU",[[-1,7046,"  "]],[7048,7048],[7046,7046]]],[1568971752327,["GJX@GJXAIOU",[[1,7043,"- "]],[7043,7043],[7045,7045]]],[1568971753237,["GJX@GJXAIOU",[[1,7043,"  "]],[7045,7045],[7047,7047]]],[1568971765231,["GJX@GJXAIOU",[[1,7059,"```"]],[7059,7059],[7062,7062]]],[1568971765266,["GJX@GJXAIOU",[[1,7062,"language\n```\n"]],[7062,7062],[7062,7070]]],[1568971766376,["GJX@GJXAIOU",[[-1,7062,"language"],[1,7070,"j"]],[7062,7070],[7063,7063]]],[1568971766927,["GJX@GJXAIOU",[[1,7063,"q"]],[7063,7063],[7064,7064]]],[1568971768124,["GJX@GJXAIOU",[[-1,7063,"q"]],[7064,7064],[7063,7063]]],[1568971769119,["GJX@GJXAIOU",[[1,7063,"ava"]],[7063,7063],[7066,7066]]],[1568971769365,["GJX@GJXAIOU",[[1,7067,"\n"]],[7066,7066],[7067,7067]]],[1568971772109,["GJX@GJXAIOU",[[1,7067,"@RequestMapping(\"demo\")\npublic String\ndemo(@DateTimeFormat(pattern=\"yyyy-MM-dd\") Date time){\nSystem.out.println(time);\nreturn \"abc.jsp\";\n}"]],[7067,7067],[7205,7205]]],[1568971775814,["GJX@GJXAIOU",[[-1,7104,"\n"]],[7105,7105],[7104,7104]]],[1568971776360,["GJX@GJXAIOU",[[1,7104," "]],[7104,7104],[7105,7105]]],[1568971779972,["GJX@GJXAIOU",[[1,7091,"  "],[1,7160,"  "],[1,7186,"  "],[1,7204,"  "]],[7091,7205],[7091,7213]]],[1568971780301,["GJX@GJXAIOU",[[1,7093,"  "],[1,7164,"  "],[1,7192,"  "],[1,7210,"  "]],[7091,7213],[7091,7221]]],[1568971783902,["GJX@GJXAIOU",[[1,7168,"  "],[1,7194,"  "]],[7168,7215],[7170,7219]]],[1568971784084,["GJX@GJXAIOU",[[1,7170,"  "],[1,7196,"  "]],[7170,7219],[7172,7223]]],[1568974706713,["GJX@GJXAIOU",[[1,7058,"()"]],[7058,7058],[7060,7060]]],[1568974708129,["GJX@GJXAIOU",[[-1,7058,"()"]],[7060,7060],[7058,7058]]],[1568974708668,["GJX@GJXAIOU",[[1,7058,"（）"]],[7058,7058],[7060,7060]]],[1568974712468,["GJX@GJXAIOU",[[1,7059,"在控制器中"]],[7059,7059],[7064,7064]]],[1568974724999,["GJX@GJXAIOU",[[1,7075,"Controller public class DemoController {\n   @"],[-1,7101," "],[-1,7121,"@DateTimeFormat(pattern=\"yyyy-MM-dd\") Date time"],[1,7168," Demo1 demo"],[-1,7171,"  "],[-1,7198,"time"],[1,7202,"demo"],[-1,7206,"       "],[-1,7221,"abc"],[1,7224,"main"],[-1,7233,"  "],[1,7235,"}\n"]],[7074,7236],[7236,7236]]],[1568974738819,["GJX@GJXAIOU",[[-1,7075,"Controller public class DemoController {\n   @"],[1,7146," "],[1,7165,"@DateTimeFormat(pattern=\"yyyy-MM-dd\") Date time"],[-1,7165," Demo1 demo"],[1,7179,"  "],[1,7204,"time"],[-1,7204,"demo"],[1,7212,"       "],[1,7220,"abc"],[-1,7220,"main"],[1,7233,"  "],[-1,7233,"}\n"]],[7236,7236],[7074,7236]]],[1568974740858,["GJX@GJXAIOU",[[1,7075,"Controller\npublic class DemoController {\n\t@"],[-1,7098,"    "],[1,7102,"\t"],[-1,7121,"@DateTimeFormat(pattern=\"yyyy-MM-dd\") Date time){\n        "],[1,7179," Demo1 demo){\n\t\t"],[-1,7198,"time);\n        "],[1,7213,"demo);\n\t\t"],[-1,7221,"abc"],[1,7224,"main"],[-1,7231,"    "],[1,7235,"\t}\n"]],[7074,7236],[7228,7228]]],[1568974751450,["GJX@GJXAIOU",[[-1,7141,"\t"],[-1,7155," "],[1,7156,"\n"],[-1,7161," Demo1 demo"],[1,7172,"@DateTimeFormat(pattern=\"yyyy-MM-dd\") Date time"],[-1,7175,"\t\t"],[-1,7196,"demo"],[1,7200,"time"],[-1,7203,"\t\t"],[-1,7213,"main"],[1,7217,"abc"],[-1,7224,"\t"]],[7117,7226],[7255,7255]]],[1568974754419,["GJX@GJXAIOU",[[-1,7154,"\n"]],[7155,7155],[7154,7154]]],[1568974755326,["GJX@GJXAIOU",[[1,7154," "]],[7154,7154],[7155,7155]]],[1568974758554,["GJX@GJXAIOU",[[1,7141,"  "],[1,7210,"  "],[1,7236,"  "],[1,7254,"  "]],[7141,7255],[7141,7263]]],[1568974760115,["GJX@GJXAIOU",[[1,7143,"  "],[1,7214,"  "],[1,7242,"  "],[1,7260,"  "]],[7141,7263],[7141,7271]]],[1568974762866,["GJX@GJXAIOU",[[1,7218,"  "],[1,7244,"  "]],[7217,7265],[7219,7269]]],[1568974763155,["GJX@GJXAIOU",[[1,7220,"  "],[1,7246,"  "]],[7219,7269],[7221,7273]]],[1568974768027,["GJX@GJXAIOU",[[-1,7264,"abc"]],[7266,7267],[7264,7264]]],[1568974769840,["GJX@GJXAIOU",[[1,7264,"main"]],[7264,7264],[7268,7268]]],[1568974880202,["GJX@GJXAIOU",[[1,7288,"\n"]],[7286,7286],[7287,7287]]],[1568974880331,["GJX@GJXAIOU",[[1,7289,"\n"]],[7287,7287],[7288,7288]]],[1568974882540,["GJX@GJXAIOU",[[1,7288,"- ju"]],[7288,7288],[7292,7292]]],[1568974883140,["GJX@GJXAIOU",[[-1,7290,"ju"]],[7292,7292],[7290,7290]]],[1568974884396,["GJX@GJXAIOU",[[1,7290,"Juti"]],[7290,7290],[7294,7294]]],[1568974885162,["GJX@GJXAIOU",[[-1,7290,"Juti"]],[7294,7294],[7290,7290]]],[1568974890893,["GJX@GJXAIOU",[[1,7290,"具体的实体类为："]],[7290,7290],[7298,7298]]],[1568974891906,["GJX@GJXAIOU",[[-1,7297,"："]],[7298,7298],[7297,7297]]],[1568974892893,["GJX@GJXAIOU",[[1,7297,"："]],[7297,7297],[7298,7298]]],[1568974893141,["GJX@GJXAIOU",[[1,7299,"- \n"]],[7298,7298],[7301,7301]]],[1568974893792,["GJX@GJXAIOU",[[-1,7299,"- "]],[7301,7301],[7299,7299]]],[1568974895149,["GJX@GJXAIOU",[[1,7299,"```"]],[7299,7299],[7302,7302]]],[1568974895184,["GJX@GJXAIOU",[[1,7302,"language\n```\n"]],[7302,7302],[7302,7310]]],[1568974896268,["GJX@GJXAIOU",[[-1,7302,"language"],[1,7310,"j"]],[7302,7310],[7303,7303]]],[1568974896670,["GJX@GJXAIOU",[[1,7303,"ava"]],[7303,7303],[7306,7306]]],[1568974896769,["GJX@GJXAIOU",[[1,7307,"\n"]],[7306,7306],[7307,7307]]],[1568974899421,["GJX@GJXAIOU",[[1,7307,"public class Demo1 {\n\t@DateTimeFormat(pattern=\"yyyy/MM/dd\")\n\tprivate Date time;\n\n\tpublic Date getTime() {\n\t\treturn time;\n\t}\n\n\tpublic void setTime(Date time) {\n\t\tthis.time = time;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Demo1 [time=\" + time.toLocaleString() + \"]\";\n\t}\n}"]],[7307,7307],[7588,7588]]],[1568974906186,["GJX@GJXAIOU",[[-1,7595,"2.2     |  |\n|  | ![文本框: @RequestMapping(\"demo\")\n\n\npublic String demo( Demo1 demo){ System.out.println(demo); return \"abc.jsp\";\n\n}\n\n](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image011.gif) | \n在实体类中\n\n2.3     |  | \n\n**public class** Demo1 { @DateTimeFormat(pattern=\"yyyy/MM/dd\")\n\n**private** Date time;\n"]],[7594,7917],[7594,7594]]],[1568974908050,["GJX@GJXAIOU",[[-1,7596," |   | "]],[7596,7603],[7596,7596]]],[1568974908276,["GJX@GJXAIOU",[[-1,7595,"\n"]],[7596,7596],[7595,7595]]],[1568974910114,["GJX@GJXAIOU",[[-1,7602,"2.3.1 "]],[7602,7608],[7602,7602]]],[1568974910474,["GJX@GJXAIOU",[[-1,7601,"\n"]],[7602,7602],[7601,7601]]],[1568974912372,["GJX@GJXAIOU",[[-1,7613,"2.3.2"]],[7613,7618],[7613,7613]]],[1568974912636,["GJX@GJXAIOU",[[-1,7612,"\n"]],[7613,7613],[7612,7612]]],[1568974915508,["GJX@GJXAIOU",[[1,7601,"* "],[1,7612,"*"]],[7601,7633],[7603,7636]]],[1568974918084,["GJX@GJXAIOU",[[1,7595,"- "]],[7595,7595],[7597,7597]]],[1568974919571,["GJX@GJXAIOU",[[1,7603,"  "]],[7605,7605],[7607,7607]]],[1568974920484,["GJX@GJXAIOU",[[1,7618,"  "]],[7622,7622],[7624,7624]]],[1568974922394,["GJX@GJXAIOU",[[-1,7594,"\n"]],[7594,7594],[7593,7593]]],[1568975519419,["GJX@GJXAIOU",[[-1,158,"  "]],[158,160],[158,158]]],[1568975522561,["GJX@GJXAIOU",[[-1,170,"；"]],[171,171],[170,170]]],[1568979494531,["GJX@GJXAIOU",[[1,434,"()"]],[434,434],[436,436]]],[1568979497544,["GJX@GJXAIOU",[[-1,433,"；()"]],[435,435],[433,433]]],[1568979498496,["GJX@GJXAIOU",[[1,433,"()"]],[433,433],[435,435]]],[1568979500127,["GJX@GJXAIOU",[[-1,433,"()"]],[435,435],[433,433]]],[1568979500721,["GJX@GJXAIOU",[[1,433,"（）"]],[433,433],[435,435]]],[1568979509616,["GJX@GJXAIOU",[[1,434,"使用 Ctrl + O shi"]],[434,434],[449,449]]],[1568979510647,["GJX@GJXAIOU",[[-1,446,"shi"]],[449,449],[446,446]]],[1568979512817,["GJX@GJXAIOU",[[1,446,"重新"]],[446,446],[448,448]]],[1568979521471,["GJX@GJXAIOU",[[-1,446,"重新"]],[448,448],[446,446]]],[1568979531130,["GJX@GJXAIOU",[[1,446,"重写未实现方法"]],[446,446],[453,453]]],[1568985040833,["GJX@GJXAIOU",[[-1,475,"bjsxt"],[1,480,"gjxaiou"],[-1,492,";\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse"],[-1,702,"// 步骤一："],[1,709,"import javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/** 自定义类，同时"],[-1,730,", "],[1,732,"，"],[1,739,"的"],[1,742," * @author GJXAIOU\n * @create 2019-09-20-19:34\n */\n"],[-1,755,"Demo"],[1,770,"Demo"],[-1,803,"\t//"],[1,806,"    /**\n     *"],[-1,821,"\t// 如果返回值为false,阻止进入控制器\n\t//"],[1,848,"     *"],[1,851,"的"],[1,855,"都"],[1,864,"下"],[1,875,"下"],[-1,883,"\t@Override\n\t// Object 参数含义，就是"],[1,912,"     * @param request\n     * @param response\n     * @param handler\n     * @return true 表示进入"],[1,915,"，false 表示阻止进入"],[-1,917,"的方法名称（全称）\n\t"],[1,928,"器\n     * @throws Exception\n     */\n    @Override\n    "],[-1,972,"arg0"],[1,976,"request"],[-1,998,"arg1"],[1,1002,"response"],[1,1011,"h"],[1,1012,"ndle"],[-1,1013,"g2"],[-1,1036,"\t\t"],[1,1038,"        // 参数 Object handler 表示拦截器拦截的方法的全称\n        "],[-1,1058,"arg2:\"+arg2);\n\t\t"],[1,1074,"拦截的方法为：handeler = \" + handler);\n        "],[-1,1107,"\t\t"],[1,1109,"        "],[-1,1122,"\t}\n\t\n\t// "],[1,1131,"    }\n\n    /**\n     * 该方法在"],[-1,1137,"成,进入到jsp"],[1,1145,"毕，进入到 JSP "],[-1,1149,".\n\t//"],[1,1154,"\n     *"],[1,1157,"："],[-1,1159,"是"],[1,1160,"用于"],[-1,1164,".\n\t// "],[1,1170,"以及"],[-1,1177,"\t"],[1,1178,"     * @param request\n     * @param response\n     * @param handler\n     * @param modelAndView\n     * @throws Exception\n     */\n    "],[-1,1188,"\t"],[1,1189,"    "],[-1,1231,"arg0"],[1,1235,"request"],[-1,1257,"arg1"],[1,1261,"response"],[1,1270,"h"],[1,1271,"ndle"],[-1,1272,"g2"],[-1,1289,"arg3)\n\t\t\t"],[1,1298,"modelAndView) "],[-1,1317,"\t\t"],[1,1319,"        "],[1,1322,"参数 ModelAndView modelAndView "],[-1,1330,"\n\t\t"],[1,1333,"，以及取到或修改视图中参数名；\n        "],[-1,1354,"\"+arg3"],[1,1360,"视图名：\" + modelAndView"],[1,1374," "],[1,1375," "],[1,1378,"；"],[-1,1382,"\t\t// 可以取到 model 的"],[1,1399,"        // 取出视图中参数"],[-1,1426,"可以通过 "],[1,1431,"使用 ."],[-1,1435,"键) 获"],[1,1439,"key值)"],[1,1441,"对应"],[-1,1443,"值能改\n\t\tSystem.out.println(\""],[1,1469,"\n        String modelString = "],[-1,1474,"的值\"+arg3"],[1,1482,"AndView"],[1,1506,".toString("],[-1,1509,"\t\targ3.getModel().put(\""],[1,1532,"        System.out.println("],[-1,1537,"\", \"修改后的内容\");\n\t\tString word = arg3"],[1,1571,"AndView"],[-1,1583,"ge"],[1,1585,"pu"],[1,1594,", \"修改后的值\""],[1,1606,")"],[-1,1608,"\t\t"],[1,1610,"        // 替换视图中参数值\n        "],[-1,1617,"newWord = word"],[1,1631,"modelStringReplace = modelString"],[-1,1641,"祖国"],[1,1643,"值"],[-1,1647,"**"],[1,1649,"替换的值"],[-1,1653,"\t\targ3"],[1,1659,"        modelAndView"],[-1,1684,"newWord"],[1,1691,"modelStringReplace"],[-1,1695,"\t\t"],[1,1697,"        "],[-1,1731,"\t}\n\t\n\t// jsp"],[1,1743,"    }\n\n    /**\n     * 该方法在 JSP "],[1,1747,"之"],[-1,1751,"\t//"],[1,1754,"     * 作用：用于"],[-1,1766,".\n\t//可以把"],[1,1774,"，并且可以将"],[1,1776,"日志"],[-1,1782,"\n\t"],[1,1784,"；\n     * @param request\n     * @param response\n     * @param handler\n     * @param ex\n     * @throws Exception\n     */\n    "],[-1,1794,"\t"],[1,1795,"    "],[-1,1842,"arg0"],[1,1846,"request"],[-1,1868,"arg1"],[1,1872,"response"],[1,1881,"h"],[1,1882,"ndle"],[-1,1883,"g2"],[-1,1897,"arg3)\n\t\t\t"],[1,1906,"ex) "],[-1,1925,"\t\t// 可以通过 arg3 是否"],[1,1942,"        // 参数 Exception ex 值"],[-1,1949,"判断是否出现"],[1,1955,"表示没有异常，反之有"],[-1,1959,"\t\t"],[1,1961,"        "],[-1,1981,"arg3:\"+arg3);\n\t\t"],[1,1997,"是否有异常：ex = \" + ex + \"   异常信息为：\" + ex.getMessage());\n        "],[-1,2033,"+arg3.getMessage()"],[-1,2054,"\t"],[1,2055,"    "]],[463,2059],[2843,2843]]],[1568985046260,["GJX@GJXAIOU",[[-1,2843,"\n"]],[2843,2843],[2842,2842]]],[1568985119885,["GJX@GJXAIOU",[[-1,3086," "],[-1,3107,"    "],[-1,3130,"        <mvc:mapping path=\"/demo\"/>\n         "],[-1,3204,"        "],[-1,3242,"        "],[-1,3268,"bjsxt"],[1,3273,"gjxaiou"],[-1,3286,"Demo"],[1,3301,"Demo"],[-1,3312,"    "],[-1,3334,"\n"]],[3086,3355],[3286,3286]]],[1568985122134,["GJX@GJXAIOU",[[1,3086," "],[1,3106,"    "],[1,3125,"        <mvc:mapping path=\"/demo\"/>\n         "],[1,3154,"        "],[1,3184,"        "],[1,3202,"bjsxt"],[-1,3202,"gjxaiou"],[1,3222,"Demo"],[-1,3233,"Demo"],[1,3248,"    "],[1,3266,"\n"]],[3286,3286],[3086,3355]]],[1568985124596,["GJX@GJXAIOU",[[1,3087,"   "],[1,3106,"   "],[-1,3138,"<mvc:mapping path=\"/demo\"/>\n      "],[1,3204,"   "],[1,3251,"   "],[-1,3268,"bjsxt"],[1,3273,"gjxaiou"],[-1,3286,"Demo"],[1,3301,"Demo"],[1,3311,"   "],[1,3335,"   "]],[3086,3355],[3341,3341]]],[1568985128866,["GJX@GJXAIOU",[[-1,3088,"  "],[-1,3109,"  "],[-1,3145,"  "],[-1,3176," "],[-1,3187," "],[-1,3217,"  "],[-1,3297,"  "],[-1,3318,"  "]],[3090,3341],[3088,3327]]],[1568985129379,["GJX@GJXAIOU",[[-1,3086,"  "],[-1,3107,"  "],[-1,3139,"  "],[-1,3170," "],[-1,3179," "],[-1,3209,"  "],[-1,3285,"  "],[-1,3306,"  "]],[3088,3327],[3086,3313]]],[1568985151219,["GJX@GJXAIOU",[[-1,2985,"bjsxt"],[1,2990,"gjxaiou"],[-1,3003,"Demo"],[1,3018,"Demo"]],[2981,3018],[3020,3020]]],[1568985162435,["GJX@GJXAIOU",[[1,2915,"\n"]],[2914,2914],[2915,2915]]],[1568985162950,["GJX@GJXAIOU",[[1,2915,"<!-- 扫描注解-->\n  <context:component-scan base-package=\"com.gjxaiou.controller\"></context:component-scan>   <!-- 注解驱动-->\n  <mvc:annotation-driven></mvc:annotation-driven>"]],[2915,2915],[3082,3082]]],[1568985165459,["GJX@GJXAIOU",[[1,3083,"  \n"]],[3082,3082],[3085,3085]]],[1568985168052,["GJX@GJXAIOU",[[-1,2915,"<!-- 扫描注解-->\n  <context:component-scan base-package=\"com.gjxaiou.controller\"></context:component-scan>   <!-- 注解驱动-->\n  <mvc:annotation-driven></mvc:annotation-driven>  \n"]],[3085,3085],[2915,2915]]],[1568985169738,["GJX@GJXAIOU",[[1,2916,"\n"]],[2915,2915],[2916,2916]]],[1568985172891,["GJX@GJXAIOU",[[1,2915,"<!--    扫描注解-->\n    <context:component-scan base-package=\"com.gjxaiou.controller\"></context:component-scan>\n\n<!--    注解驱动-->\n    <mvc:annotation-driven></mvc:annotation-driven>"]],[2915,2915],[3091,3091]]],[1568985177906,["GJX@GJXAIOU",[[-1,3028,"    "]],[3032,3032],[3028,3028]]],[1568985181537,["GJX@GJXAIOU",[[-1,2919,"    "]],[2923,2923],[2919,2919]]],[1568985296219,["GJX@GJXAIOU",[[1,3527,"package com.gjxaiou.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.servlet.ModelAndView;\n\n/**\n * @author GJXAIOU\n * @create 2019-09-20-19:50\n */\n"],[-1,3552,"Demo"],[1,3566,"Demo"],[-1,3569,"\t"],[1,3570,"    "],[1,3591,"1"],[-1,3594,"\t"],[1,3595,"    "],[1,3613,"1"],[-1,3614," "],[-1,3618,"\t\t"],[1,3620,"        "],[1,3642," "],[1,3646,"1"],[-1,3650,"//\t\tint i = 5/0;\n\t\t"],[1,3669,"        "],[-1,3689,"\t}\n\n\t// "],[1,3697,"    }\n\n    @RequestMapping(\""],[-1,3701,"4 没有在 s"],[1,3708,"2\")\n    public ModelAndView demo2(){\n        System.out."],[-1,3712,"gmvc 中配置，因此拦截器不会拦截\n\t"],[1,3732,"tln(\"执行 demo2\");\n        ModelAndView modelAndView = new ModelAndView(\"/index.jsp\").addObject(\"modelAndView\",\n                \"modelAndView 的值\");\n        return modelAndView;\n    }\n\n    "],[-1,3753,"4\")\n\t"],[1,3758,"3\")\n    "],[-1,3776,"4( "],[1,3779,"3("],[-1,3793,"\t\t"],[1,3795,"        "],[1,3817," "],[-1,3821,"4"],[1,3822,"3"],[-1,3826,"//\t\tint i = 5/0;\n\t\t"],[1,3845,"        "],[-1,3874,"我们都爱祖国."],[1,3881,"model 的值"],[-1,3885,"\t\t"],[1,3887,"        "],[-1,3907,"\t"],[1,3908,"    "],[1,3911,"\n"]],[3527,3911],[4451,4451]]],[1568985325028,["GJX@GJXAIOU",[[-1,4452,"\n"]],[4452,4452],[4451,4451]]],[1568985325356,["GJX@GJXAIOU",[[-1,4451,"\n"]],[4451,4451],[4450,4450]]],[1568985348266,["GJX@GJXAIOU",[[1,4457,"\n"]],[4454,4454],[4455,4455]]],[1568985348491,["GJX@GJXAIOU",[[1,4458,"\n"]],[4455,4455],[4456,4456]]],[1568985387219,["GJX@GJXAIOU",[[1,4456,"- t"]],[4456,4456],[4459,4459]]],[1568985387641,["GJX@GJXAIOU",[[-1,4458,"t"]],[4459,4459],[4458,4458]]],[1568985395756,["GJX@GJXAIOU",[[1,4458,"在 index.jsp 中接受"]],[4458,4458],[4473,4473]]],[1568985397234,["GJX@GJXAIOU",[[-1,4471,"接受"]],[4473,4473],[4471,4471]]],[1568985413811,["GJX@GJXAIOU",[[1,4471,"接收值【】"]],[4471,4471],[4476,4476]]],[1568985414585,["GJX@GJXAIOU",[[-1,4474,"【】"]],[4476,4476],[4474,4474]]],[1568985416373,["GJX@GJXAIOU",[[1,4475,"- \n"]],[4474,4474],[4477,4477]]],[1568985417027,["GJX@GJXAIOU",[[-1,4475,"- "]],[4477,4477],[4475,4475]]],[1568985424084,["GJX@GJXAIOU",[[1,4475,"```jsp"]],[4475,4475],[4481,4481]]],[1568985424716,["GJX@GJXAIOU",[[1,4484,"\n"]],[4481,4481],[4482,4482]]],[1568985424867,["GJX@GJXAIOU",[[1,4485,"\n"]],[4482,4482],[4483,4483]]],[1568985426276,["GJX@GJXAIOU",[[1,4483,"```"]],[4483,4483],[4486,4486]]],[1568985429568,["GJX@GJXAIOU",[[1,4482,"  <body>\n  modelAndView:${modelAndView} <br>\n\n  model:${model}\n  </body>"]],[4482,4482],[4554,4554]]],[1568985435570,["GJX@GJXAIOU",[[-1,4482,"  "]],[4484,4484],[4482,4482]]],[1568985438834,["GJX@GJXAIOU",[[-1,4543,"  "]],[4543,4545],[4543,4543]]],[1568985453006,["GJX@GJXAIOU",[[1,403,"[]"]],[403,403],[405,405]]],[1568985454635,["GJX@GJXAIOU",[[-1,403,"[]"]],[405,405],[403,403]]],[1568985455041,["GJX@GJXAIOU",[[1,403,"[]"]],[403,403],[405,405]]],[1568985456555,["GJX@GJXAIOU",[[-1,403,"[]"]],[405,405],[403,403]]],[1568985457047,["GJX@GJXAIOU",[[1,403,"【】"]],[403,403],[405,405]]],[1568985465139,["GJX@GJXAIOU",[[1,404,"通过下面的拦截器， demo2"]],[404,404],[419,419]]],[1568985470045,["GJX@GJXAIOU",[[-1,413," "]],[414,414],[413,413]]],[1568985472085,["GJX@GJXAIOU",[[1,413,"URL中"]],[413,413],[417,417]]],[1568985474897,["GJX@GJXAIOU",[[1,416," "],[1,417," 输入"]],[417,417],[420,420]]],[1568985478397,["GJX@GJXAIOU",[[1,426,"无法"]],[426,426],[428,428]]],[1568985478433,["GJX@GJXAIOU",[[1,426," "]],[428,428],[429,429]]],[1568985483468,["GJX@GJXAIOU",[[1,429,"访问，demo3k"]],[429,429],[438,438]]],[1568985484340,["GJX@GJXAIOU",[[-1,437,"k"]],[438,438],[437,437]]],[1568985485048,["GJX@GJXAIOU",[[1,437,"可以"]],[437,437],[439,439]]],[1568985485083,["GJX@GJXAIOU",[[1,437," "]],[439,439],[440,440]]],[1568985486014,["GJX@GJXAIOU",[[1,440,"访问"]],[440,440],[442,442]]],[1568985576806,[null,[[-1,418," "],[1,421," "]],[418,418],[422,422]]],[1568985576806,[null,[[1,418," "],[-1,420," "]],[422,422],[418,418]]],[1568985546377,["GJX@GJXAIOU",[[-1,6841,"."]],[6842,6842],[6841,6841]]],[1568985547251,["GJX@GJXAIOU",[[1,6841,"、"]],[6841,6841],[6842,6842]]],[1568987197800,[null,[[-1,418," "],[1,421," "]],[418,418],[422,422]]],[1568987197800,[null,[[1,418," "],[-1,420," "]],[422,422],[418,418]]],[1568987180617,["GJX@GJXAIOU",[[-1,26,"\n"]],[26,26],[25,25]]],[1568987182993,["GJX@GJXAIOU",[[-1,55,"\n"]],[55,55],[54,54]]],[1568987186907,["GJX@GJXAIOU",[[-1,102,"\n"]],[102,102],[101,101]]],[1568987677814,[null,[[-1,415," "],[1,418," "]],[415,415],[419,419]]],[1568987677814,[null,[[1,415," "],[-1,417," "]],[419,419],[415,415]]],[1568987651840,["GJX@GJXAIOU",[[1,68,"\n"]],[66,66],[67,67]]],[1568987651983,["GJX@GJXAIOU",[[1,69,"\n"]],[67,67],[68,68]]],[1568987652175,["GJX@GJXAIOU",[[1,70,"\n"]],[68,68],[69,69]]],[1568987658410,["GJX@GJXAIOU",[[1,68,"### （）"]],[68,68],[74,74]]],[1568987661502,["GJX@GJXAIOU",[[1,73,"使用北京"]],[73,73],[77,77]]],[1568987662231,["GJX@GJXAIOU",[[-1,73,"使用北京"]],[77,77],[73,73]]],[1568987663249,["GJX@GJXAIOU",[[1,73,"一"]],[73,73],[74,74]]],[1568987667848,["GJX@GJXAIOU",[[1,75,"使用背景"]],[75,75],[79,79]]],[1568987668107,["GJX@GJXAIOU",[[1,82,"\n"]],[79,79],[80,80]]],[1568987737816,[null,[[-1,430," "],[1,433," "]],[430,430],[434,434]]],[1568987737816,[null,[[1,430," "],[-1,432," "]],[434,434],[430,430]]],[1568987678607,["GJX@GJXAIOU",[[1,80,"Web项目中需要判断http接口用户Post上来的数据是否合法，如果不合法要另做处理，用户Post上来的数据是Json形式的，我们用了@RequestBody标记自动将json形式的提交封装为一个Model对象，这样一来，我们就不能判断在自动封装过程中是否出现了异常，此时便想起了springMVC中的interceptor，用于处理请求之前，做一些处理，我们可以取消@RequestBody标记，然后在interceptor中取得请求体，检查是否符合json要求，即是不是一个valid interceptor，但是这里出现了一个问题： \nhttpServletRequest的请求内容，只能被读取一次，在interceptor中读取了的话，在controller中便不能读取了，解决方式是，读取到的请求内容存起来，然后在controller中直接使用。 \n这里用到了interceptor的一种，HandlerInterceptor，"]],[80,80],[499,499]]],[1568987685730,["GJX@GJXAIOU",[[1,502,"\n"]],[499,499],[500,500]]],[1568987685848,["GJX@GJXAIOU",[[1,503,"\n"]],[500,500],[501,501]]],[1568987687552,["GJX@GJXAIOU",[[1,501,"### "]],[501,501],[505,505]]],[1568987689363,["GJX@GJXAIOU",[[-1,349," "],[1,350," "],[-1,458," "],[1,459," "],[1,505,"（）"]],[505,505],[507,507]]],[1568987692394,["GJX@GJXAIOU",[[1,506,"二"]],[506,506],[507,507]]],[1568987695656,["GJX@GJXAIOU",[[1,508,"## 2.HandlerInterceptor概述\n\n在SpringMVC 中定义一个Interceptor是比较非常简单，主要有两种方式： \n第一种：实现HandlerInterceptor 接口，或者是继承实现了HandlerInterceptor 接口的类，例如HandlerInterceptorAdapter； \n第二种：实现Spring的WebRequestInterceptor接口，或者是继承实现了WebRequestInterceptor的类。 \n现在主要结合一个例子说一下第一种方式：实现HandlerInterceptor接口。 \nHandlerInterceptor接口主要定义了三个方法： \n1\\. boolean preHandle (HttpServletRequest request, HttpServletResponse response, Object handle)方法：该方法将在请求处理之前进行调用，只有该方法返回true，才会继续执行后续的Interceptor和Controller，当返回值为true 时就会继续调用下一个Interceptor的preHandle 方法，如果已经是最后一个Interceptor的时候就会是调用当前请求的Controller方法； \n2.void postHandle (HttpServletRequest request, HttpServletResponse response, Object handle, ModelAndView modelAndView)方法：该方法将在请求处理之后，DispatcherServlet进行视图返回渲染之前进行调用，可以在这个方法中对Controller 处理之后的ModelAndView 对象进行操作。 \n3.void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handle, Exception ex)方法：该方法也是需要当前对应的Interceptor的preHandle方法的返回值为true时才会执行，该方法将在整个请求结束之后，也就是在DispatcherServlet 渲染了对应的视图之后执行。用于进行资源清理。"]],[508,508],[1500,1500]]],[1568987700231,["GJX@GJXAIOU",[[-1,508,"## 2."]],[513,513],[508,508]]],[1568988457813,[null,[[-1,1845," "],[1,1848," "]],[1845,1845],[1849,1849]]],[1568988457813,[null,[[1,1845," "],[-1,1847," "]],[1849,1849],[1845,1845]]],[1568988414796,["GJX@GJXAIOU",[[1,82," "],[-1,573," "],[1,574," "],[-1,663," "],[1,664," "],[-1,734," "],[1,735," "],[-1,778," "],[1,779," "],[-1,810," "],[1,811," "],[-1,1061," "],[1,1062," "],[-1,1273," "],[1,1274," "]],[82,82],[83,83]]],[1568988416279,["GJX@GJXAIOU",[[-1,82," "]],[83,83],[82,82]]],[1568988417306,["GJX@GJXAIOU",[[1,83," "]],[83,83],[84,84]]],[1568988419624,["GJX@GJXAIOU",[[1,91," "]],[91,91],[92,92]]],[1568988420960,["GJX@GJXAIOU",[[1,96," "]],[96,96],[97,97]]],[1568988422849,["GJX@GJXAIOU",[[1,101," "]],[101,101],[102,102]]],[1568988425576,["GJX@GJXAIOU",[[1,106," "]],[106,106],[107,107]]],[1568988432907,["GJX@GJXAIOU",[[1,130," "]],[130,130],[131,131]]],[1568988434450,["GJX@GJXAIOU",[[1,135," "]],[135,135],[136,136]]],[1568988435489,["GJX@GJXAIOU",[[1,142," "]],[142,142],[143,143]]],[1568988436384,["GJX@GJXAIOU",[[1,147," "]],[147,147],[148,148]]],[1568988440777,["GJX@GJXAIOU",[[1,128,"**"],[1,151,"**"]],[128,151],[128,155]]],[1568988637831,[null,[[-1,1858," "],[1,1861," "]],[1858,1858],[1862,1862]]],[1568988637831,[null,[[1,1858," "],[-1,1860," "]],[1862,1862],[1858,1858]]],[1568988589929,["GJX@GJXAIOU",[[1,160," "]],[160,160],[161,161]]],[1568988592247,["GJX@GJXAIOU",[[-1,160," "]],[161,161],[160,160]]],[1568988604482,["GJX@GJXAIOU",[[1,160," "]],[160,160],[161,161]]],[1568988606952,["GJX@GJXAIOU",[[1,173," "]],[173,173],[174,174]]],[1568988610208,["GJX@GJXAIOU",[[1,179," "]],[179,179],[180,180]]],[1568988611552,["GJX@GJXAIOU",[[1,184," "]],[184,184],[185,185]]],[1568988622224,["GJX@GJXAIOU",[[1,195," "]],[195,195],[196,196]]],[1568988623536,["GJX@GJXAIOU",[[1,201," "]],[201,201],[202,202]]],[1568988630272,["GJX@GJXAIOU",[[1,248," "]],[248,248],[249,249]]],[1568988631456,["GJX@GJXAIOU",[[1,251," "]],[251,251],[252,252]]],[1568988697833,[null,[[-1,1866," "],[1,1869," "]],[1866,1866],[1870,1870]]],[1568988697833,[null,[[1,1866," "],[-1,1868," "]],[1870,1870],[1866,1866]]],[1568988639174,["GJX@GJXAIOU",[[1,264,"可以"]],[264,264],[266,266]]],[1568988665714,["GJX@GJXAIOU",[[1,287," "]],[287,287],[288,288]]],[1568988667786,["GJX@GJXAIOU",[[1,306," "]],[306,306],[307,307]]],[1568988668698,["GJX@GJXAIOU",[[1,318," "]],[318,318],[319,319]]],[1568988672499,["GJX@GJXAIOU",[[1,332," "]],[332,332],[333,333]]],[1568988673533,["GJX@GJXAIOU",[[1,337," "]],[337,337],[338,338]]],[1568988675394,["GJX@GJXAIOU",[[1,347," "]],[347,347],[348,348]]],[1568988688403,["GJX@GJXAIOU",[[1,398," "]],[398,398],[399,399]]],[1568988693896,["GJX@GJXAIOU",[[1,380,"**"],[1,412,"**"]],[380,412],[380,416]]],[1568988757833,[null,[[-1,1879," "],[1,1882," "]],[1879,1879],[1883,1883]]],[1568988757833,[null,[[1,1879," "],[-1,1881," "]],[1883,1883],[1879,1879]]],[1568988707706,["GJX@GJXAIOU",[[1,429," "]],[429,429],[430,430]]],[1568988710386,["GJX@GJXAIOU",[[1,418," "]],[418,418],[419,419]]],[1568988730047,["GJX@GJXAIOU",[[-1,419,"i"]],[420,420],[419,419]]],[1568988731257,["GJX@GJXAIOU",[[1,419,"I"]],[419,419],[420,420]]],[1568988737770,["GJX@GJXAIOU",[[1,449," "]],[449,449],[450,450]]],[1568988740518,["GJX@GJXAIOU",[[-1,463,"，"]],[464,464],[463,463]]],[1568988741296,["GJX@GJXAIOU",[[1,463,"："]],[463,463],[464,464]]],[1568988752958,["GJX@GJXAIOU",[[-1,434,"了"]],[435,435],[434,434]]],[1568988817835,[null,[[-1,1881," "],[1,1884," "]],[1881,1881],[1885,1885]]],[1568988817835,[null,[[1,1881," "],[-1,1883," "]],[1885,1885],[1881,1881]]],[1568988758732,["GJX@GJXAIOU",[[1,434,"了"]],[434,434],[435,435]]],[1568988771290,["GJX@GJXAIOU",[[1,479," "]],[479,479],[480,480]]],[1568988774025,["GJX@GJXAIOU",[[1,490," "]],[490,490],[491,491]]],[1568988780943,["GJX@GJXAIOU",[[-1,537,"，"]],[538,538],[537,537]]],[1568988781385,["GJX@GJXAIOU",[[1,537,"；"]],[537,537],[538,538]]],[1568988788939,["GJX@GJXAIOU",[[1,614,"- "]],[614,614],[616,616]]],[1568988791393,["GJX@GJXAIOU",[[1,706,"- "]],[706,706],[708,708]]],[1568988803232,["GJX@GJXAIOU",[[1,779,"\n"]],[779,779],[780,780]]],[1568988814097,["GJX@GJXAIOU",[[1,504," "]],[504,504],[505,505]]],[1568988816361,["GJX@GJXAIOU",[[1,516," "]],[516,516],[517,517]]],[1568988877834,[null,[[-1,1891," "],[1,1894," "]],[1891,1891],[1895,1895]]],[1568988877834,[null,[[1,1891," "],[-1,1893," "]],[1895,1895],[1891,1891]]],[1568988821113,["GJX@GJXAIOU",[[1,572," "]],[572,572],[573,573]]],[1568988823843,["GJX@GJXAIOU",[[1,588," "]],[588,588],[589,589]]],[1568988828058,["GJX@GJXAIOU",[[1,600," "]],[600,600],[601,601]]],[1568988833698,["GJX@GJXAIOU",[[1,627," "]],[627,627],[628,628]]],[1568988847564,["GJX@GJXAIOU",[[1,658," "]],[658,658],[659,659]]],[1568988851935,["GJX@GJXAIOU",[[1,621,"**"],[1,624,"**"]],[621,624],[621,628]]],[1568988859202,["GJX@GJXAIOU",[[1,725," "]],[725,725],[726,726]]],[1568988861091,["GJX@GJXAIOU",[[1,732," "]],[732,732],[733,733]]],[1568988862226,["GJX@GJXAIOU",[[1,734," "]],[734,734],[735,735]]],[1568988865569,["GJX@GJXAIOU",[[1,756," "]],[756,756],[757,757]]],[1568988869802,["GJX@GJXAIOU",[[1,789," "]],[789,789],[790,790]]],[1568988937838,[null,[[-1,1905," "],[1,1908," "]],[1905,1905],[1909,1909]]],[1568988937838,[null,[[1,1905," "],[-1,1907," "]],[1909,1909],[1905,1905]]],[1568988878226,["GJX@GJXAIOU",[[1,768," "]],[768,768],[769,769]]],[1568988903955,["GJX@GJXAIOU",[[-1,797,"现在"]],[799,799],[797,797]]],[1568988905987,["GJX@GJXAIOU",[[1,797,"下面"]],[797,797],[799,799]]],[1568989117843,[null,[[-1,1906," "],[1,1909," "]],[1906,1906],[1910,1910]]],[1568989117843,[null,[[1,1906," "],[-1,1908," "]],[1910,1910],[1906,1906]]],[1568989096474,["GJX@GJXAIOU",[[1,841,"- "]],[841,841],[843,843]]],[1568989177842,[null,[[-1,1908," "],[1,1911," "]],[1908,1908],[1912,1912]]],[1568989177842,[null,[[1,1908," "],[-1,1910," "]],[1912,1912],[1908,1908]]],[1568989141960,["GJX@GJXAIOU",[[-1,841,"- "]],[841,843],[841,841]]],[1568989144032,["GJX@GJXAIOU",[[1,858," "]],[858,858],[859,859]]],[1568989145031,["GJX@GJXAIOU",[[-1,858," "]],[859,859],[858,858]]],[1568989145779,["GJX@GJXAIOU",[[1,859," "]],[859,859],[860,860]]],[1568989237844,[null,[[-1,1907," "],[1,1910," "]],[1907,1907],[1911,1911]]],[1568989237844,[null,[[1,1907," "],[-1,1909," "]],[1911,1911],[1907,1907]]],[1568989190217,["GJX@GJXAIOU",[[-1,874,"1\\. "]],[874,878],[874,874]]],[1568989195252,["GJX@GJXAIOU",[[1,874,"- ·"]],[874,874],[877,877]]],[1568989196545,["GJX@GJXAIOU",[[-1,876,"·"]],[877,877],[876,876]]],[1568989197033,["GJX@GJXAIOU",[[1,876,"`"]],[876,876],[877,877]]],[1568989198385,["GJX@GJXAIOU",[[1,968,"`"]],[968,968],[969,969]]],[1568989210617,["GJX@GJXAIOU",[[1,1009," "]],[1009,1009],[1010,1010]]],[1568989211794,["GJX@GJXAIOU",[[1,1021," "]],[1021,1021],[1022,1022]]],[1568989212818,["GJX@GJXAIOU",[[1,1023," "]],[1023,1023],[1024,1024]]],[1568989234423,["GJX@GJXAIOU",[[-1,1128,"2."]],[1128,1130],[1128,1128]]],[1568989234898,["GJX@GJXAIOU",[[1,1128,"- "]],[1128,1128],[1130,1130]]],[1568989297845,[null,[[-1,1910," "],[1,1913," "]],[1910,1910],[1914,1914]]],[1568989297845,[null,[[1,1910," "],[-1,1912," "]],[1914,1914],[1910,1910]]],[1568989238266,["GJX@GJXAIOU",[[1,1130,"`"]],[1130,1130],[1131,1131]]],[1568989240296,["GJX@GJXAIOU",[[1,1247,"`"]],[1247,1247],[1248,1248]]],[1568989291714,["GJX@GJXAIOU",[[1,1280," "]],[1280,1280],[1281,1281]]],[1568989296834,["GJX@GJXAIOU",[[1,1305," "]],[1305,1305],[1306,1306]]],[1568989357848,[null,[[-1,1914," "],[1,1917," "]],[1914,1914],[1918,1918]]],[1568989357848,[null,[[1,1914," "],[-1,1916," "]],[1918,1918],[1914,1914]]],[1568989301815,["GJX@GJXAIOU",[[-1,1344,"3."]],[1344,1346],[1344,1344]]],[1568989303634,["GJX@GJXAIOU",[[1,1344,"- `"]],[1344,1344],[1347,1347]]],[1568989306608,["GJX@GJXAIOU",[[1,1454,"`"]],[1454,1454],[1455,1455]]],[1568989323874,["GJX@GJXAIOU",[[1,1470," "]],[1470,1470],[1471,1471]]],[1568989326705,["GJX@GJXAIOU",[[1,1482," "]],[1482,1482],[1483,1483]]],[1568989331483,["GJX@GJXAIOU",[[1,1493," "]],[1493,1493],[1494,1494]]],[1568989333763,["GJX@GJXAIOU",[[1,1501," "]],[1501,1501],[1502,1502]]],[1568989335586,["GJX@GJXAIOU",[[1,1506," "]],[1506,1506],[1507,1507]]],[1568989356534,["GJX@GJXAIOU",[[1,1573,"## "]],[1573,1573],[1576,1576]]],[1568989357007,["GJX@GJXAIOU",[[1,1575,"#"]],[1576,1576],[1577,1577]]],[1568989417847,[null,[[-1,1925," "],[1,1928," "]],[1925,1925],[1929,1929]]],[1568989417847,[null,[[1,1925," "],[-1,1927," "]],[1929,1929],[1925,1925]]],[1568989362558,["GJX@GJXAIOU",[[1,1577,"()"]],[1577,1577],[1579,1579]]],[1568989363847,["GJX@GJXAIOU",[[-1,1577,"()"]],[1579,1579],[1577,1577]]],[1568989364360,["GJX@GJXAIOU",[[1,1577,"()"]],[1577,1577],[1579,1579]]],[1568989365622,["GJX@GJXAIOU",[[-1,1577,"()"]],[1579,1579],[1577,1577]]],[1568989366327,["GJX@GJXAIOU",[[1,1577,"（）"]],[1577,1577],[1579,1579]]],[1568989368264,["GJX@GJXAIOU",[[1,1578,"三"]],[1578,1578],[1579,1579]]],[1568989371081,["GJX@GJXAIOU",[[1,1580,"具体实现"]],[1580,1580],[1584,1584]]],[1568989372528,["GJX@GJXAIOU",[[1,1585,"\n"]],[1584,1584],[1585,1585]]],[1568989657852,[null,[[-1,1933," "],[1,1936," "]],[1933,1933],[1937,1937]]],[1568989657852,[null,[[1,1933," "],[-1,1935," "]],[1937,1937],[1933,1933]]],[1568989641728,["GJX@GJXAIOU",[[1,1573,"\n"]],[1572,1572],[1573,1573]]],[1568989641856,["GJX@GJXAIOU",[[1,1574,"\n"]],[1573,1573],[1574,1574]]],[1568989644258,["GJX@GJXAIOU",[[1,1574,"****"]],[1574,1574],[1576,1576]]],[1568989652128,["GJX@GJXAIOU",[[1,1576,"执行顺序："]],[1576,1576],[1581,1581]]],[1568989655075,["GJX@GJXAIOU",[[1,1576,"放个"]],[1576,1576],[1578,1578]]],[1568989655623,["GJX@GJXAIOU",[[-1,1576,"放个"]],[1578,1578],[1576,1576]]],[1568989656843,["GJX@GJXAIOU",[[1,1576,"单个"]],[1576,1576],[1578,1578]]],[1568989717850,[null,[[-1,1946," "],[1,1949," "]],[1946,1946],[1950,1950]]],[1568989717850,[null,[[1,1946," "],[-1,1948," "]],[1950,1950],[1946,1946]]],[1568989659060,["GJX@GJXAIOU",[[1,1578,"拦截器"]],[1578,1578],[1581,1581]]],[1568989661471,["GJX@GJXAIOU",[[1,1589,"\n"]],[1588,1588],[1589,1589]]],[1568989667627,["GJX@GJXAIOU",[[1,1589,"Pre"]],[1589,1589],[1592,1592]]],[1568989668711,["GJX@GJXAIOU",[[-1,1590,"re"]],[1592,1592],[1590,1590]]],[1568989669419,["GJX@GJXAIOU",[[1,1590,"p"]],[1590,1590],[1591,1591]]],[1568989669963,["GJX@GJXAIOU",[[-1,1589,"Pp"]],[1591,1591],[1589,1589]]],[1568989673729,["GJX@GJXAIOU",[[1,1589,"preHanld"]],[1589,1589],[1597,1597]]],[1568989674382,["GJX@GJXAIOU",[[-1,1595,"ld"]],[1597,1597],[1595,1595]]],[1568989677721,["GJX@GJXAIOU",[[1,1595,"dle - > "]],[1595,1595],[1603,1603]]],[1568989678529,["GJX@GJXAIOU",[[-1,1600," > "]],[1603,1603],[1600,1600]]],[1568989682232,["GJX@GJXAIOU",[[1,1600,"> Jint"]],[1600,1600],[1606,1606]]],[1568989683390,["GJX@GJXAIOU",[[-1,1602,"Jint"]],[1606,1606],[1602,1602]]],[1568989683994,["GJX@GJXAIOU",[[1,1602,"Jint"]],[1602,1602],[1606,1606]]],[1568989684943,["GJX@GJXAIOU",[[-1,1602,"Jint"]],[1606,1606],[1602,1602]]],[1568989685489,["GJX@GJXAIOU",[[1,1602,"Jin"]],[1602,1602],[1605,1605]]],[1568989686190,["GJX@GJXAIOU",[[-1,1601," Jin"]],[1605,1605],[1601,1601]]],[1568989690992,["GJX@GJXAIOU",[[1,1601,"进入控制器（）"]],[1601,1601],[1608,1608]]],[1568989695643,["GJX@GJXAIOU",[[1,1607,"controller"]],[1607,1607],[1617,1617]]],[1568989707255,["GJX@GJXAIOU",[[1,1618,"-> postHandls"]],[1618,1618],[1631,1631]]],[1568989708070,["GJX@GJXAIOU",[[-1,1630,"s"]],[1631,1631],[1630,1630]]],[1568989717104,["GJX@GJXAIOU",[[1,1630,"er -> JSP ->"]],[1630,1630],[1642,1642]]],[1568989777852,[null,[[-1,2003," "],[1,2006," "]],[2003,2003],[2007,2007]]],[1568989777852,[null,[[1,2003," "],[-1,2005," "]],[2007,2007],[2003,2003]]],[1568989723999,["GJX@GJXAIOU",[[1,1642," afterc"]],[1642,1642],[1649,1649]]],[1568989724830,["GJX@GJXAIOU",[[-1,1648,"c"]],[1649,1649],[1648,1648]]],[1568989725207,["GJX@GJXAIOU",[[1,1648,"c"]],[1648,1648],[1649,1649]]],[1568989725911,["GJX@GJXAIOU",[[-1,1648,"c"]],[1649,1649],[1648,1648]]],[1568989729961,["GJX@GJXAIOU",[[1,1648,"Completion"]],[1648,1648],[1658,1658]]],[1568989731942,["GJX@GJXAIOU",[[1,1659,"\n"]],[1658,1658],[1659,1659]]],[1568989732077,["GJX@GJXAIOU",[[1,1660,"\n"]],[1659,1659],[1660,1660]]]],null,"GJX@GJXAIOU"],["0e740f30-c33b-4dea-9411-0d094b097a88",1569025458385,"# FrameDay03_3 SpringMVC\n\n**重要知识点**\n* 自定义拦截器\n* 登录状态验证\n\n## 一、自定义拦截器\n\n### （一）使用背景\nWeb 项目中需要判断 http 接口用户 Post 上来的数据是否合法，如果不合法要另做处理，**用户 Post 上来的数据是 Json 形式的**，我们用了 @RequestBody 标记自动将 json 形式的提交封装为一个 Model 对象，这样一来，我们就不能判断在自动封装过程中是否出现了异常，此时便想起了springMVC 中的 interceptor，可以用于处理请求之前，做一些处理，我们可以取消 @RequestBody标记，然后在 interceptor 中取得请求体，检查是否符合 json 要求，即是不是一个 valid interceptor，但是这里出现了一个问题： \n**httpServletRequest 的请求内容，只能被读取一次**，在 Interceptor 中读取了的话，在controller 中便不能读取了，解决方式是：读取到的请求内容存起来，然后在 controller 中直接使用。 \n这里用到了 interceptor 的一种，HandlerInterceptor；\n\n### （二）HandlerInterceptor概述\n\n在 SpringMVC 中定义一个 Interceptor 是比较非常简单，主要有两种方式： \n- **第一种**：实现 HandlerInterceptor 接口，或者是继承实现了 HandlerInterceptor 接口的类，例如HandlerInterceptorAdapter； \n- 第二种：实现 Spring 的 WebRequestInterceptor 接口，或者是继承实现了 WebRequestInterceptor 的类。 \n\n下面主要结合一个例子说一下第一种方式：实现HandlerInterceptor接口。 \nHandlerInterceptor 接口主要定义了三个方法： \n- `boolean preHandle (HttpServletRequest request, HttpServletResponse response, Object handle)`方法：该方法将在请求处理之前进行调用，只有该方法返回true，才会继续执行后续的 Interceptor 和 Controller，当返回值为true 时就会继续调用下一个Interceptor的preHandle 方法，如果已经是最后一个Interceptor的时候就会是调用当前请求的Controller方法； \n- `void postHandle (HttpServletRequest request, HttpServletResponse response, Object handle, ModelAndView modelAndView)`方法：该方法将在请求处理之后，DispatcherServlet 进行视图返回渲染之前进行调用，可以在这个方法中对 Controller 处理之后的ModelAndView 对象进行操作。 \n- `void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handle, Exception ex)`方法：该方法也是需要当前对应的 Interceptor 的preHandle 方法的返回值为 true 时才会执行，该方法将在整个请求结束之后，也就是在DispatcherServlet 渲染了对应的视图之后执行。用于进行资源清理。\n\n\n**单个拦截器执行顺序：**\npreHandle ->进入控制器（controller）-> postHandler -> JSP -> afterCompletion\n\n\n### （三）具体实现\n\n**AOP拦截的是方法，SpringMVC 拦截器拦截的是请求**\n- 跟过滤器比较像的技术；\n- 发送**请求**时被拦截器拦截，拦截之后可以在控制器的前后添加额外功能；\n-  跟 AOP 区分开\n  - AOP 在特定方法前后进行扩充(主要针对 ServiceImpl 进行扩充)，其中特定方法指的是：只要这个方法可以被spring管理，就可以在这个方法前后进行扩充；\n  - SpringMVC 拦截器：请求的拦截，针对点是控制器方法(主要针对 Controller)；\n\n- SpringMVC 拦截器和Filter 的区别\n  - 拦截器只能拦截 Controller；\n  - Filter 可以拦截任何请求；\n  \n**实现自定义拦截器的步骤:**\n【通过下面的拦截器，URL 中输入 demo2 无法访问，demo3 可以访问】\n- 首先新建类并实现 HandlerInterceptor（使用 Ctrl + O 重写未实现方法）\n```java\npackage com.gjxaiou.interceptor;\n\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/** 自定义类，同时实现 HandlerInterceptor，同时添加未实现的方法\n * @author GJXAIOU\n * @create 2019-09-20-19:34\n */\npublic class InterceptorDemo implements HandlerInterceptor {\n    /**\n     * 该方法在进入控制器之前执行\n     * 所有的控制代码都写在这里，什么情况下可以访问路径，什么情况下不能访问路径；\n     * @param request\n     * @param response\n     * @param handler\n     * @return true 表示进入拦截器，false 表示阻止进入拦截器\n     * @throws Exception\n     */\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        // 参数 Object handler 表示拦截器拦截的方法的全称\n        System.out.println(\"拦截的方法为：handeler = \" + handler);\n        System.out.println(\"preHandle\");\n        return true;\n    }\n\n    /**\n     * 该方法在控制器执行完毕，进入到 JSP 之前执行\n     * 作用：可以用于日志记录以及敏感词语过滤\n     * @param request\n     * @param response\n     * @param handler\n     * @param modelAndView\n     * @throws Exception\n     */\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n        // 参数 ModelAndView modelAndView 可以取到视图的值，以及取到或修改视图中参数名；\n        System.out.println(\"往视图名：\" + modelAndView.getViewName() + \"跳转；\");\n        // 取出视图中参数值，因为 getModel() 返回值为 Map，因此使用 .get(key值)取到对应值；\n        String modelString = modelAndView.getModel().get(\"model\").toString();\n        System.out.println(modelAndView.getModel().put(\"model\", \"修改后的值\").toString());\n        // 替换视图中参数值\n        String modelStringReplace = modelString.replace(\"值\", \"替换的值\");\n        modelAndView.getModel().put(\"model\", modelStringReplace);\n\n        System.out.println(\"postHandle\");\n    }\n\n    /**\n     * 该方法在 JSP 执行完成之后执行\n     * 作用：用于记录执行过程中出现的异常，并且可以将异常日志记录到日志中；\n     * @param request\n     * @param response\n     * @param handler\n     * @param ex\n     * @throws Exception\n     */\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n        // 参数 Exception ex 值为 NULL 表示没有异常，反之有异常；\n        System.out.println(\"是否有异常：ex = \" + ex + \"   异常信息为：\" + ex.getMessage());\n        System.out.println(\"afterCompletion\");\n    }\n}\n```\n\n-  然后在springmvc.xml 配置拦截器需要拦截哪些控制器\n分为拦截所有控制器和拦截特定 URL 的控制器；\n```xml\n<!--扫描注解-->\n    <context:component-scan base-package=\"com.gjxaiou.controller\"></context:component-scan>\n\n<!--注解驱动-->\n    <mvc:annotation-driven></mvc:annotation-driven>\n\n<!--第一种表示所有控制器全部拦截-->  \n<mvc:interceptors>      \n    <bean class=\"com.gjxaiou.interceptor.InterceptorDemo\"></bean>   </mvc:interceptors>-->   \n    \n<!-- 第二种表示只拦截以下路径的控制器-->\n<mvc:interceptors>\n    <mvc:interceptor>\n        <mvc:mapping path=\"/demo1\"/>\n        <mvc:mapping path=\"/demo2\"/>\n        <bean class=\"com.gjxaiou.interceptor.InterceptorDemo\"></bean>\n    </mvc:interceptor>\n</mvc:interceptors>\n```\n\n- 控制器中实现的 DemoController 为：\n```java\npackage com.gjxaiou.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.servlet.ModelAndView;\n\n/**\n * @author GJXAIOU\n * @create 2019-09-20-19:50\n */\n@Controller\npublic class ControllerDemo {\n    @RequestMapping(\"demo1\")\n    public String demo1(){\n        System.out.println(\"执行 demo1\");\n        return \"index.jsp\";\n    }\n\n    @RequestMapping(\"demo2\")\n    public ModelAndView demo2(){\n        System.out.println(\"执行 demo2\");\n        ModelAndView modelAndView = new ModelAndView(\"/index.jsp\").addObject(\"modelAndView\",\n                \"modelAndView 的值\");\n        return modelAndView;\n    }\n\n    @RequestMapping(\"demo3\")\n    public String demo3(Model model){\n        System.out.println(\"执行 demo3\");\n        model.addAttribute(\"model\", \"model 的值\");\n        return \"index.jsp\";\n    }\n}\n```\n\n- 在 index.jsp 中接收值\n```jsp\n<body>\n  modelAndView:${modelAndView} <br>\n\n  model:${model}\n</body>\n```\n\n\n## 二、拦截器栈\n\n- 多个拦截器同时生效时,组成了拦截器栈\n- 执行顺序：整体标准为先进后出；\n- 执行顺序和在 springmvc.xml 中配置顺序有关\n- 设置先配置拦截器A 在配置拦截器B 执行顺序为\npreHandle(A)  --> preHandle(B)  -->  控制器方法  -->  postHandle(B)-->  postHanle(A)  -->  JSP  -->  afterCompletion(B)  -->  afterCompletion(A)\n\n**代码示例：**\n同时在包 com.bjsxt.interceptor 包下面实现两个拦截器：interceptor1 和 interceptor2，两者的示例代码相同，但是 print 函数结果不同作为区分；\n```java\npackage com.bjsxt.interceptor;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.ModelAndView;\n\npublic class DemoInterceptor1 implements HandlerInterceptor {\n\t@Override\n\tpublic boolean preHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2) throws Exception {\n\t\tSystem.out.println(\"preHandle1\");\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)\n\t\t\tthrows Exception {\n\t\tSystem.out.println(\"postHandle1\");\n\t}\n\n\t@Override\n\tpublic void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)\n\t\t\tthrows Exception {\n\t\tSystem.out.println(\"afterCompletion1\");\n\t}\n}\n\n```\n\n然后在 springmvc.xml 配置拦截器为：\n```xml\n<!-- 拦截器 -->\n<mvc:interceptors>\n\t<!--拦截顺序和配置顺序有关-->\n\t<bean class=\"com.bjsxt.interceptor.DemoInterceptor1\"></bean>\n\t<bean class=\"com.bjsxt.interceptor.DemoInterceptor2\"></bean>\n</mvc:interceptors>\n```\n假设 controller 中只有一个控制器：\n```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"demo\")\n\tpublic String demo( ){\n\t\tSystem.out.println(\"执行demo\");\n\t\treturn \"index.jsp\";\n\t}\n}\n```\n当通过 URL 访问：`http://localhost:8080/springmvc07_war_exploded/demo`时候，结果为：\n```java\npreHandle1\npreHandle2\n执行demo\npostHandle2\npostHandle1\nindex.jsp\nafterCompletion2\nafterCompletion1\n```\n\n\n## 三、SpringMVC 运行原理\n\n如果在  web.xml 中设置  DispatcherServlet 的<url-pattern>为/时，当用户发起请求， 请求一个控制器时， 首先会执行  DispatcherServlet。 由DispatcherServlet 调  用  HandlerMapping 的DefaultAnnotationHandlerMapping 解  析  URL， 解  析  后  调  用HandlerAdatper 组  件  的  AnnotationMethodHandlerAdapter 去  调  用Controller 中的  HandlerMethod。当  HandlerMethod 执行完成后会返回View，返回的view会被  ViewResovler 进行视图解析，解析后调用  jsp 对应的.class 文件并运行，最终把运行.class 文件的结果响应给客户端。\n\n\n## 四、SpringMVC 对 Date 类型转换\n\n- 只需要在springmvc.xml 中配置,代码中不需要做任何修改；\n  * 必须额外导入 joda-time.jar\n  * 时间类型 java.sql.Date\nspringmvc.xml 内容为：\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/mvc\n        http://www.springframework.org/schema/mvc/spring-mvc.xsd\">\n\t<!-- 扫描注解 -->\n\t<context:component-scan base-package=\"com.bjsxt.controller\"></context:component-scan>\n\t<!-- 注解驱动 -->\n\t<mvc:annotation-driven conversion-service=\"conversionService\"></mvc:annotation-driven>\n\n\n<bean id=\"conversionService\"\n\t\tclass=\"org.springframework.format.support.FormattingConversionServiceFactoryBean\">\n\t\t<property name=\"registerDefaultFormatters\" value=\"false\" />\n\t\t<property name=\"formatters\">\n\t\t\t<set>\n\t\t\t\t<bean\n\t\t\t\t\tclass=\"org.springframework.format.number.NumberFormatAnnotationFormatterFactory\" />\n\t\t\t</set>\n\t\t</property>\n\t\t<property name=\"formatterRegistrars\">\n\t\t\t<set>\n\t\t\t\t<bean\n\t\t\t\t\tclass=\"org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar\">\n\t\t\t\t\t<property name=\"dateFormatter\">\n\t\t\t\t\t\t<bean\n\t\t\t\t\t\t\tclass=\"org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean\">\n\t\t\t\t\t\t\t<property name=\"pattern\" value=\"yyyy-MM-dd\" />\n\t\t\t\t\t\t</bean>\n\t\t\t\t\t</property>\n\t\t\t\t</bean>\n\t\t\t</set>\n\t\t</property>\n\t</bean>\n</beans>\n```\n\n\n- 使用注解：在需要转换的参数或实体类属性上添加`@DateTimeFormatter(pattern=”表达式”)`\n  - 使用Date 参数接收（在控制器中）\n```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"demo\")\n    public String demo(@DateTimeFormat(pattern=\"yyyy-MM-dd\") Date time){\n        System.out.println(time);\n        return \"main.jsp\";\n    }\n}\n```\n\n- 具体的实体类为：\n```java\npublic class Demo1 {\n\t@DateTimeFormat(pattern=\"yyyy/MM/dd\")\n\tprivate Date time;\n\n\tpublic Date getTime() {\n\t\treturn time;\n\t}\n\n\tpublic void setTime(Date time) {\n\t\tthis.time = time;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Demo1 [time=\" + time.toLocaleString() + \"]\";\n\t}\n}\n```\n\n- 注意地方:\n  * 不需要导入额外jar\n  * Date 是java.util.Date",[[1569025423317,["GJX@GJXAIOU",[[1,1067," "]],[1067,1067],[1068,1068]]],[1569025427483,["GJX@GJXAIOU",[[1,1090," "]],[1090,1090],[1091,1091]]],[1569025428732,["GJX@GJXAIOU",[[1,1102," "]],[1102,1102],[1103,1103]]],[1569025430307,["GJX@GJXAIOU",[[1,1116," "]],[1116,1116],[1117,1117]]],[1569025431522,["GJX@GJXAIOU",[[1,1127," "]],[1127,1127],[1128,1128]]],[1569025672057,["GJX@GJXAIOU",[[1,2356,"\n"]],[2356,2356],[2357,2357]]],[1569025678529,["GJX@GJXAIOU",[[1,2357," * "]],[2357,2357],[2360,2360]]],[1569025749033,["GJX@GJXAIOU",[[-1,4338,"值为 NULL 表示没有异常，反之有异常；"]],[4338,4359],[4338,4338]]],[1569025752808,["GJX@GJXAIOU",[[1,4124," 值为 NULL 表示没有异常，反之有异常；"]],[4124,4124],[4146,4146]]],[1569025755610,["GJX@GJXAIOU",[[1,4125,"："]],[4125,4125],[4126,4126]]],[1569025759304,["GJX@GJXAIOU",[[-1,4341," // 参数 Exception ex "]],[4341,4361],[4341,4341]]],[1569025761367,["GJX@GJXAIOU",[[-1,4333,"\n"]],[4334,4334],[4333,4333]]]],null,"GJX@GJXAIOU"],["9b575569-0be9-4c88-af7a-55219dfd0117",1572260009970,"# FrameDay03_3 SpringMVC\n\n**重要知识点**\n* 自定义拦截器\n* 登录状态验证\n\n## 一、自定义拦截器\n\n### （一）使用背景\nWeb 项目中需要判断 http 接口用户 Post 上来的数据是否合法，如果不合法要另做处理，**用户 Post 上来的数据是 Json 形式的**，我们用了 @RequestBody 标记自动将 json 形式的提交封装为一个 Model 对象，这样一来，我们就不能判断在自动封装过程中是否出现了异常，此时便想起了springMVC 中的 interceptor，可以用于处理请求之前，做一些处理，我们可以取消 @RequestBody标记，然后在 interceptor 中取得请求体，检查是否符合 json 要求，即是不是一个 valid interceptor，但是这里出现了一个问题： \n**httpServletRequest 的请求内容，只能被读取一次**，在 Interceptor 中读取了的话，在controller 中便不能读取了，解决方式是：读取到的请求内容存起来，然后在 controller 中直接使用。 \n这里用到了 interceptor 的一种，HandlerInterceptor；\n\n### （二）HandlerInterceptor概述\n\n在 SpringMVC 中定义一个 Interceptor 是比较非常简单，主要有两种方式： \n- **第一种**：实现 HandlerInterceptor 接口，或者是继承实现了 HandlerInterceptor 接口的类，例如HandlerInterceptorAdapter； \n- 第二种：实现 Spring 的 WebRequestInterceptor 接口，或者是继承实现了 WebRequestInterceptor 的类。 \n\n下面主要结合一个例子说一下第一种方式：实现HandlerInterceptor接口。 \nHandlerInterceptor 接口主要定义了三个方法： \n- `boolean preHandle (HttpServletRequest request, HttpServletResponse response, Object handle)`方法：该方法将在请求处理之前进行调用，只有该方法返回true，才会继续执行后续的 Interceptor 和 Controller，当返回值为true 时就会继续调用下一个Interceptor的 preHandle 方法，如果已经是最后一个 Interceptor 的时候就会是调用当前请求的 Controller 方法； \n- `void postHandle (HttpServletRequest request, HttpServletResponse response, Object handle, ModelAndView modelAndView)`方法：该方法将在请求处理之后，DispatcherServlet 进行视图返回渲染之前进行调用，可以在这个方法中对 Controller 处理之后的ModelAndView 对象进行操作。 \n- `void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handle, Exception ex)`方法：该方法也是需要当前对应的 Interceptor 的preHandle 方法的返回值为 true 时才会执行，该方法将在整个请求结束之后，也就是在DispatcherServlet 渲染了对应的视图之后执行。用于进行资源清理。\n\n\n**单个拦截器执行顺序：**\npreHandle ->进入控制器（controller）-> postHandler -> JSP -> afterCompletion\n\n\n### （三）具体实现\n\n**AOP拦截的是方法，SpringMVC 拦截器拦截的是请求**\n- 跟过滤器比较像的技术；\n- 发送**请求**时被拦截器拦截，拦截之后可以在控制器的前后添加额外功能；\n-  跟 AOP 区分开\n  - AOP 在特定方法前后进行扩充(主要针对 ServiceImpl 进行扩充)，其中特定方法指的是：只要这个方法可以被spring管理，就可以在这个方法前后进行扩充；\n  - SpringMVC 拦截器：请求的拦截，针对点是控制器方法(主要针对 Controller)；\n\n- SpringMVC 拦截器和Filter 的区别\n  - 拦截器只能拦截 Controller；\n  - Filter 可以拦截任何请求；\n  \n**实现自定义拦截器的步骤:**\n【通过下面的拦截器，URL 中输入 demo2 无法访问，demo3 可以访问】\n- 首先新建类并实现 HandlerInterceptor（使用 Ctrl + O 重写未实现方法）\n```java\npackage com.gjxaiou.interceptor;\n\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/** \n * 自定义类，同时实现 HandlerInterceptor，同时添加未实现的方法\n * @author GJXAIOU\n * @create 2019-09-20-19:34\n */\npublic class InterceptorDemo implements HandlerInterceptor {\n    /**\n     * 该方法在进入控制器之前执行\n     * 所有的控制代码都写在这里，什么情况下可以访问路径，什么情况下不能访问路径；\n     * @param request\n     * @param response\n     * @param handler\n     * @return true 表示进入拦截器，false 表示阻止进入拦截器\n     * @throws Exception\n     */\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        // 参数 Object handler 表示拦截器拦截的方法的全称\n        System.out.println(\"拦截的方法为：handeler = \" + handler);\n        System.out.println(\"preHandle\");\n        return true;\n    }\n\n    /**\n     * 该方法在控制器执行完毕，进入到 JSP 之前执行\n     * 作用：可以用于日志记录以及敏感词语过滤\n     * @param request\n     * @param response\n     * @param handler\n     * @param modelAndView\n     * @throws Exception\n     */\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n        // 参数 ModelAndView modelAndView 可以取到视图的值，以及取到或修改视图中参数名；\n        System.out.println(\"往视图名：\" + modelAndView.getViewName() + \"跳转；\");\n        // 取出视图中参数值，因为 getModel() 返回值为 Map，因此使用 .get(key值)取到对应值；\n        String modelString = modelAndView.getModel().get(\"model\").toString();\n        System.out.println(modelAndView.getModel().put(\"model\", \"修改后的值\").toString());\n        // 替换视图中参数值\n        String modelStringReplace = modelString.replace(\"值\", \"替换的值\");\n        modelAndView.getModel().put(\"model\", modelStringReplace);\n\n        System.out.println(\"postHandle\");\n    }\n\n    /**\n     * 该方法在 JSP 执行完成之后执行\n     * 作用：用于记录执行过程中出现的异常，并且可以将异常日志记录到日志中；\n     * @param request\n     * @param response\n     * @param handler\n     * @param ex ：值为 NULL 表示没有异常，反之有异常；\n     * @throws Exception\n     */\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {       \n        System.out.println(\"是否有异常：ex = \" + ex + \"   异常信息为：\" + ex.getMessage());\n        System.out.println(\"afterCompletion\");\n    }\n}\n```\n\n-  然后在springmvc.xml 配置拦截器需要拦截哪些控制器\n分为拦截所有控制器和拦截特定 URL 的控制器；\n```xml\n<!--扫描注解-->\n    <context:component-scan base-package=\"com.gjxaiou.controller\"></context:component-scan>\n\n<!--注解驱动-->\n    <mvc:annotation-driven></mvc:annotation-driven>\n\n<!--第一种表示所有控制器全部拦截-->  \n<mvc:interceptors>      \n    <bean class=\"com.gjxaiou.interceptor.InterceptorDemo\"></bean>   </mvc:interceptors>-->   \n    \n<!-- 第二种表示只拦截以下路径的控制器-->\n<mvc:interceptors>\n    <mvc:interceptor>\n        <mvc:mapping path=\"/demo1\"/>\n        <mvc:mapping path=\"/demo2\"/>\n        <bean class=\"com.gjxaiou.interceptor.InterceptorDemo\"></bean>\n    </mvc:interceptor>\n</mvc:interceptors>\n```\n\n- 控制器中实现的 DemoController 为：\n```java\npackage com.gjxaiou.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.servlet.ModelAndView;\n\n/**\n * @author GJXAIOU\n * @create 2019-09-20-19:50\n */\n@Controller\npublic class ControllerDemo {\n    @RequestMapping(\"demo1\")\n    public String demo1(){\n        System.out.println(\"执行 demo1\");\n        return \"index.jsp\";\n    }\n\n    @RequestMapping(\"demo2\")\n    public ModelAndView demo2(){\n        System.out.println(\"执行 demo2\");\n        ModelAndView modelAndView = new ModelAndView(\"/index.jsp\").addObject(\"modelAndView\",\n                \"modelAndView 的值\");\n        return modelAndView;\n    }\n\n    @RequestMapping(\"demo3\")\n    public String demo3(Model model){\n        System.out.println(\"执行 demo3\");\n        model.addAttribute(\"model\", \"model 的值\");\n        return \"index.jsp\";\n    }\n}\n```\n\n- 在 index.jsp 中接收值\n```jsp\n<body>\n  modelAndView:${modelAndView} <br>\n\n  model:${model}\n</body>\n```\n\n\n## 二、拦截器栈\n\n- 多个拦截器同时生效时,组成了拦截器栈\n- 执行顺序：整体标准为先进后出；\n- 执行顺序和在 springmvc.xml 中配置顺序有关\n- 设置先配置拦截器A 在配置拦截器B 执行顺序为\npreHandle(A)  --> preHandle(B)  -->  控制器方法  -->  postHandle(B)-->  postHanle(A)  -->  JSP  -->  afterCompletion(B)  -->  afterCompletion(A)\n\n**代码示例：**\n同时在包 com.bjsxt.interceptor 包下面实现两个拦截器：interceptor1 和 interceptor2，两者的示例代码相同，但是 print 函数结果不同作为区分；\n```java\npackage com.bjsxt.interceptor;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.ModelAndView;\n\npublic class DemoInterceptor1 implements HandlerInterceptor {\n\t@Override\n\tpublic boolean preHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2) throws Exception {\n\t\tSystem.out.println(\"preHandle1\");\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)\n\t\t\tthrows Exception {\n\t\tSystem.out.println(\"postHandle1\");\n\t}\n\n\t@Override\n\tpublic void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)\n\t\t\tthrows Exception {\n\t\tSystem.out.println(\"afterCompletion1\");\n\t}\n}\n\n```\n\n然后在 springmvc.xml 配置拦截器为：\n```xml\n<!-- 拦截器 -->\n<mvc:interceptors>\n\t<!--拦截顺序和配置顺序有关-->\n\t<bean class=\"com.bjsxt.interceptor.DemoInterceptor1\"></bean>\n\t<bean class=\"com.bjsxt.interceptor.DemoInterceptor2\"></bean>\n</mvc:interceptors>\n```\n假设 controller 中只有一个控制器：\n```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"demo\")\n\tpublic String demo( ){\n\t\tSystem.out.println(\"执行demo\");\n\t\treturn \"index.jsp\";\n\t}\n}\n```\n当通过 URL 访问：`http://localhost:8080/springmvc07_war_exploded/demo`时候，结果为：\n```java\npreHandle1\npreHandle2\n执行demo\npostHandle2\npostHandle1\nindex.jsp\nafterCompletion2\nafterCompletion1\n```\n\n\n## 三、SpringMVC 运行原理\n\n如果在  web.xml 中设置  DispatcherServlet 的<url-pattern>为/时，当用户发起请求， 请求一个控制器时， 首先会执行  DispatcherServlet。 由DispatcherServlet 调  用  HandlerMapping 的DefaultAnnotationHandlerMapping 解  析  URL， 解  析  后  调  用HandlerAdatper 组  件  的  AnnotationMethodHandlerAdapter 去  调  用Controller 中的  HandlerMethod。当  HandlerMethod 执行完成后会返回View，返回的view会被  ViewResovler 进行视图解析，解析后调用  jsp 对应的.class 文件并运行，最终把运行.class 文件的结果响应给客户端。\n\n\n## 四、SpringMVC 对 Date 类型转换\n\n- 只需要在springmvc.xml 中配置,代码中不需要做任何修改；\n  * 必须额外导入 joda-time.jar\n  * 时间类型 java.sql.Date\nspringmvc.xml 内容为：\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/mvc\n        http://www.springframework.org/schema/mvc/spring-mvc.xsd\">\n\t<!-- 扫描注解 -->\n\t<context:component-scan base-package=\"com.bjsxt.controller\"></context:component-scan>\n\t<!-- 注解驱动 -->\n\t<mvc:annotation-driven conversion-service=\"conversionService\"></mvc:annotation-driven>\n\n\n<bean id=\"conversionService\"\n\t\tclass=\"org.springframework.format.support.FormattingConversionServiceFactoryBean\">\n\t\t<property name=\"registerDefaultFormatters\" value=\"false\" />\n\t\t<property name=\"formatters\">\n\t\t\t<set>\n\t\t\t\t<bean\n\t\t\t\t\tclass=\"org.springframework.format.number.NumberFormatAnnotationFormatterFactory\" />\n\t\t\t</set>\n\t\t</property>\n\t\t<property name=\"formatterRegistrars\">\n\t\t\t<set>\n\t\t\t\t<bean\n\t\t\t\t\tclass=\"org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar\">\n\t\t\t\t\t<property name=\"dateFormatter\">\n\t\t\t\t\t\t<bean\n\t\t\t\t\t\t\tclass=\"org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean\">\n\t\t\t\t\t\t\t<property name=\"pattern\" value=\"yyyy-MM-dd\" />\n\t\t\t\t\t\t</bean>\n\t\t\t\t\t</property>\n\t\t\t\t</bean>\n\t\t\t</set>\n\t\t</property>\n\t</bean>\n</beans>\n```\n\n\n- 使用注解：在需要转换的参数或实体类属性上添加`@DateTimeFormatter(pattern=”表达式”)`\n  - 使用Date 参数接收（在控制器中）\n```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"demo\")\n    public String demo(@DateTimeFormat(pattern=\"yyyy-MM-dd\") Date time){\n        System.out.println(time);\n        return \"main.jsp\";\n    }\n}\n```\n\n- 具体的实体类为：\n```java\npublic class Demo1 {\n\t@DateTimeFormat(pattern=\"yyyy/MM/dd\")\n\tprivate Date time;\n\n\tpublic Date getTime() {\n\t\treturn time;\n\t}\n\n\tpublic void setTime(Date time) {\n\t\tthis.time = time;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Demo1 [time=\" + time.toLocaleString() + \"]\";\n\t}\n}\n```\n\n- 注意地方:\n  * 不需要导入额外jar\n  * Date 是java.util.Date",[[1572259962900,["GJX@GJXAIOU",[[-1,6457,"bjsxt"],[1,6462,"gjxaiou"]],[6457,6462],[6457,6464]]],[1572259963596,["GJX@GJXAIOU",[[-1,6567,"bjsxt"],[1,6572,"gjxaiou"]],[6567,6572],[6567,6574]]],[1572259964174,["GJX@GJXAIOU",[[-1,7512,"bjsxt"],[1,7517,"gjxaiou"]],[7512,7517],[7512,7519]]],[1572259964689,["GJX@GJXAIOU",[[-1,7576,"bjsxt"],[1,7581,"gjxaiou"]],[7576,7581],[7576,7583]]],[1572259965249,["GJX@GJXAIOU",[[-1,9283,"bjsxt"],[1,9288,"gjxaiou"]],[9283,9288],[9283,9290]]]],null,"GJX@GJXAIOU"]]}