{"compress":true,"commitItems":[["eff99f68-7fcf-4449-b62d-c9fe1c8e0be9",1568882945744,"**[**今日课程大纲**]**\n\n**JSP** 九大内置对象和四大作用域复习\n\n**SpringMVC** 作用域传值文件下载\n\n文件上传\n\n**[**知识点详解**]**\n\n一**.JSP** 九大内置对象和四大作用域复习\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image001.gif)1.九大内置对象\n\n| \n\n名称\n\n | \n\n类型\n\n | \n\n含义\n\n | \n\n获取方式\n\n |\n| \n\nrequest\n\n | \n\nHttpSevletRequ  est\n\n | \n\n封装所有请求\n\n信息\n\n | \n\n在方法参数\n\n |\n| \n\nresponse\n\n | \n\nHttpServletResponse\n\n | \n\n封装所有响应\n\n信息\n\n | \n\n在方法参数\n\n |\n| \n\nsession\n\n | \n\nHttpSession\n\n | \n\n封装所有会话\n\n信息\n\n | \n\nreq.getSession()\n\n |\n| \n\napplication\n\n | \n\nServletContext\n\n | \n\n所有信息\n\n | \n\ngetServletConte xt(); request.getServl\n\netContext();\n\n |\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif) |  | \n\n| \n\nout\n\n | \n\nPrintWriter\n\n | \n\n输出对象\n\n | \n\nresponse.getWrite\n\n |\n| \n\nexception\n\n | \n\nException\n\n | \n\n异常对象\n\n |  |\n| \n\npage\n\n | \n\nObject\n\n | \n\n当前页面对象\n\n |  |\n| \n\npageContext\n\n | \n\nPageContext\n\n | \n\n作用是获取其他\n\n | \n\n象\n\n |\n| \n\nconfig\n\n | \n\nServletConfig\n\n | \n\n配置信息\n\n |  |\n\n |   | r()\n\n对\n\n2.四大作用域\n\n2.1 page\n\n2.1.1 在当前页面不会重新实例化.\n\n2.2 request\n\n2.2.1 在一次请求中同一个对象,下次请求重新实例化一个request 对象.\n\n2.3 session\n\n2.3.1 一次会话.\n\n2.3.2 只要客户端 Cookie 中传递的 Jsessionid 不变,Session 不会重新实例化(不超过默认时间.)\n\n2.3.3 实际有效时间:\n\n2.3.3.1 浏览器关闭.Cookie 失效.\n\n2.3.3.2 默认时间.在时间范围内无任何交互.在 tomcat 的web.xml 中配置\n\n<session-config>\n\n<session-timeout>30</session-timeout>\n\n</session-config>\n\n2.4 application\n\n2.4.1 只有在 tomcat 启动项目时才实例化.关闭 tomcat 时销毁application，所以在整个应用程序内都是单例的。\n\n二**.SpringMVC** 作用域传值的几种方式\n\n1. 使用原生 Servlet\n\n1.1 在 HanlderMethod 参数中添加作用域对象（Controller中配置）\n\n@RequestMapping(\"demo1\")\n\n**public** String demo1(HttpServletRequest abc,HttpSession  sessionParam){\n\n//request 作用域\n\nabc.setAttribute(\"req\", \"req 的值\");\n\n//session 作用域\n\nHttpSession session = abc.getSession();\n\nsession.setAttribute(\"session\", \"session 的值\");\n\n// 下面这句话是结合方法中的 HTTPSession 参数进行使用，两个加起来等效于上面两句\n\nsessionParam.setAttribute(\"sessionParam\",\"sessionParam的值\");\n\n//appliaction 作用域\n\nServletContext application =  abc.getServletContext();\n\napplication.setAttribute(\"application\",\"application的值\");\n\nreturn  \"/index.jsp\";\n\n}\n\n |  |\n|  | ![文本框: request:${requestScope.req} <br/> session:${sessionScope.session} <br/> sessionParam:${sessionScope.sessionParam}<br/> application:${applicationScope.application}<br/>](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image003.gif) | \n对应的 index.jsp 内容\n\n2. 使用 Map 集合\n\n2.1 本质上是把 map 中内容放在 request 作用域中\n\n2.2 spring 会对 map 集合通过 BindingAwareModelMap 类 进行实例化\n\n![文本框: @RequestMapping(\"demo2\")\n\n\npublic String demo2(Map<String,Object> map){ System.out.println(map.getClass());\n\nmap.put(\"map\",\"map 的值\");\n\nreturn \"/index.jsp\";\n\n}\n\nindex.jsp 中 内 容 为 ： map:${requestScope.map}\n\n](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image004.gif)\n\n3. 使用 SpringMVC 中 Model 接口 jsp;  model:${model}或者加上作用域： model:${requestScope.model}\n\n3.1 该接口的本质把内容最终放入到 request 作用域中. @RequestMapping(\"demo3\")\n\n**public** String demo3(Model  model){ model.addAttribute(\"model\", \"model  的值\"); **return** \"/index.jsp\";\n\n}\n\n4.使用  SpringMVC  中 ModelAndView  类\n\njsp中：mav:${requestScope.mav}\n\n![文本框: @RequestMapping(\"demo4\")](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image005.gif)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image006.gif)\n\n# 三**.**文件下载\n\n注意配置放行 files文件夹\n\n1.访问资源时响应头如果没有设置 Content-Disposition,浏览器默认按\n\n照 inline 值进行处理\n\n1.1 inline 能显示就显示,不能显示就下载.\n\n2.只需要修改相应头中o  Cntext-Disposition= ”attachment;filename=  文件名”\n\n2.1 attachment  下载,以附件形式下载.\n\n2.2 filename=值就是下载时显示的下载文件名\n\n3.实现步骤\n\n3.1 导入 apache 的两个 jar\n\n |  |\n|  | ![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image007.jpg) | \n\n3.2 在 jsp 中添加超链接,设置要下载文件\n\n3.2.1 在 springmvc 中放行静态资源 files 文件夹\n\n![文本框: <a  href=\"download?fileName=a.rar\">下载</a>](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image008.gif)\n\n3.3     |  |\n|  | ![文本框: @RequestMapping(\"download\")\n\n\npublic  void  download(String fileName,HttpServletResponse  res,HttpServletRequest req)  throws  IOException{\n\n//设置响应流中文件进行下载\n\nres.setHeader(\"Content-Disposition\", \"attachment;filename=\"+fileName);\n\n//把二进制流放入到响应体中.\n\nServletOutputStream  os  =  res.getOutputStream(); String  path  =\n\nreq.getServletContext().getRealPath(\"files\"); System.out.println(path);\n\nFile  file  =  new  File(path,  fileName);\n\n\nbyte[]  bytes  = FileUtils.readFileToByteArray(file);\n\nos.write(bytes); os.flush();\n\nos.close();\n\n\n}\n\n](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image009.gif) | \n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif)![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image011.gif)编写控制器方法\n\n# 四**.**文件上传\n\n1. 基于 apache 的 commons-fileupload.jar 完成文件上传.\n\n2. MultipartResovler是SpringMVC中负责文件上传的组件，作用: 2.1\n\n把客户端上传的文件流转换成 MutipartFile 封装类.\n\n2.2 可以通过 MutipartFile 封装类获取到文件流\n\n3. 表单数据类型分类\n\n3.1 在<form>的 enctype 属性中控制表单类型\n\n3.2 默认值 为application/x-www-form-urlencoded,表示普通表单数据.(即少量文字信息)\n\n3.3 text/plain 表示大文字量时使用的类型.例如邮件,论文\n\n3.4 multipart/form-data 表单中包含二进制文件内容.\n\n4. 实现步骤:\n\n4.1 导入 springmvc 包和 apache 文件上传 commons-fileupload 和commons-io 两个 jar\n\n4.2 编写 JSP 页面\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif)\n\n4.3     |  |\n|  | ![文本框: <!--  MultipartResovler 解析器  -->\n\n<bean  id=\"multipartResolver\" class=\"org.springframework.web.multipart.commons.Comm onsMultipartResolver\">\n\n<property  name=\"maxUploadSize\" value=\"50\"></property>\n\n</bean>\n\n<!--  异常解析器  -->\n\n<bean  id=\"exceptionResolver\" class=\"org.springframework.web.servlet.handler.Simple MappingExceptionResolver\">\n\n<property  name=\"exceptionMappings\">\n\n\n<props>\n\n\n<prop key=\"org.springframework.web.multipart.MaxUploadSizeE xceededException\">/error.jsp</prop>\n\n</props>\n\n\n</property>\n\n\n</bean>\n\n](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image013.gif) | \n配置 springmvc.xml\n\n4.4 编写控制器类\n\n4.4.1 MultipartFile 对象名必须和<input type=”file”/>的 name 属\n\n |  |\n|  | ![文本框: @RequestMapping(\"upload\")\n\n\npublic  String  upload(MultipartFile  file,String  name)\n\n\nthrows  IOException{\n\n\nString  fileName  =  file.getOriginalFilename(); String  suffix  =\n\nfileName.substring(fileName.lastIndexOf(\".\"));\n\n//判断上传文件类型\n\nif(suffix.equalsIgnoreCase(\".png\")){\n\n\nString  uuid  =  UUID.randomUUID().toString();\n\n\nFileUtils.copyInputStreamToFile(file.getInputStream (),  new  File(\"E:/\"+uuid+suffix));\n\nreturn  \"/index.jsp\";\n\n\n}else{\n\n\nreturn  \"error.jsp\";\n\n\n}\n\n\n}\n\n](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image014.gif) | \n性值相同",[[1568882900278,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1568882902777,["GJX@GJXAIOU",[[1,0,"# "]],[0,0],[2,2]]],[1568882904498,["GJX@GJXAIOU",[[1,2,"F"],[-1,934," "],[1,935," "],[-1,3755,"    "],[1,3759,"    "],[-1,5104,"    "],[1,5108,"    "]],[2,2],[3,3]]],[1568882919946,["GJX@GJXAIOU",[[1,3,"rameDay03_1 SpringMVC "]],[3,3],[25,25]]],[1568882922008,["GJX@GJXAIOU",[[1,26,"\n"]],[25,25],[26,26]]],[1568882932391,["GJX@GJXAIOU",[[-1,27,"**[**今日课程大纲**]**"]],[27,43],[27,27]]],[1568882933431,["GJX@GJXAIOU",[[1,27,"****"]],[27,27],[29,29]]],[1568882934567,["GJX@GJXAIOU",[[1,29,"zhuyao"]],[29,29],[35,35]]],[1568882935745,["GJX@GJXAIOU",[[-1,29,"zhuyao"]],[35,35],[29,29]]],[1568882938916,["GJX@GJXAIOU",[[1,29,"主要内功"]],[29,29],[33,33]]],[1568882939607,["GJX@GJXAIOU",[[-1,31,"内功"]],[33,33],[31,31]]],[1568882942635,["GJX@GJXAIOU",[[1,31,"内容："]],[31,31],[34,34]]],[1568883005294,["GJX@GJXAIOU",[[-1,43,"** "]],[46,46],[43,43]]],[1568883006368,["GJX@GJXAIOU",[[-1,38,"**"]],[40,40],[38,38]]],[1568883007256,["GJX@GJXAIOU",[[1,41," "]],[41,41],[42,42]]],[1568883009310,["GJX@GJXAIOU",[[-1,69,"**"]],[71,71],[69,69]]],[1568883014734,["GJX@GJXAIOU",[[-1,59,"*"]],[59,59],[58,58]]],[1568883014958,["GJX@GJXAIOU",[[-1,57,"\n"]],[58,58],[57,57]]],[1568883019568,["GJX@GJXAIOU",[[1,73,"\n"]],[73,73],[74,74]]],[1568883021254,["GJX@GJXAIOU",[[-1,57,"*"]],[58,58],[57,57]]],[1568883022358,["GJX@GJXAIOU",[[-1,78,"\n"]],[78,78],[77,77]]],[1568883025590,["GJX@GJXAIOU",[[1,38,"* "],[1,57,"* "],[1,73,"* "],[1,78,"* "]],[38,82],[40,90]]],[1568883031191,["GJX@GJXAIOU",[[-1,92,"**[**知识点详解**]**"]],[92,107],[92,92]]],[1568883034680,["GJX@GJXAIOU",[[-1,101,"**"]],[103,103],[101,101]]],[1568883037550,["GJX@GJXAIOU",[[-1,94,"一**."]],[98,98],[94,94]]],[1568883039452,["GJX@GJXAIOU",[[1,94,"一 "]],[94,94],[95,95]]],[1568883040651,["GJX@GJXAIOU",[[1,95,"、"]],[95,95],[96,96]]],[1568883047082,["GJX@GJXAIOU",[[-1,116,"\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image001.gif)"],[1,197,"】"]],[116,116],[117,117]]],[1568883047133,["GJX@GJXAIOU",[[1,117,"、"]],[117,117],[118,118]]],[1568883048309,["GJX@GJXAIOU",[[-1,116,"】、"]],[118,118],[116,116]]],[1568883049701,["GJX@GJXAIOU",[[1,116,"\n"]],[116,116],[117,117]]],[1568883065942,["GJX@GJXAIOU",[[1,126,"名称类型含义获取方式\nrequest\nHttpSevletRequ est\n封装所有请求\n信息\n在方法参数\nresponse\nHttpServletResponse\n封装所有响应\n信息\n在方法参数\nsession HttpSession 封装所有会话\n信息\nreq.getSession()\napplication ServletContext 所有信息getServletConte\nxt();\nrequest.getServl\netContext();"]],[126,126],[354,354]]],[1568883089995,["GJX@GJXAIOU",[[1,128," |"]],[128,128],[130,130]]],[1568883092866,["GJX@GJXAIOU",[[1,132,"|"]],[132,132],[133,133]]],[1568883096012,["GJX@GJXAIOU",[[1,135,"|"]],[135,135],[136,136]]],[1568883098721,["GJX@GJXAIOU",[[1,130," "]],[130,130],[131,131]]],[1568883099882,["GJX@GJXAIOU",[[1,133," "]],[133,133],[134,134]]],[1568883100785,["GJX@GJXAIOU",[[1,135," "]],[135,135],[136,136]]],[1568883101889,["GJX@GJXAIOU",[[1,138," "]],[138,138],[139,139]]],[1568883102440,["GJX@GJXAIOU",[[1,140," "]],[140,140],[141,141]]],[1568883111858,["GJX@GJXAIOU",[[1,146,"---|---|---|---"]],[146,146],[161,161]]],[1568883113271,["GJX@GJXAIOU",[[1,161,"\n"]],[161,161],[162,162]]],[1568883117025,["GJX@GJXAIOU",[[-1,169,"\n"]],[170,170],[169,169]]],[1568883118642,["GJX@GJXAIOU",[[1,169," |"]],[169,169],[171,171]]],[1568883121401,["GJX@GJXAIOU",[[-1,185," "]],[186,186],[185,185]]],[1568883140751,["GJX@GJXAIOU",[[-1,188,"\n"]],[189,189],[188,188]]],[1568883141700,["GJX@GJXAIOU",[[1,188," |"]],[188,188],[190,190]]],[1568883144159,["GJX@GJXAIOU",[[-1,196,"\n"]],[197,197],[196,196]]],[1568883145512,["GJX@GJXAIOU",[[-1,194,"请求"]],[196,196],[194,194]]],[1568883146836,["GJX@GJXAIOU",[[1,194,"请求"]],[194,194],[196,196]]],[1568883149607,["GJX@GJXAIOU",[[-1,198,"\n"]],[199,199],[198,198]]],[1568883150699,["GJX@GJXAIOU",[[1,198,"| "]],[198,198],[200,200]]],[1568883155767,["GJX@GJXAIOU",[[-1,214,"\n"]],[215,215],[214,214]]],[1568883156948,["GJX@GJXAIOU",[[1,214,"|"]],[214,214],[215,215]]],[1568883160295,["GJX@GJXAIOU",[[-1,234,"\n"]],[235,235],[234,234]]],[1568883160689,["GJX@GJXAIOU",[[1,234,"|"]],[234,234],[235,235]]],[1568883163184,["GJX@GJXAIOU",[[-1,241,"\n"]],[242,242],[241,241]]],[1568883165375,["GJX@GJXAIOU",[[-1,243,"\n"]],[244,244],[243,243]]],[1568883166356,["GJX@GJXAIOU",[[1,243,"|"]],[243,243],[244,244]]],[1568883171571,["GJX@GJXAIOU",[[1,258,"|"]],[258,258],[259,259]]],[1568883174486,["GJX@GJXAIOU",[[1,271,"|"]],[271,271],[272,272]]],[1568883177496,["GJX@GJXAIOU",[[-1,278,"\n"]],[279,279],[278,278]]],[1568883180358,["GJX@GJXAIOU",[[-1,280,"\n"]],[281,281],[280,280]]],[1568883182075,["GJX@GJXAIOU",[[1,280,"|"]],[280,280],[281,281]]],[1568883184899,["GJX@GJXAIOU",[[1,309,"|"]],[309,309],[310,310]]],[1568883187830,["GJX@GJXAIOU",[[1,326,"\n"]],[326,326],[327,327]]],[1568883188857,["GJX@GJXAIOU",[[-1,326,"\n"]],[327,327],[326,326]]],[1568883189298,["GJX@GJXAIOU",[[1,326,"|"]],[326,326],[327,327]]],[1568883192851,["GJX@GJXAIOU",[[1,331,"|"]],[331,331],[332,332]]],[1568883195447,["GJX@GJXAIOU",[[-1,347,"\n"]],[348,348],[347,347]]],[1568883198408,["GJX@GJXAIOU",[[-1,352,"\n"]],[353,353],[352,352]]],[1568883200623,["GJX@GJXAIOU",[[-1,368,"\n"]],[369,369],[368,368]]],[1568883209613,["GJX@GJXAIOU",[[1,352,"和 "]],[352,352],[353,353]]],[1568883237072,["GJX@GJXAIOU",[[-1,383,"| \n"]],[383,386],[383,383]]],[1568883237512,["GJX@GJXAIOU",[[1,383,"out PrintWriter 输出对象\nresponse.getWriter()\nexception Exception 异常对象\npage Object 当前页面对象\npageContext PageContext 作用是获取其他对象\nconfig ServletConfig 配置信息"]],[383,383],[528,528]]],[1568883239841,["GJX@GJXAIOU",[[1,387,"|"]],[387,387],[388,388]]],[1568883242347,["GJX@GJXAIOU",[[1,400,"|"]],[400,400],[401,401]]],[1568883245255,["GJX@GJXAIOU",[[-1,405,"\n"]],[406,406],[405,405]]],[1568883245731,["GJX@GJXAIOU",[[1,405," "]],[405,405],[406,406]]],[1568883246343,["GJX@GJXAIOU",[[1,406,"|"]],[406,406],[407,407]]],[1568883250882,["GJX@GJXAIOU",[[1,438,"|"]],[438,438],[439,439]]],[1568883253841,["GJX@GJXAIOU",[[1,449,"|"]],[449,449],[450,450]]],[1568883258547,["GJX@GJXAIOU",[[1,454," |"]],[454,454],[456,456]]],[1568883260850,["GJX@GJXAIOU",[[1,461,"|"]],[461,461],[462,462]]],[1568883263306,["GJX@GJXAIOU",[[1,470,"|"]],[470,470],[471,471]]],[1568883268146,["GJX@GJXAIOU",[[1,477," |"]],[477,477],[479,479]]],[1568883273162,["GJX@GJXAIOU",[[1,492,"| "]],[492,492],[494,494]]],[1568883277386,["GJX@GJXAIOU",[[1,506,"| "]],[506,506],[508,508]]],[1568883280524,["GJX@GJXAIOU",[[1,517," |"]],[517,517],[519,519]]],[1568883283179,["GJX@GJXAIOU",[[1,527,"|"]],[527,527],[528,528]]],[1568883287265,["GJX@GJXAIOU",[[1,542,"| "]],[542,542],[544,544]]],[1568883289626,["GJX@GJXAIOU",[[1,548," | "]],[548,548],[551,551]]],[1568883540681,["GJX@GJXAIOU",[[-1,552,"名称\n\n | \n\n类型\n\n | \n\n含义\n\n | \n\n获取方式\n\n |\n| \n\nrequest\n\n | \n\nHttpSevletRequ  est\n\n | \n\n封装所有请求\n\n信息\n\n | \n\n在方法参数\n\n |\n| \n\nresponse\n\n | \n\nHttpServletResponse\n\n | \n\n封装所有响应\n\n信息\n\n | \n\n在方法参数\n\n |\n| \n\nsession\n\n | \n\nHttpSession\n\n | \n\n封装所有会话\n\n信息\n\n | \n\nreq.getSession()\n\n |\n| \n\napplication\n\n | \n\nServletContext\n\n | \n\n所有信息\n\n | \n\ngetServletConte xt(); request.getServl\n\netContext();\n\n |\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif) |  | \n\n| \n\nout\n\n | \n\nPrintWriter\n\n | \n\n输出对象\n\n | \n\nresponse.getWrite\n\n |\n| \n\nexception\n\n | \n\nException\n\n | \n\n异常对象\n\n |  |\n| \n\npage\n\n | \n\nObject\n\n | \n\n当前页面对象\n\n |  |\n| \n\npageContext\n\n | \n\nPageContext\n\n | \n\n作用是获取其他\n\n | \n\n象\n\n |\n| \n\nconfig\n\n | \n\nServletConfig\n\n | \n\n配置信息\n\n |  |\n\n |   | r()\n\n对"]],[552,1283],[552,552]]],[1568883551792,["GJX@GJXAIOU",[[1,94,"## "]],[94,94],[118,118]]],[1568883559968,["GJX@GJXAIOU",[[1,120,"### "]],[120,120],[132,132]]],[1568883562640,["GJX@GJXAIOU",[[-1,124,"1."]],[126,126],[124,124]]],[1568883563397,["GJX@GJXAIOU",[[1,124,"（）"]],[124,124],[126,126]]],[1568883564934,["GJX@GJXAIOU",[[1,125,"一"]],[125,125],[126,126]]],[1568883567824,["GJX@GJXAIOU",[[-1,562,"2."]],[562,564],[562,562]]],[1568883568289,["GJX@GJXAIOU",[[1,562,"（）"]],[562,562],[564,564]]],[1568883569476,["GJX@GJXAIOU",[[1,563,"二"]],[563,563],[564,564]]],[1568883571263,["GJX@GJXAIOU",[[1,562,"### "]],[562,562],[574,574]]],[1568883577392,["GJX@GJXAIOU",[[-1,576,"2.1 "]],[576,580],[576,576]]],[1568883577834,["GJX@GJXAIOU",[[1,576,"- "]],[576,576],[578,578]]],[1568883580247,["GJX@GJXAIOU",[[-1,584,"2.1.1 "]],[584,590],[584,584]]],[1568883580655,["GJX@GJXAIOU",[[-1,583,"\n"]],[584,584],[583,583]]],[1568883581225,["GJX@GJXAIOU",[[-1,582,"\n"]],[583,583],[582,582]]],[1568883582306,["GJX@GJXAIOU",[[1,582," "]],[582,582],[583,583]]],[1568883583137,["GJX@GJXAIOU",[[-1,582," "]],[583,583],[582,582]]],[1568883583546,["GJX@GJXAIOU",[[1,582,"："]],[582,582],[583,583]]],[1568883585873,["GJX@GJXAIOU",[[-1,595,"."]],[596,596],[595,595]]],[1568883586330,["GJX@GJXAIOU",[[1,595,"；"]],[595,595],[596,596]]],[1568883589095,["GJX@GJXAIOU",[[-1,598,"2.2"]],[598,601],[598,598]]],[1568883589404,["GJX@GJXAIOU",[[1,598,"-"]],[598,598],[599,599]]],[1568883590543,["GJX@GJXAIOU",[[-1,597,"\n"]],[597,597],[596,596]]],[1568883593079,["GJX@GJXAIOU",[[-1,608,"2.2.1"]],[608,613],[608,608]]],[1568883593503,["GJX@GJXAIOU",[[-1,607,"\n"]],[608,608],[607,607]]],[1568883594016,["GJX@GJXAIOU",[[-1,606,"\n"]],[607,607],[606,606]]],[1568883595195,["GJX@GJXAIOU",[[1,606,"："]],[606,606],[607,607]]],[1568883596519,["GJX@GJXAIOU",[[-1,607," "]],[608,608],[607,607]]],[1568883625464,["GJX@GJXAIOU",[[-1,618,","]],[619,619],[618,618]]],[1568883626234,["GJX@GJXAIOU",[[1,618,"，"]],[618,618],[619,619]]],[1568883631048,["GJX@GJXAIOU",[[-1,640,"."]],[641,641],[640,640]]],[1568883631604,["GJX@GJXAIOU",[[1,640,"；"]],[640,640],[641,641]]],[1568883834401,["GJX@GJXAIOU",[[-1,642,"\n2.3"]],[642,646],[642,642]]],[1568883834652,["GJX@GJXAIOU",[[1,642,"-"]],[642,642],[643,643]]],[1568883842369,["GJX@GJXAIOU",[[-1,653,"2.3.1 "]],[653,659],[653,653]]],[1568883842688,["GJX@GJXAIOU",[[-1,652,"\n"]],[653,653],[652,652]]],[1568883843111,["GJX@GJXAIOU",[[-1,651,"\n"]],[652,652],[651,651]]],[1568883844388,["GJX@GJXAIOU",[[1,651,"："]],[651,651],[652,652]]],[1568883847061,["GJX@GJXAIOU",[[1,652,"作用域在"]],[652,652],[656,656]]],[1568883849224,["GJX@GJXAIOU",[[-1,660,"."]],[661,661],[660,660]]],[1568883849796,["GJX@GJXAIOU",[[1,660,"，"]],[660,660],[661,661]]],[1568883859649,["GJX@GJXAIOU",[[-1,663,"2.3.2 "]],[663,669],[663,663]]],[1568883859967,["GJX@GJXAIOU",[[-1,662,"\n"]],[663,663],[662,662]]],[1568883860391,["GJX@GJXAIOU",[[-1,661,"\n"]],[662,662],[661,661]]],[1568883868632,["GJX@GJXAIOU",[[-1,692,","]],[693,693],[692,692]]],[1568883869325,["GJX@GJXAIOU",[[1,692,"，"]],[692,692],[693,693]]],[1568883872880,["GJX@GJXAIOU",[[-1,716,"."]],[717,717],[716,716]]],[1568883874684,["GJX@GJXAIOU",[[1,717,"；"]],[717,717],[718,718]]],[1568883900423,["GJX@GJXAIOU",[[-1,720,"2.3.3 "]],[720,726],[720,720]]],[1568883905407,["GJX@GJXAIOU",[[1,720,"**"],[1,727,"**"]],[720,727],[720,731]]],[1568883907776,["GJX@GJXAIOU",[[-1,732,"\n2.3.3.1 "]],[732,741],[732,732]]],[1568883908184,["GJX@GJXAIOU",[[1,732,"- "]],[732,732],[734,734]]],[1568883911687,["GJX@GJXAIOU",[[-1,739,"."]],[740,740],[739,739]]],[1568883913909,["GJX@GJXAIOU",[[1,739,"则 "]],[739,739],[740,740]]],[1568883917047,["GJX@GJXAIOU",[[-1,750,"."]],[751,751],[750,750]]],[1568883917475,["GJX@GJXAIOU",[[1,750,"；"]],[750,750],[751,751]]],[1568883921558,["GJX@GJXAIOU",[[-1,753,"2.3.3.2"]],[753,760],[753,753]]],[1568883921982,["GJX@GJXAIOU",[[-1,752,"\n"]],[753,753],[752,752]]],[1568883922722,["GJX@GJXAIOU",[[1,752,"-"]],[752,752],[753,753]]],[1568883925712,["GJX@GJXAIOU",[[-1,758,"."]],[759,759],[758,758]]],[1568883929194,["GJX@GJXAIOU",[[1,758,"，"]],[758,758],[759,759]]],[1568883933191,["GJX@GJXAIOU",[[-1,770,"."]],[771,771],[770,770]]],[1568883935412,["GJX@GJXAIOU",[[1,770,"；可以"]],[770,770],[773,773]]],[1568883938194,["GJX@GJXAIOU",[[1,795,"··"]],[795,795],[797,797]]],[1568883939992,["GJX@GJXAIOU",[[-1,795,"··"]],[797,797],[795,795]]],[1568883940968,["GJX@GJXAIOU",[[1,795,"```"]],[795,795],[798,798]]],[1568883941000,["GJX@GJXAIOU",[[1,798,"language\n```\n"]],[798,798],[798,806]]],[1568883943672,["GJX@GJXAIOU",[[-1,798,"language"],[1,806,"x"]],[798,806],[799,799]]],[1568883943921,["GJX@GJXAIOU",[[1,799,"ml"]],[799,799],[801,801]]],[1568883944439,["GJX@GJXAIOU",[[1,802,"\n"]],[801,801],[802,802]]],[1568883948511,["GJX@GJXAIOU",[[-1,808,"<session-config>\n\n<session-timeout>30</session-timeout>\n\n</session-config>"]],[808,882],[808,808]]],[1568883949944,["GJX@GJXAIOU",[[1,802,"<session-config>\n\n<session-timeout>30</session-timeout>\n\n</session-config>"]],[802,802],[876,876]]],[1568883951342,["GJX@GJXAIOU",[[-1,819,"\n"]],[819,819],[818,818]]],[1568883952232,["GJX@GJXAIOU",[[-1,857,"\n"]],[857,857],[856,856]]],[1568883954528,["GJX@GJXAIOU",[[1,819,"    "]],[819,819],[823,823]]],[1568883987263,["GJX@GJXAIOU",[[-1,886,"2.4 "]],[886,890],[886,886]]],[1568883987569,["GJX@GJXAIOU",[[-1,885,"\n"]],[886,886],[885,885]]],[1568883988112,["GJX@GJXAIOU",[[-1,884,"\n"]],[885,885],[884,884]]],[1568883989403,["GJX@GJXAIOU",[[1,884,"- "]],[884,884],[886,886]]],[1568883992208,["GJX@GJXAIOU",[[-1,899,"2.4.1 "]],[899,905],[899,899]]],[1568883992513,["GJX@GJXAIOU",[[-1,898,"\n"]],[899,899],[898,898]]],[1568883992871,["GJX@GJXAIOU",[[-1,897,"\n"]],[898,898],[897,897]]],[1568883993908,["GJX@GJXAIOU",[[1,897,":"]],[897,897],[898,898]]],[1568883995248,["GJX@GJXAIOU",[[-1,897,":"]],[898,898],[897,897]]],[1568883995755,["GJX@GJXAIOU",[[1,897,"："]],[897,897],[898,898]]],[1568883998375,["GJX@GJXAIOU",[[-1,918,"."]],[919,919],[918,918]]],[1568883999156,["GJX@GJXAIOU",[[1,918,"，"]],[918,918],[919,919]]],[1568884003168,["GJX@GJXAIOU",[[-1,884,"- application：只有在 tomcat 启动项目时才实例化，关闭 tomcat 时销毁application，所以在整个应用程序内都是单例的"]],[884,959],[884,884]]],[1568884007115,["GJX@GJXAIOU",[[1,719,"- application：只有在 tomcat 启动项目时才实例化，关闭 tomcat 时销毁application，所以在整个应用程序内都是单例的。"]],[719,719],[795,795]]],[1568884009417,["GJX@GJXAIOU",[[1,796,"\n"]],[796,796],[797,797]]],[1568884013224,["GJX@GJXAIOU",[[-1,961,"。"]],[961,962],[961,961]]],[1568884032994,["GJX@GJXAIOU",[[-1,962,"\n"]],[962,962],[961,961]]],[1568884033529,["GJX@GJXAIOU",[[-1,961,"\n"]],[961,961],[960,960]]],[1568884040880,["GJX@GJXAIOU",[[1,961,"## "]],[961,961],[990,990]]],[1568884046796,["GJX@GJXAIOU",[[-1,965,"**."]],[968,968],[965,965]]],[1568884047771,["GJX@GJXAIOU",[[1,965,"、"]],[965,965],[966,966]]],[1568884050745,["GJX@GJXAIOU",[[-1,975,"**"]],[977,977],[975,975]]],[1568884060359,["GJX@GJXAIOU",[[-1,988,"1. "]],[988,991],[988,988]]],[1568884064315,["GJX@GJXAIOU",[[1,988,"### （）"]],[988,988],[994,994]]],[1568884067574,["GJX@GJXAIOU",[[1,993,"一"]],[993,993],[994,994]]],[1568884094089,["GJX@GJXAIOU",[[-1,1009,"1.1 "]],[1009,1013],[1009,1009]]],[1568884096660,["GJX@GJXAIOU",[[1,1009,"- 首先"]],[1009,1009],[1013,1013]]],[1568884106069,["GJX@GJXAIOU",[[1,1040,"即 "]],[1040,1040],[1041,1041]]],[1568884107741,["GJX@GJXAIOU",[[1,1041,"在"]],[1041,1041],[1042,1042]]],[1568884110898,["GJX@GJXAIOU",[[1,1053," "]],[1053,1053],[1054,1054]]],[1568884132588,["GJX@GJXAIOU",[[1,1059,"···"]],[1059,1059],[1062,1062]]],[1568884133634,["GJX@GJXAIOU",[[-1,1059,"···"]],[1062,1062],[1059,1059]]],[1568884134891,["GJX@GJXAIOU",[[1,1059,"~··"]],[1059,1059],[1062,1062]]],[1568884135688,["GJX@GJXAIOU",[[-1,1059,"~··"]],[1062,1062],[1059,1059]]],[1568884136156,["GJX@GJXAIOU",[[1,1059,"·"]],[1059,1059],[1060,1060]]],[1568884136545,["GJX@GJXAIOU",[[-1,1059,"·"]],[1060,1060],[1059,1059]]],[1568884137787,["GJX@GJXAIOU",[[1,1059,"~··"]],[1059,1059],[1062,1062]]],[1568884138888,["GJX@GJXAIOU",[[-1,1059,"~··"]],[1062,1062],[1059,1059]]],[1568884139996,["GJX@GJXAIOU",[[1,1059,"·"]],[1059,1059],[1060,1060]]],[1568884140601,["GJX@GJXAIOU",[[-1,1059,"·"]],[1060,1060],[1059,1059]]],[1568884142093,["GJX@GJXAIOU",[[1,1059,"·"]],[1059,1059],[1060,1060]]],[1568884143208,["GJX@GJXAIOU",[[-1,1059,"·"]],[1060,1060],[1059,1059]]],[1568884144482,["GJX@GJXAIOU",[[1,1059,"```"]],[1059,1059],[1062,1062]]],[1568884144515,["GJX@GJXAIOU",[[1,1062,"language\n```\n"]],[1062,1062],[1062,1070]]],[1568884146747,["GJX@GJXAIOU",[[-1,1062,"language"],[1,1070,"j"]],[1062,1070],[1063,1063]]],[1568884147130,["GJX@GJXAIOU",[[1,1063,"ava"]],[1063,1063],[1066,1066]]],[1568884149584,["GJX@GJXAIOU",[[1,1067,"\n"]],[1066,1066],[1067,1067]]],[1568884170576,["GJX@GJXAIOU",[[1,1067,"@Controller\npublic class DemoController {\n\t@RequestMapping(\"demo\")\n\tpublic String demo(){\n\t\tSystem.out.println(\"执行demo\");\n\t\treturn \"main.jsp\";\n\t}\n\t@RequestMapping(\"demo2\")\n\tpublic String demo2(){\n\t\tSystem.out.println(\"demo2\");\n\t\treturn \"main1.jsp\";\n\t}\n}"]],[1067,1067],[1320,1320]]],[1568884176042,["GJX@GJXAIOU",[[-1,1110,"@RequestMapping(\"demo\")\n\tpublic String demo(){\n\t\tSystem.out.println(\"执行demo\");\n\t\treturn \"main.jsp\";\n\t}\n\t@RequestMapping(\"demo2\")\n\tpublic String demo2(){\n\t\tSystem.out.println(\"demo2\");\n\t\treturn \"main1.jsp\";\n\t}"]],[1110,1318],[1110,1110]]],[1568884294376,["GJX@GJXAIOU",[[-1,1118,"@RequestMapping(\"demo1\")\n\n**public** String demo1(HttpServletRequest abc,HttpSession  sessionParam){\n\n//request 作用域\n\nabc.setAttribute(\"req\", \"req 的值\");\n\n//session 作用域\n\nHttpSession session = abc.getSession();\n\nsession.setAttribute(\"session\", \"session 的值\");\n\n// 下面这句话是结合方法中的 HTTPSession 参数进行使用，两个加起来等效于上面两句\n\nsessionParam.setAttribute(\"sessionParam\",\"sessionParam的值\");\n\n//appliaction 作用域\n\nServletContext application =  abc.getServletContext();\n\napplication.setAttribute(\"application\",\"application的值\");\n\nreturn  \"/index.jsp\";\n\n}"]],[1118,1642],[1118,1118]]],[1568884296904,["GJX@GJXAIOU",[[1,1110,"@RequestMapping(\"demo1\")\n\n**public** String demo1(HttpServletRequest abc,HttpSession  sessionParam){\n\n//request 作用域\n\nabc.setAttribute(\"req\", \"req 的值\");\n\n//session 作用域\n\nHttpSession session = abc.getSession();\n\nsession.setAttribute(\"session\", \"session 的值\");\n\n// 下面这句话是结合方法中的 HTTPSession 参数进行使用，两个加起来等效于上面两句\n\nsessionParam.setAttribute(\"sessionParam\",\"sessionParam的值\");\n\n//appliaction 作用域\n\nServletContext application =  abc.getServletContext();\n\napplication.setAttribute(\"application\",\"application的值\");\n\nreturn  \"/index.jsp\";\n\n}"]],[1110,1110],[1634,1634]]],[1568884298480,["GJX@GJXAIOU",[[-1,1135,"\n"]],[1135,1135],[1134,1134]]],[1568884300047,["GJX@GJXAIOU",[[-1,1135,"**"]],[1135,1137],[1135,1135]]],[1568884301434,["GJX@GJXAIOU",[[-1,1141,"**"]],[1141,1143],[1141,1141]]],[1568884303618,["GJX@GJXAIOU",[[1,1135,"    "]],[1135,1135],[1139,1139]]],[1568884306919,["GJX@GJXAIOU",[[-1,1194," "]],[1195,1195],[1194,1194]]],[1568884329121,["GJX@GJXAIOU",[[1,1210,"    "]],[1210,1210],[1214,1214]]],[1568884330856,["GJX@GJXAIOU",[[1,1229,"    "]],[1229,1229],[1233,1233]]],[1568884332128,["GJX@GJXAIOU",[[-1,1228,"\n"]],[1228,1228],[1227,1227]]],[1568884337472,["GJX@GJXAIOU",[[1,1268,"    "]],[1268,1268],[1272,1272]]],[1568884338913,["GJX@GJXAIOU",[[1,1286,"  "]],[1286,1286],[1288,1288]]],[1568884340784,["GJX@GJXAIOU",[[-1,1285,"\n"]],[1286,1286],[1285,1285]]],[1568884342688,["GJX@GJXAIOU",[[1,1288,"    "]],[1288,1288],[1292,1292]]],[1568884345216,["GJX@GJXAIOU",[[-1,1332,"\n"]],[1332,1332],[1331,1331]]],[1568884346896,["GJX@GJXAIOU",[[1,1332,"    "]],[1332,1332],[1336,1336]]],[1568884354199,["GJX@GJXAIOU",[[1,1384,"    "]],[1384,1384],[1388,1388]]],[1568884357297,["GJX@GJXAIOU",[[1,1437,"  "]],[1437,1437],[1439,1439]]],[1568884358649,["GJX@GJXAIOU",[[-1,1436,"\n"]],[1436,1436],[1435,1435]]],[1568884359714,["GJX@GJXAIOU",[[1,1438,"  "]],[1438,1438],[1440,1440]]],[1568884361807,["GJX@GJXAIOU",[[1,1501,"    "]],[1501,1501],[1505,1505]]],[1568884364471,["GJX@GJXAIOU",[[-1,1523,"\n"]],[1524,1524],[1523,1523]]],[1568884365512,["GJX@GJXAIOU",[[1,1523,"      "]],[1523,1523],[1529,1529]]],[1568884366576,["GJX@GJXAIOU",[[-1,1527,"  "]],[1529,1529],[1527,1527]]],[1568884370697,["GJX@GJXAIOU",[[1,1583,"    "]],[1583,1583],[1587,1587]]],[1568884371864,["GJX@GJXAIOU",[[-1,1582,"\n"]],[1582,1582],[1581,1581]]],[1568884377464,["GJX@GJXAIOU",[[-1,1643,"\n"]],[1644,1644],[1643,1643]]],[1568884378289,["GJX@GJXAIOU",[[1,1643,"    "]],[1643,1643],[1647,1647]]],[1568884380568,["GJX@GJXAIOU",[[-1,1669,"\n"]],[1669,1669],[1668,1668]]],[1568884385450,["GJX@GJXAIOU",[[1,1669,"   "]],[1669,1669],[1672,1672]]],[1568884393528,["GJX@GJXAIOU",[[1,1214,"  "],[1,1228,"  "],[1,1267,"  "],[1,1268," "],[1,1272," "],[1,1288,"  "],[1,1332," "],[1,1336," "],[1,1383,"  "],[1,1388,"  "],[1,1436,"  "],[1,1500,"  "],[1,1501," "],[1,1505," "],[1,1523,"  "],[1,1582," "],[1,1586," "],[1,1643,"  "]],[1214,1668],[1216,1696]]],[1568884393864,["GJX@GJXAIOU",[[1,1216,"  "],[1,1230,"  "],[1,1273,"  "],[1,1274," "],[1,1280," "],[1,1296,"  "],[1,1342," "],[1,1348," "],[1,1395,"  "],[1,1404,"  "],[1,1452,"  "],[1,1520,"  "],[1,1521," "],[1,1527," "],[1,1545,"  "],[1,1606," "],[1,1612," "],[1,1669,"  "]],[1216,1696],[1218,1724]]],[1568884397074,["GJX@GJXAIOU",[[-1,1209,"\n"]],[1209,1209],[1208,1208]]],[1568884407050,["GJX@GJXAIOU",[[1,1219," "]],[1219,1219],[1220,1220]]],[1568884408731,["GJX@GJXAIOU",[[1,1290," "]],[1290,1290],[1291,1291]]],[1568884412689,["GJX@GJXAIOU",[[1,1552," "]],[1552,1552],[1553,1553]]],[1568884414857,["GJX@GJXAIOU",[[1,1730," "]],[1730,1730],[1731,1731]]],[1568884438304,["GJX@GJXAIOU",[[1,1739,"zhi"]],[1739,1739],[1742,1742]]],[1568884439289,["GJX@GJXAIOU",[[-1,1739,"zhi"]],[1742,1742],[1739,1739]]],[1568884450886,["GJX@GJXAIOU",[[1,1739,"执行之后的对应参数值在 index.jsp 中"]],[1739,1739],[1762,1762]]],[1568884457950,["GJX@GJXAIOU",[[1,1762,"取出进行吓死"]],[1762,1762],[1768,1768]]],[1568884458880,["GJX@GJXAIOU",[[-1,1766,"吓死"]],[1768,1768],[1766,1766]]],[1568884460485,["GJX@GJXAIOU",[[1,1766,"显示："]],[1766,1766],[1769,1769]]],[1568884460856,["GJX@GJXAIOU",[[1,1772,"\n"]],[1769,1769],[1770,1770]]],[1568884462452,["GJX@GJXAIOU",[[1,1770,"```"]],[1770,1770],[1773,1773]]],[1568884462485,["GJX@GJXAIOU",[[1,1773,"language\n```\n"]],[1773,1773],[1773,1781]]],[1568884463762,["GJX@GJXAIOU",[[-1,1773,"language"],[1,1781,"j"]],[1773,1781],[1774,1774]]],[1568884464027,["GJX@GJXAIOU",[[1,1774,"sp"]],[1774,1774],[1776,1776]]],[1568884464408,["GJX@GJXAIOU",[[1,1777,"\n"]],[1776,1776],[1777,1777]]],[1568884473793,["GJX@GJXAIOU",[[1,1777,"<>"]],[1777,1777],[1779,1779]]],[1568884476001,["GJX@GJXAIOU",[[1,1778,"body"]],[1778,1778],[1782,1782]]],[1568884477703,["GJX@GJXAIOU",[[1,1784,"\n"]],[1783,1783],[1784,1784]]],[1568884477827,["GJX@GJXAIOU",[[1,1785,"\n"]],[1784,1784],[1785,1785]]],[1568884479116,["GJX@GJXAIOU",[[1,1785,",."]],[1785,1785],[1787,1787]]],[1568884480353,["GJX@GJXAIOU",[[-1,1785,",."]],[1787,1787],[1785,1785]]],[1568884480780,["GJX@GJXAIOU",[[1,1785,"<>"]],[1785,1785],[1787,1787]]],[1568884482770,["GJX@GJXAIOU",[[1,1786,"/bl"]],[1786,1786],[1789,1789]]],[1568884483504,["GJX@GJXAIOU",[[-1,1788,"l"]],[1789,1789],[1788,1788]]],[1568884484513,["GJX@GJXAIOU",[[1,1788,"ody"]],[1788,1788],[1791,1791]]],[1568884488417,["GJX@GJXAIOU",[[1,1784,"    request:${requestScope.req} <br/>\nsession:${sessionScope.session} <br/>\nsessionParam:${sessionScope.sessionParam}<br/>\napplication:${applicationScope.application}<br/>"]],[1784,1784],[1955,1955]]],[1568884492031,["GJX@GJXAIOU",[[1,1822,"    "]],[1822,1822],[1826,1826]]],[1568884493170,["GJX@GJXAIOU",[[1,1864,"    "]],[1864,1864],[1868,1868]]],[1568884494329,["GJX@GJXAIOU",[[1,1915,"    "]],[1915,1915],[1919,1919]]],[1568890020059,["GJX@GJXAIOU",[[-1,1983," |  |\n|  | ![文本框: request:${requestScope.req} <br/> session:${sessionScope.session} <br/> sessionParam:${sessionScope.sessionParam}<br/> application:${applicationScope.application}<br/>](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image003.gif) | \n对应的 index.jsp 内容"]],[1983,2266],[1983,1983]]],[1568890020196,["GJX@GJXAIOU",[[-1,1984,"\n"]],[1983,1983],[1982,1982]]],[1568890020370,["GJX@GJXAIOU",[[-1,1983,"\n"]],[1982,1982],[1981,1981]]],[1568890020794,["GJX@GJXAIOU",[[-1,1982,"\n"]],[1981,1981],[1980,1980]]],[1568890026324,["GJX@GJXAIOU",[[-1,1982,"2. "]],[1982,1985],[1982,1982]]],[1568890029550,["GJX@GJXAIOU",[[1,1982,"### ()"]],[1982,1982],[1988,1988]]],[1568890031179,["GJX@GJXAIOU",[[-1,1986,"()"]],[1988,1988],[1986,1986]]],[1568890031767,["GJX@GJXAIOU",[[1,1986,"（）"]],[1986,1986],[1988,1988]]],[1568890032946,["GJX@GJXAIOU",[[1,1987,"二"]],[1987,1987],[1988,1988]]],[1568890041858,["GJX@GJXAIOU",[[-1,2000,"2.1 "]],[2000,2004],[2000,2000]]],[1568890042580,["GJX@GJXAIOU",[[1,2000,"- "]],[2000,2000],[2002,2002]]],[1568890046768,["GJX@GJXAIOU",[[1,2030,"；"]],[2030,2030],[2031,2031]]],[1568890081412,["GJX@GJXAIOU",[[-1,2033,"2.2"]],[2033,2036],[2033,2033]]],[1568890082284,["GJX@GJXAIOU",[[-1,2032,"\n"]],[2033,2033],[2032,2032]]],[1568890083128,["GJX@GJXAIOU",[[1,2032,"-"]],[2032,2032],[2033,2033]]],[1568890089380,["GJX@GJXAIOU",[[-1,2075," "]],[2076,2076],[2075,2075]]],[1568890093169,["GJX@GJXAIOU",[[1,2080,"；"]],[2080,2080],[2081,2081]]],[1568890108796,["GJX@GJXAIOU",[[1,2082,"```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"demo1\")\n    public String demo1(HttpServletRequest abc,HttpSession sessionParam){\n        // request 作用域\n        abc.setAttribute(\"req\", \"req 的值\");\n    \n        // session 作用域  \n        HttpSession session = abc.getSession();\n        session.setAttribute(\"session\", \"session 的值\");\n    \n        // 下面这句话是结合方法中的 HTTPSession 参数进行使用，两个加起来等效于上面两句\n        sessionParam.setAttribute(\"sessionParam\",\"sessionParam的值\");\n    \n        // appliaction 作用域\n        ServletContext application =  abc.getServletContext();\n        application.setAttribute(\"application\",\"application的值\");\n        return  \"/index.jsp\";\n    }\n}\n```\n执行之后的对应参数值在 index.jsp 中取出进行显示：\n```jsp\n<body>\n    request:${requestScope.req} <br/>\n    session:${sessionScope.session} <br/>\n    sessionParam:${sessionScope.sessionParam}<br/>\n    application:${applicationScope.application}<br/>\n</body>\n```"]],[2082,2082],[3002,3002]]],[1568890123393,["GJX@GJXAIOU",[[-1,2154,"1"],[1,2155,"2"],[-1,2158,"    "],[-1,2180,"1(HttpServletRequest abc,HttpSession sessionParam){\n        // request 作用域\n        abc.setAttribute(\"req\", \"req 的值\");\n    \n        // session 作用域  \n        HttpSession session = abc.getSession();\n        session.setAttribu"],[1,2402,"2(Map<String,Object> map){\nSys"],[-1,2404,"(\"session\", \"session 的值\");\n    \n        // 下面这句话是结合方法中的 HTTPSession 参数进行使用，两个加起来等效于上面两句\n        sessionPara"],[-1,2513,"setAttribute(\"sessionParam\",\"sessionParam的值\");\n    \n        // appliaction 作用域\n        ServletContext "],[1,2615,"out.println(m"],[-1,2617,"plication =  abc"],[-1,2635,"etServl"],[-1,2645,"ontext();\n        "],[1,2663,"lass());\nm"],[1,2665,"."],[-1,2666,"lication.setAttrib"],[-1,2686,"e"],[1,2689,"m"],[-1,2691,"plication"],[1,2703,"m"],[-1,2705,"plication"],[1,2714," "],[-1,2720,"        "],[-1,2734," "],[-1,2750,"    "]],[2133,2755],[2286,2286]]],[1568890127300,["GJX@GJXAIOU",[[1,2158,"  "],[1,2203,"  "],[1,2239,"  "],[1,2264,"  "],[1,2285,"  "]],[2158,2286],[2158,2296]]],[1568890128020,["GJX@GJXAIOU",[[1,2160,"  "],[1,2207,"  "],[1,2243," "],[1,2245," "],[1,2272,"  "],[1,2293,"  "]],[2158,2296],[2158,2306]]],[1568890130308,["GJX@GJXAIOU",[[1,2211,"  "],[1,2251,"  "],[1,2276,"  "]],[2211,2300],[2213,2306]]],[1568890130483,["GJX@GJXAIOU",[[1,2213,"  "],[1,2255,"  "],[1,2280,"  "]],[2213,2306],[2215,2312]]],[1568890142070,["GJX@GJXAIOU",[[-1,2373," request"],[1,2381,"map"],[-1,2397,"req} <br/>\n    session:${sessionScope.session} <br/>\n    sessionPara"],[-1,2466,":${sessionScope.sessionParam}<br/>\n    "],[-1,2507,"plication:${applicationScope.application"],[-1,2548,"<br/>"]],[2373,2553],[2396,2396]]],[1568891675173,["GJX@GJXAIOU",[[1,1132,"0"],[-1,1135,"    "],[1,1139,"\t"],[1,1158,"0"],[1,1182," "],[-1,1209,"        "],[1,1217,"\t\t"],[-1,1232,"        "],[1,1240,"\t\t"],[-1,1275,"    \n        "],[1,1288,"\n\t\t"],[-1,1302,"  \n        "],[1,1313,"\n\t\t"],[-1,1353,"        "],[1,1361,"\t\t"],[-1,1408,"    \n        "],[1,1421,"\n\t\t"],[-1,1469,"        "],[1,1477,"\t\t"],[-1,1537,"    \n        "],[1,1550,"\n\t\t"],[-1,1569,"        "],[1,1577,"\t\t"],[-1,1632,"        "],[1,1640,"\t\t"],[-1,1697,"        "],[1,1705,"\t\t"],[-1,1727,"    "],[1,1731,"\t"]],[1067,1734],[1651,1651]]],[1568891680629,["GJX@GJXAIOU",[[1,1899,"\n"]],[1896,1896],[1897,1897]]],[1568891684935,["GJX@GJXAIOU",[[1,1897,"通过访问：``"]],[1897,1897],[1904,1904]]],[1568891734247,["GJX@GJXAIOU",[[1,1905,"request:req 的值 \nsession:session 的值 \nsessionParam:sessionParam的值\napplication:application的值"]],[1905,1905],[1994,1994]]],[1568891740727,["GJX@GJXAIOU",[[1,1903,"[http://localhost:8080/SpringMVC03_war_exploded/demo10](http://localhost:8080/SpringMVC03_war_exploded/demo10)"]],[1903,1903],[2013,2013]]],[1568891749278,["GJX@GJXAIOU",[[-1,1957,"](http://localhost:8080/SpringMVC03_war_exploded/demo10)"]],[1957,2013],[1957,1957]]],[1568891750621,["GJX@GJXAIOU",[[-1,1903,"["]],[1904,1904],[1903,1903]]],[1568891755712,["GJX@GJXAIOU",[[1,1957," "],[-1,1972," "],[1,1973," "],[-1,1992," "],[1,1993," "]],[1957,1957],[1958,1958]]],[1568891756287,["GJX@GJXAIOU",[[1,1958,"deo"]],[1958,1958],[1961,1961]]],[1568891756935,["GJX@GJXAIOU",[[-1,1958,"deo"]],[1961,1961],[1958,1958]]],[1568891759881,["GJX@GJXAIOU",[[1,1958,"得到结果为："]],[1958,1958],[1964,1964]]],[1568891760790,["GJX@GJXAIOU",[[1,1965,"\n"]],[1964,1964],[1965,1965]]],[1568891764184,["GJX@GJXAIOU",[[1,1965,"```java"]],[1965,1965],[1972,1972]]],[1568891767200,["GJX@GJXAIOU",[[1,2063,"```"]],[2063,2063],[2066,2066]]],[1568891769069,["GJX@GJXAIOU",[[1,2067,"\n"]],[2067,2067],[2068,2068]]],[1568891774839,["GJX@GJXAIOU",[[-1,2240,"2"]],[2241,2241],[2240,2240]]],[1568891775248,["GJX@GJXAIOU",[[1,2240,"11"]],[2240,2240],[2242,2242]]],[1568891777356,["GJX@GJXAIOU",[[-1,2267,"2"]],[2268,2268],[2267,2267]]],[1568891777760,["GJX@GJXAIOU",[[1,2267,"11"]],[2267,2267],[2269,2269]]],[1568892308214,["GJX@GJXAIOU",[[-1,2497,"![文本框: @RequestMapping(\"demo2\")"]],[2497,2528],[2497,2497]]],[1568892308878,["GJX@GJXAIOU",[[1,2497,"de"]],[2497,2497],[2499,2499]]],[1568892309483,["GJX@GJXAIOU",[[-1,2497,"de"]],[2499,2499],[2497,2497]]],[1568892310954,["GJX@GJXAIOU",[[1,2497,"的到"]],[2497,2497],[2499,2499]]],[1568892311500,["GJX@GJXAIOU",[[-1,2497,"的到"]],[2499,2499],[2497,2497]]],[1568892317601,["GJX@GJXAIOU",[[1,2497,"得到结果为："]],[2497,2497],[2503,2503]]],[1568892320655,["GJX@GJXAIOU",[[1,2503,"map:map 的值`"]],[2503,2503],[2514,2514]]],[1568892323190,["GJX@GJXAIOU",[[1,2503,"`"]],[2503,2503],[2504,2504]]],[1568892331188,["GJX@GJXAIOU",[[1,2497,"通过访问：`http://localhost:8080/SpringMVC03_war_exploded/demo10`"]],[2497,2497],[2557,2557]]],[1568892359742,["GJX@GJXAIOU",[[-1,2578,"public String demo2(Map<String,Object> map){ System.out.println(map.getClass());\n\nmap.put(\"map\",\"map 的值\");\n\nreturn \"/index.jsp\";\n\n}\n\nindex.jsp 中 内 容 为 ： map:${requestScope.map}\n\n](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image004.gif)\n"]],[2578,2835],[2578,2578]]],[1568892360181,["GJX@GJXAIOU",[[-1,2578,"\n"]],[2578,2578],[2577,2577]]],[1568892362692,["GJX@GJXAIOU",[[-1,2578,"3. "]],[2578,2581],[2578,2578]]],[1568892367969,["GJX@GJXAIOU",[[1,2578,"### ()"]],[2578,2578],[2584,2584]]],[1568892369860,["GJX@GJXAIOU",[[-1,2582,"()"]],[2584,2584],[2582,2582]]],[1568892370523,["GJX@GJXAIOU",[[1,2582,"（）"]],[2582,2582],[2584,2584]]],[1568892372692,["GJX@GJXAIOU",[[1,2583,"三"]],[2583,2583],[2584,2584]]],[1568892377886,["GJX@GJXAIOU",[[1,2609,"\n"]],[2609,2609],[2610,2610]]],[1568892384279,["GJX@GJXAIOU",[[-1,2727,"**public** String demo3(Model  model){ model.addAttribute(\"model\", \"model  的值\"); **return** \"/index.jsp\";\n\n}"]],[2727,2835],[2727,2727]]],[1568892399775,["GJX@GJXAIOU",[[1,2726,"```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"demo11\")\n    public String demo11(Map<String,Object> map){\n        System.out.println(map.getClass());\n        map.put(\"map\",\"map 的值\");\n        return \"/index.jsp\";\n    }\n}\n```\n执行之后的对应参数值在 index.jsp 中取出进行显示：\n```jsp\n<body>\n   map:${requestScope.map}\n</body>\n```"]],[2726,2726],[3054,3054]]],[1568892406974,["GJX@GJXAIOU",[[-1,2798,"11"],[1,2800,"3"],[-1,2803,"    "],[-1,2825,"11(Map<String,Object> map){\n        System.out.println(map.getClass());\n        map.put(\"map"],[1,2917,"3(Model model){\nmodel.addAttribute(\"model"],[1,2919," "],[-1,2921,"ap"],[1,2923,"odel"],[-1,2930,"        "],[-1,2959,"    "]],[2777,2964],[2899,2899]]],[1568892410542,["GJX@GJXAIOU",[[1,2802,"      "]],[2802,2802],[2808,2808]]],[1568892412925,["GJX@GJXAIOU",[[-1,2806,"  "]],[2808,2808],[2806,2806]]],[1568892415631,["GJX@GJXAIOU",[[1,2840,"        "]],[2840,2840],[2848,2848]]],[1568892418030,["GJX@GJXAIOU",[[1,2889,"        "]],[2889,2889],[2897,2897]]],[1568892419629,["GJX@GJXAIOU",[[1,2918,"    "]],[2918,2918],[2922,2922]]],[1568892428237,["GJX@GJXAIOU",[[-1,2798,"3"]],[2799,2799],[2798,2798]]],[1568892428735,["GJX@GJXAIOU",[[1,2798,"12"]],[2798,2798],[2800,2800]]],[1568892431198,["GJX@GJXAIOU",[[-1,2825,"3"]],[2826,2826],[2825,2825]]],[1568892431561,["GJX@GJXAIOU",[[1,2825,"12"]],[2825,2825],[2827,2827]]],[1568892443542,["GJX@GJXAIOU",[[-1,2981,"ap"],[1,2983,"odel"],[-1,3000,"ap"],[1,3002,"odel"]],[2980,3003],[3007,3007]]],[1568892453542,["GJX@GJXAIOU",[[1,3008,"   \n"]],[3007,3007],[3011,3011]]],[1568892453926,["GJX@GJXAIOU",[[1,3011,"model:${model}"]],[3011,3011],[3025,3025]]],[1568892456006,["GJX@GJXAIOU",[[1,2977,"\n"]],[2976,2976],[2977,2977]]],[1568892456667,["GJX@GJXAIOU",[[1,2977,"、"]],[2977,2977],[2978,2978]]],[1568892457222,["GJX@GJXAIOU",[[-1,2977,"、"]],[2978,2978],[2977,2977]]],[1568892459366,["GJX@GJXAIOU",[[1,2977,"    "]],[2977,2977],[2981,2981]]],[1568892460014,["GJX@GJXAIOU",[[-1,2980," "]],[2981,2981],[2980,2980]]],[1568892460987,["GJX@GJXAIOU",[[1,2980,"《》"]],[2980,2980],[2982,2982]]],[1568892462062,["GJX@GJXAIOU",[[-1,2980,"《》"]],[2982,2982],[2980,2980]]],[1568892462761,["GJX@GJXAIOU",[[1,2980,"<>"]],[2980,2980],[2982,2982]]],[1568892466376,["GJX@GJXAIOU",[[1,2981,"!----"]],[2981,2981],[2986,2986]]],[1568892474333,["GJX@GJXAIOU",[[1,2984,"下面两种方式都是可以的"]],[2984,2984],[2995,2995]]],[1568892478214,["GJX@GJXAIOU",[[-1,2610,"jsp;  model:${model}或者加上作用域： model:${requestScope.model}"]],[2610,2666],[2610,2610]]],[1568892478527,["GJX@GJXAIOU",[[-1,2611,"\n"]],[2610,2610],[2609,2609]]],[1568892480205,["GJX@GJXAIOU",[[-1,2611,"3.1 "]],[2611,2615],[2611,2611]]],[1568892480669,["GJX@GJXAIOU",[[-1,2610,"\n"]],[2611,2611],[2610,2610]]],[1568892482157,["GJX@GJXAIOU",[[1,2610,"\n"]],[2610,2610],[2611,2611]]],[1568892487612,["GJX@GJXAIOU",[[-1,2639," @RequestMapping(\"demo3\")"]],[2640,2664],[2639,2639]]],[1568892488515,["GJX@GJXAIOU",[[1,2639,"。"]],[2639,2639],[2640,2640]]],[1568892489876,["GJX@GJXAIOU",[[-1,2638,"."]],[2639,2639],[2638,2638]]],[1568892502919,["GJX@GJXAIOU",[[-1,2976,"4."]],[2976,2978],[2976,2976]]],[1568892507116,["GJX@GJXAIOU",[[1,2976,"### （）"]],[2976,2976],[2982,2982]]],[1568892510035,["GJX@GJXAIOU",[[1,2981,"四"]],[2981,2981],[2982,2982]]],[1568892513462,["GJX@GJXAIOU",[[-1,2997," "]],[2998,2998],[2997,2997]]],[1568892516038,["GJX@GJXAIOU",[[-1,2986," "]],[2987,2987],[2986,2986]]],[1568892518590,["GJX@GJXAIOU",[[-1,3011," "]],[3012,3012],[3011,3011]]],[1568892534006,["GJX@GJXAIOU",[[1,3014,"\n"]],[3013,3013],[3014,3014]]],[1568892534575,["GJX@GJXAIOU",[[1,3014,"```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"demo12\")\n    public String demo12(Model model){\n        model.addAttribute(\"model\", \"model 的值\");\n        return \"/index.jsp\";\n    }\n}\n```\n执行之后的对应参数值在 index.jsp 中取出进行显示：\n```jsp\n<body>\n   <!--下面两种方式都是可以的-->\n   model:${requestScope.model}\n   model:${model}\n</body>\n```"]],[3014,3014],[3347,3347]]],[1568892548839,["GJX@GJXAIOU",[[-1,3086,"12\")\n    public String demo12(Model model){\n        model.addAttribute(\"model\", \"model 的值"],[1,3175,"4"],[-1,3177,";\n        return \"/index.jsp\";\n    }"]],[3065,3213],[3089,3089]]],[1568892553468,["GJX@GJXAIOU",[[-1,3086,"4"]],[3087,3087],[3086,3086]]],[1568892554105,["GJX@GJXAIOU",[[1,3086,"13"]],[3086,3086],[3088,3088]]],[1568892563527,["GJX@GJXAIOU",[[1,3091,"\t\n"]],[3090,3090],[3092,3092]]],[1568892564071,["GJX@GJXAIOU",[[1,3092,"public ModelAndView demo4(){\n//参数表示跳转视图\nModelAndView mav = new ModelAndView(\"/index.jsp\");\nmav.addObject(\"mav\", \"mav 的值\");\nreturn mav;"]],[3092,3092],[3226,3226]]],[1568892572069,["GJX@GJXAIOU",[[1,3121,"  "],[1,3132,"  "],[1,3183,"  "],[1,3215,"  "]],[3121,3226],[3121,3234]]],[1568892572623,["GJX@GJXAIOU",[[1,3123,"  "],[1,3134,"  "],[1,3189,"  "],[1,3221,"  "]],[3121,3234],[3121,3242]]],[1568892573166,["GJX@GJXAIOU",[[1,3125,"  "],[1,3136,"  "],[1,3195,"  "],[1,3227,"  "]],[3121,3242],[3121,3250]]],[1568892580908,["GJX@GJXAIOU",[[1,3127,"  "],[1,3138,"  "],[1,3201,"  "],[1,3233,"  "]],[3121,3250],[3121,3258]]],[1568892586791,["GJX@GJXAIOU",[[1,3259,"        \n"]],[3258,3258],[3267,3267]]],[1568892588398,["GJX@GJXAIOU",[[-1,3263,"    "]],[3267,3267],[3263,3263]]],[1568892589441,["GJX@GJXAIOU",[[1,3263,"}"]],[3263,3263],[3264,3264]]],[1568892595301,["GJX@GJXAIOU",[[-1,3116,"4"]],[3117,3117],[3116,3116]]],[1568892595888,["GJX@GJXAIOU",[[1,3116,"13"]],[3116,3116],[3118,3118]]],[1568892626796,["GJX@GJXAIOU",[[-1,3320,"<!--下面两种方式都是可以的-->\n   model"],[1,3347,"mav"],[-1,3364,"odel}\n   model:${model"],[1,3386,"av"]],[3320,3387],[3343,3343]]],[1568892630075,["GJX@GJXAIOU",[[-1,3356,"jsp中：mav:${requestScope.mav}\n\n![文本框: @RequestMapping(\"demo4\")](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image005.gif)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image006.gif)\n"]],[3356,3578],[3356,3356]]],[1568892660388,["GJX@GJXAIOU",[[-1,3360,"**.**"]],[3365,3365],[3360,3360]]],[1568892661409,["GJX@GJXAIOU",[[1,3360,"、"]],[3360,3360],[3361,3361]]],[1568892670380,["GJX@GJXAIOU",[[1,3358,"#"]],[3358,3358],[3366,3366]]],[1568892674068,["GJX@GJXAIOU",[[1,3368,"**"],[1,3383,"**"]],[3368,3383],[3368,3387]]],[1568892690717,["GJX@GJXAIOU",[[1,3372,"在spring"]],[3372,3372],[3379,3379]]],[1568892695700,["GJX@GJXAIOU",[[1,3373," "],[1,3379," mvc.xmn"]],[3379,3379],[3387,3387]]],[1568892696510,["GJX@GJXAIOU",[[-1,3386,"n"]],[3387,3387],[3386,3386]]],[1568892698622,["GJX@GJXAIOU",[[1,3386,"l中"]],[3386,3386],[3388,3388]]],[1568892698656,["GJX@GJXAIOU",[[1,3387," "]],[3388,3388],[3389,3389]]],[1568892700205,["GJX@GJXAIOU",[[-1,3389," "]],[3390,3390],[3389,3389]]],[1568892702190,["GJX@GJXAIOU",[[1,3399," "]],[3399,3399],[3400,3400]]],[1568892721140,["GJX@GJXAIOU",[[-1,3407,"1."]],[3407,3409],[3407,3407]]],[1568892721632,["GJX@GJXAIOU",[[1,3407,"- "]],[3407,3407],[3409,3409]]],[1568892725543,["GJX@GJXAIOU",[[-1,3451,"\n"]],[3452,3452],[3451,3451]]],[1568892726022,["GJX@GJXAIOU",[[-1,3450,"\n"]],[3451,3451],[3450,3450]]],[1568892729964,["GJX@GJXAIOU",[[1,3414,"，"]],[3414,3414],[3415,3415]]],[1568892733199,["GJX@GJXAIOU",[[-1,3444,","]],[3445,3445],[3444,3444]]],[1568892733843,["GJX@GJXAIOU",[[1,3444,"，"]],[3444,3444],[3445,3445]]],[1568892798351,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568892798351,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568892741702,["GJX@GJXAIOU",[[1,3444,"的"]],[3444,3444],[3445,3445]]],[1568892741736,["GJX@GJXAIOU",[[1,3444," "]],[3445,3445],[3446,3446]]],[1568892742317,["GJX@GJXAIOU",[[1,3446,"值"]],[3446,3446],[3447,3447]]],[1568892750947,["GJX@GJXAIOU",[[1,3468,"；"]],[3468,3468],[3469,3469]]],[1568892789253,["GJX@GJXAIOU",[[-1,3471,"1.1"]],[3471,3474],[3471,3471]]],[1568892789741,["GJX@GJXAIOU",[[-1,3470,"\n"]],[3471,3471],[3470,3470]]],[1568892790919,["GJX@GJXAIOU",[[1,3471,"  "]],[3470,3470],[3472,3472]]],[1568892791226,["GJX@GJXAIOU",[[1,3472,"-"]],[3472,3472],[3473,3473]]],[1568892796707,["GJX@GJXAIOU",[[1,3481,"作用是"]],[3481,3481],[3484,3484]]],[1568892858354,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568892858354,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568892801700,["GJX@GJXAIOU",[[-1,3498,"."]],[3499,3499],[3498,3498]]],[1568892802314,["GJX@GJXAIOU",[[1,3498,"；"]],[3498,3498],[3499,3499]]],[1568893338363,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568893338363,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568893288284,["GJX@GJXAIOU",[[-1,3512,"o"]],[3513,3513],[3512,3512]]],[1568893292286,["GJX@GJXAIOU",[[1,3515,"o"]],[3515,3515],[3516,3516]]],[1568893300661,["GJX@GJXAIOU",[[-1,3501,"2."]],[3503,3503],[3501,3501]]],[1568893301086,["GJX@GJXAIOU",[[-1,3500,"\n"]],[3501,3501],[3500,3500]]],[1568893302171,["GJX@GJXAIOU",[[1,3500,"0 "]],[3500,3500],[3501,3501]]],[1568893303036,["GJX@GJXAIOU",[[-1,3500,"0"]],[3501,3501],[3500,3500]]],[1568893303374,["GJX@GJXAIOU",[[1,3500,"-"]],[3500,3500],[3501,3501]]],[1568893458369,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568893458369,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568893437086,["GJX@GJXAIOU",[[-1,3563,"2.1 "]],[3563,3567],[3563,3563]]],[1568893437517,["GJX@GJXAIOU",[[-1,3562,"\n"]],[3563,3563],[3562,3562]]],[1568893440127,["GJX@GJXAIOU",[[1,3562,"  0"]],[3562,3562],[3565,3565]]],[1568893440526,["GJX@GJXAIOU",[[-1,3564,"0"]],[3565,3565],[3564,3564]]],[1568893442671,["GJX@GJXAIOU",[[1,3564,"- qizh"]],[3564,3564],[3570,3570]]],[1568893443678,["GJX@GJXAIOU",[[-1,3566,"qizh"]],[3570,3570],[3566,3566]]],[1568893450516,["GJX@GJXAIOU",[[1,3566,"其中 ·"]],[3566,3566],[3570,3570]]],[1568893451613,["GJX@GJXAIOU",[[-1,3569,"·"]],[3570,3570],[3569,3569]]],[1568893452168,["GJX@GJXAIOU",[[1,3569,"`"]],[3569,3569],[3570,3570]]],[1568893454024,["GJX@GJXAIOU",[[1,3580,"`"]],[3580,3580],[3581,3581]]],[1568893456119,["GJX@GJXAIOU",[[-1,3582," "]],[3583,3583],[3582,3582]]],[1568893518375,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568893518375,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568893460443,["GJX@GJXAIOU",[[1,3582,"表示"]],[3582,3582],[3584,3584]]],[1568893462606,["GJX@GJXAIOU",[[-1,3586,","]],[3587,3587],[3586,3586]]],[1568893463484,["GJX@GJXAIOU",[[1,3586,"，"]],[3586,3586],[3587,3587]]],[1568893466677,["GJX@GJXAIOU",[[-1,3594,"."]],[3595,3595],[3594,3594]]],[1568893467155,["GJX@GJXAIOU",[[1,3594,"；"]],[3594,3594],[3595,3595]]],[1568893470878,["GJX@GJXAIOU",[[-1,3596,"\n2.2"]],[3596,3600],[3596,3596]]],[1568893471187,["GJX@GJXAIOU",[[1,3596,"-"]],[3596,3596],[3597,3597]]],[1568893472279,["GJX@GJXAIOU",[[1,3596,"  "]],[3597,3597],[3599,3599]]],[1568893480680,["GJX@GJXAIOU",[[1,3600,"`"]],[3600,3600],[3601,3601]]],[1568893489179,["GJX@GJXAIOU",[[1,3611,"` 中的值"]],[3611,3611],[3616,3616]]],[1568893492226,["GJX@GJXAIOU",[[1,3629,"；"]],[3629,3629],[3630,3630]]],[1568893494474,["GJX@GJXAIOU",[[1,3561,"；"]],[3561,3561],[3562,3562]]],[1568893499367,["GJX@GJXAIOU",[[1,3561,"`"]],[3561,3561],[3562,3562]]],[1568893502751,["GJX@GJXAIOU",[[1,3513,"`"]],[3513,3513],[3514,3514]]],[1568893504125,["GJX@GJXAIOU",[[-1,3512," "]],[3513,3513],[3512,3512]]],[1568893507909,["GJX@GJXAIOU",[[-1,3555,"  "]],[3557,3557],[3555,3555]]],[1568893516749,["GJX@GJXAIOU",[[-1,3632,"3."]],[3632,3634],[3632,3632]]],[1568893578374,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568893578374,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568893521381,["GJX@GJXAIOU",[[1,3632,"**"],[1,3636,"**"]],[3632,3636],[3632,3640]]],[1568893524156,["GJX@GJXAIOU",[[-1,3642,"3.1 "]],[3642,3646],[3642,3642]]],[1568893525481,["GJX@GJXAIOU",[[1,3642,"- "]],[3642,3642],[3644,3644]]],[1568893540248,["GJX@GJXAIOU",[[1,3662,"  - commons-fileupload."]],[3662,3662],[3685,3685]]],[1568893540775,["GJX@GJXAIOU",[[-1,3684,"."]],[3685,3685],[3684,3684]]],[1568893542712,["GJX@GJXAIOU",[[1,3684,".jar"]],[3684,3684],[3688,3688]]],[1568893542957,["GJX@GJXAIOU",[[1,3690," - \n "]],[3688,3688],[3693,3693]]],[1568893544709,["GJX@GJXAIOU",[[1,3693,"comn"]],[3693,3693],[3697,3697]]],[1568893545839,["GJX@GJXAIOU",[[-1,3696,"n"]],[3697,3697],[3696,3696]]],[1568893547105,["GJX@GJXAIOU",[[1,3696,"mos"]],[3696,3696],[3699,3699]]],[1568893547750,["GJX@GJXAIOU",[[-1,3698,"s"]],[3699,3699],[3698,3698]]],[1568893548175,["GJX@GJXAIOU",[[1,3698,"nd"]],[3698,3698],[3700,3700]]],[1568893549717,["GJX@GJXAIOU",[[-1,3699,"d"]],[3700,3700],[3699,3699]]],[1568893554095,["GJX@GJXAIOU",[[1,3699,"s-io.jar"]],[3699,3699],[3707,3707]]],[1568893568653,["GJX@GJXAIOU",[[-1,3708," |  |\n|  | ![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image007.jpg) | "]],[3708,3802],[3708,3708]]],[1568893571157,["GJX@GJXAIOU",[[-1,3710,"3.2 "]],[3710,3714],[3710,3710]]],[1568893571469,["GJX@GJXAIOU",[[-1,3709,"\n"]],[3710,3710],[3709,3709]]],[1568893571887,["GJX@GJXAIOU",[[-1,3708,"\n"]],[3709,3709],[3708,3708]]],[1568893573471,["GJX@GJXAIOU",[[1,3708,"- "]],[3708,3708],[3710,3710]]],[1568893638374,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568893638374,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568893580405,["GJX@GJXAIOU",[[-1,3722,","]],[3723,3723],[3722,3722]]],[1568893581105,["GJX@GJXAIOU",[[1,3722,","]],[3722,3722],[3723,3723]]],[1568893582341,["GJX@GJXAIOU",[[-1,3722,","]],[3723,3723],[3722,3722]]],[1568893582966,["GJX@GJXAIOU",[[1,3722,"，"]],[3722,3722],[3723,3723]]],[1568893600812,["GJX@GJXAIOU",[[1,3730,"，实现点击超链接就下载对应的文件；"]],[3730,3730],[3747,3747]]],[1568893625279,["GJX@GJXAIOU",[[-1,3749,"3.2.1 "]],[3749,3755],[3749,3749]]],[1568893627365,["GJX@GJXAIOU",[[-1,3748,"\n"]],[3749,3749],[3748,3748]]],[1568893629202,["GJX@GJXAIOU",[[1,3748,"  - "]],[3748,3748],[3752,3752]]],[1568893636550,["GJX@GJXAIOU",[[1,3781,"，文件夹中"]],[3781,3781],[3786,3786]]],[1568893698375,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568893698375,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568893640020,["GJX@GJXAIOU",[[1,3786,"放置"]],[3786,3786],[3788,3788]]],[1568893648581,["GJX@GJXAIOU",[[1,3763,"。"]],[3763,3763],[3764,3764]]],[1568893649494,["GJX@GJXAIOU",[[-1,3763,"。"]],[3764,3764],[3763,3763]]],[1568893651041,["GJX@GJXAIOU",[[1,3763,".xml"]],[3763,3763],[3767,3767]]],[1568893758378,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568893758378,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568893733227,["GJX@GJXAIOU",[[1,3792,"的是要下载单位"]],[3792,3792],[3799,3799]]],[1568893734348,["GJX@GJXAIOU",[[-1,3797,"单位"]],[3799,3799],[3797,3797]]],[1568893736113,["GJX@GJXAIOU",[[1,3797,"的文件；"]],[3797,3797],[3801,3801]]],[1568893744709,["GJX@GJXAIOU",[[-1,3852,"(file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image008.gif)\n"]],[3852,3930],[3852,3852]]],[1568893746612,["GJX@GJXAIOU",[[-1,3803,"![文本框: "]],[3803,3810],[3803,3803]]],[1568893746957,["GJX@GJXAIOU",[[-1,3802,"\n"]],[3803,3803],[3802,3802]]],[1568893748464,["GJX@GJXAIOU",[[1,3802,"`"]],[3802,3802],[3803,3803]]],[1568893750421,["GJX@GJXAIOU",[[-1,3844,"]"]],[3845,3845],[3844,3844]]],[1568893750518,["GJX@GJXAIOU",[[1,3844,"`"]],[3844,3844],[3845,3845]]],[1568893755526,["GJX@GJXAIOU",[[-1,3802,"`"]],[3802,3803],[3802,3802]]],[1568893755725,["GJX@GJXAIOU",[[1,3802,"\n"]],[3802,3802],[3803,3803]]],[1568893818378,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568893818378,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568893759158,["GJX@GJXAIOU",[[1,3802,"```"]],[3802,3802],[3805,3805]]],[1568893759208,["GJX@GJXAIOU",[[1,3805,"language\n```\n"]],[3805,3805],[3805,3813]]],[1568893761702,["GJX@GJXAIOU",[[-1,3805,"language"],[1,3813,"x"]],[3805,3813],[3806,3806]]],[1568893762064,["GJX@GJXAIOU",[[1,3806,"ml"]],[3806,3806],[3808,3808]]],[1568893762327,["GJX@GJXAIOU",[[1,3809,"\n"]],[3808,3808],[3809,3809]]],[1568893766207,["GJX@GJXAIOU",[[-1,3815,"<a  href=\"download?fileName=a.rar\">下载</a>"]],[3815,3856],[3815,3815]]],[1568893768102,["GJX@GJXAIOU",[[1,3809,"<a  href=\"download?fileName=a.rar\">下载</a>"]],[3809,3809],[3850,3850]]],[1568893775748,["GJX@GJXAIOU",[[-1,3856,"`\n3.3     |  |\n|  | ![文本框: @RequestMapping(\"download\")"]],[3856,3910],[3856,3856]]],[1568893776262,["GJX@GJXAIOU",[[-1,3858,"\n"]],[3856,3856],[3855,3855]]],[1568893777220,["GJX@GJXAIOU",[[1,3858,"\n"]],[3855,3855],[3856,3856]]],[1568893778996,["GJX@GJXAIOU",[[1,3856,"- bian"]],[3856,3856],[3862,3862]]],[1568893779693,["GJX@GJXAIOU",[[-1,3858,"bian"]],[3862,3862],[3858,3858]]],[1568893786523,["GJX@GJXAIOU",[[1,3858,"编写对应的控制器方法"]],[3858,3858],[3868,3868]]],[1568893787485,["GJX@GJXAIOU",[[1,3869,"- \n"]],[3868,3868],[3871,3871]]],[1568893788124,["GJX@GJXAIOU",[[-1,3869,"- "]],[3871,3871],[3869,3869]]],[1568893878379,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568893878379,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568893866146,["GJX@GJXAIOU",[[1,3869,"·"]],[3869,3869],[3870,3870]]],[1568893867637,["GJX@GJXAIOU",[[-1,3869,"·"]],[3870,3870],[3869,3869]]],[1568893868561,["GJX@GJXAIOU",[[1,3869,"```"]],[3869,3869],[3872,3872]]],[1568893868610,["GJX@GJXAIOU",[[1,3872,"language\n```\n"]],[3872,3872],[3872,3880]]],[1568893870864,["GJX@GJXAIOU",[[-1,3872,"language"],[1,3880,"j"]],[3872,3880],[3873,3873]]],[1568893871071,["GJX@GJXAIOU",[[1,3873,"va"]],[3873,3873],[3875,3875]]],[1568893871903,["GJX@GJXAIOU",[[-1,3873,"va"]],[3875,3875],[3873,3873]]],[1568893872328,["GJX@GJXAIOU",[[1,3873,"ava"]],[3873,3873],[3876,3876]]],[1568893872886,["GJX@GJXAIOU",[[1,3877,"\n"]],[3876,3876],[3877,3877]]],[1568893877878,["GJX@GJXAIOU",[[1,3877,"@Controller\npublic class DemoController {\n\t@RequestMapping(\"download\")\n\tpublic void download(String fileName,HttpServletResponse res,HttpServletRequest req) throws IOException{\n\t\t// 设置响应流中文件进行下载\n\t\tres.setHeader(\"Content-Disposition\", \"attachment;filename=\"+fileName);\n\t\t// 把二进制流放入到响应体中\n\t\tServletOutputStream os = res.getOutputStream();\n\t\tString path = req.getServletContext().getRealPath(\"files\");\n\t\tSystem.out.println(path);\n\t\tFile file = new File(path, fileName);\n\t\t// 把这个文件直接读成字节数组\n\t\tbyte[] bytes = FileUtils.readFileToByteArray(file);\n\t\tos.write(bytes);\n\t\tos.flush();\n\t\tos.close();\n\t}\n}"]],[3877,3877],[4467,4467]]],[1568893938381,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568893938381,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568893882743,["GJX@GJXAIOU",[[-1,4110," "]],[4111,4111],[4110,4110]]],[1568893894693,["GJX@GJXAIOU",[[-1,4005," "]],[4006,4006],[4005,4005]]],[1568893897503,["GJX@GJXAIOU",[[1,4005," "]],[4005,4005],[4006,4006]]],[1568893902312,["GJX@GJXAIOU",[[-1,3919,"\t"],[-1,3948,"\t"],[-1,4055,"\t"],[-1,4072,"\t"],[-1,4145,"\t"],[-1,4162,"\t"],[-1,4213,"\t"],[-1,4274,"\t"],[-1,4303,"\t"],[-1,4342,"\t"],[-1,4362,"\t"],[-1,4415,"\t"],[-1,4435,"\t"],[-1,4448,"\t"],[-1,4462,"\t"]],[3920,4464],[3919,4449]]],[1568893903656,["GJX@GJXAIOU",[[1,3919,"  "],[1,3947,"  "],[1,4052,"  "],[1,4069,"  "],[1,4140,"  "],[1,4157,"  "],[1,4206,"  "],[1,4267,"  "],[1,4294,"  "],[1,4333,"  "],[1,4351,"  "],[1,4404,"  "],[1,4422,"  "],[1,4435,"  "],[1,4448,"  "]],[3919,4449],[3919,4479]]],[1568893909071,["GJX@GJXAIOU",[[-1,4008,"r"]],[4008,4008],[4008,4008]]],[1568893911224,["GJX@GJXAIOU",[[1,4008,"r"]],[4008,4008],[4008,4008]]],[1568893912655,["GJX@GJXAIOU",[[-1,4007," "]],[4008,4008],[4007,4007]]],[1568893916760,["GJX@GJXAIOU",[[1,4007," "]],[4007,4007],[4008,4008]]],[1568893917463,["GJX@GJXAIOU",[[-1,3919,"  "],[-1,3949,"  "],[-1,4056,"  "],[-1,4075,"  "],[-1,4148,"  "],[-1,4167,"  "],[-1,4218,"  "],[-1,4281,"  "],[-1,4310,"  "],[-1,4351,"  "],[-1,4371,"  "],[-1,4426,"  "],[-1,4446,"  "],[-1,4461,"  "],[-1,4476,"  "]],[3919,4479],[3919,4449]]],[1568893918112,["GJX@GJXAIOU",[[1,3919,"\t"],[1,3947,"\t"],[1,4053,"\t"],[1,4069,"\t"],[1,4141,"\t"],[1,4157,"\t"],[1,4207,"\t"],[1,4267,"\t"],[1,4295,"\t"],[1,4333,"\t"],[1,4352,"\t"],[1,4404,"\t"],[1,4423,"\t"],[1,4435,"\t"],[1,4448,"\t"]],[3919,4449],[3920,4464]]],[1568894418394,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568894418394,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568894365350,["GJX@GJXAIOU",[[-1,4474,"public  void  download(String fileName,HttpServletResponse  res,HttpServletRequest req)  throws  IOException{\n\n//设置响应流中文件进行下载\n\nres.setHeader(\"Content-Disposition\", \"attachment;filename=\"+fileName);\n\n//把二进制流放入到响应体中.\n\nServletOutputStream  os  =  res.getOutputStream(); String  path  =\n\nreq.getServletContext().getRealPath(\"files\"); System.out.println(path);\n\nFile  file  =  new  File(path,  fileName);\n\n\nbyte[]  bytes  = FileUtils.readFileToByteArray(file);\n\nos.write(bytes); os.flush();\n\nos.close();\n\n\n}\n\n](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image009.gif) | \n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif)![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image011.gif)编写控制器方法\n\n"]],[4472,5227],[4472,4472]]],[1568894366173,["GJX@GJXAIOU",[[-1,4473,"\n"]],[4472,4472],[4471,4471]]],[1568894370791,["GJX@GJXAIOU",[[-1,4476,"**.**"]],[4481,4481],[4476,4476]]],[1568894371896,["GJX@GJXAIOU",[[1,4476,"/"]],[4476,4476],[4477,4477]]],[1568894373888,["GJX@GJXAIOU",[[-1,4476,"/"]],[4477,4477],[4476,4476]]],[1568894374516,["GJX@GJXAIOU",[[1,4476,"、"]],[4476,4476],[4477,4477]]],[1568894377384,["GJX@GJXAIOU",[[1,4474,"#"]],[4475,4475],[4482,4482]]],[1568894538398,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568894538398,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568894518156,["GJX@GJXAIOU",[[-1,4484,"1. "]],[4484,4487],[4484,4484]]],[1568894522111,["GJX@GJXAIOU",[[1,4484,"- 首先是"]],[4484,4484],[4489,4489]]],[1568894525918,["GJX@GJXAIOU",[[-1,4530,"."]],[4531,4531],[4530,4530]]],[1568894526329,["GJX@GJXAIOU",[[1,4530,"；"]],[4530,4530],[4531,4531]]],[1568894535709,["GJX@GJXAIOU",[[-1,4532,"\n2. "]],[4532,4536],[4532,4532]]],[1568894536498,["GJX@GJXAIOU",[[1,4532,"- "]],[4532,4532],[4534,4534]]],[1568894598399,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568894598399,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568894538984,["GJX@GJXAIOU",[[1,4534,"使用 "]],[4534,4534],[4536,4536]]],[1568894544483,["GJX@GJXAIOU",[[1,4554,"，"]],[4554,4554],[4555,4555]]],[1568894558388,["GJX@GJXAIOU",[[1,4576,"\n"]],[4576,4576],[4577,4577]]],[1568894561549,["GJX@GJXAIOU",[[-1,4585,"\n"]],[4586,4586],[4585,4585]]],[1568894561684,["GJX@GJXAIOU",[[-1,4584,"\n"]],[4585,4585],[4584,4584]]],[1568894562483,["GJX@GJXAIOU",[[-1,4581,"2.1"]],[4584,4584],[4581,4581]]],[1568894565295,["GJX@GJXAIOU",[[1,4577,"- "]],[4577,4577],[4579,4579]]],[1568894565813,["GJX@GJXAIOU",[[1,4577,"  "]],[4579,4579],[4581,4581]]],[1568894569102,["GJX@GJXAIOU",[[-1,4615,"."]],[4616,4616],[4615,4615]]],[1568894570081,["GJX@GJXAIOU",[[1,4615,"；"]],[4615,4615],[4616,4616]]],[1568894658399,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568894658399,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568894602205,["GJX@GJXAIOU",[[-1,4617,"\n2.2 "]],[4617,4622],[4617,4617]]],[1568894606206,["GJX@GJXAIOU",[[1,4617,"  - 然后"]],[4617,4617],[4623,4623]]],[1568894614227,["GJX@GJXAIOU",[[1,4650,"；"]],[4650,4650],[4651,4651]]],[1568894651054,["GJX@GJXAIOU",[[-1,4653,"3. "]],[4653,4656],[4653,4653]]],[1568894651678,["GJX@GJXAIOU",[[-1,4652,"\n"]],[4653,4653],[4652,4652]]],[1568894653967,["GJX@GJXAIOU",[[1,4652,"- "]],[4652,4652],[4654,4654]]],[1568894718403,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568894718403,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568894661373,["GJX@GJXAIOU",[[1,4662,"："]],[4662,4662],[4663,4663]]],[1568894778405,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568894778405,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568894755871,["GJX@GJXAIOU",[[-1,4665,"3.1 "]],[4665,4668],[4665,4665]]],[1568894756231,["GJX@GJXAIOU",[[-1,4664,"\n"]],[4665,4665],[4664,4664]]],[1568902281329,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568902281329,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568902257968,["GJX@GJXAIOU",[[-1,4683,"中"]],[4684,4684],[4683,4683]]],[1568902259854,["GJX@GJXAIOU",[[1,4683,"是"]],[4683,4683],[4684,4684]]],[1568902263237,["GJX@GJXAIOU",[[1,4690,"的；"]],[4690,4690],[4692,4692]]],[1568902269849,["GJX@GJXAIOU",[[-1,4694,"3.2 "]],[4694,4698],[4694,4694]]],[1568902270241,["GJX@GJXAIOU",[[-1,4693,"\n"]],[4694,4694],[4693,4693]]],[1568902341330,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568902341330,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568902285450,["GJX@GJXAIOU",[[-1,4751,"\n3.3 "]],[4751,4756],[4751,4751]]],[1568902288624,["GJX@GJXAIOU",[[-1,4783,"\n3.4"]],[4783,4787],[4783,4783]]],[1568902291339,["GJX@GJXAIOU",[[-1,4696," "]],[4697,4697],[4696,4696]]],[1568902295089,["GJX@GJXAIOU",[[-1,4782," "]],[4783,4783],[4782,4782]]],[1568902300323,["GJX@GJXAIOU",[[1,4693,"  "],[1,4750,"  "],[1,4782,"  "]],[4693,4814],[4693,4820]]],[1568902302068,["GJX@GJXAIOU",[[1,4695,"* "],[1,4754,"* "],[1,4787," *"]],[4693,4820],[4695,4826]]],[1568902305583,["GJX@GJXAIOU",[[1,4758,"·"]],[4758,4758],[4759,4759]]],[1568902306826,["GJX@GJXAIOU",[[-1,4758,"·"]],[4759,4759],[4758,4758]]],[1568902307298,["GJX@GJXAIOU",[[1,4758,"`"]],[4758,4758],[4759,4759]]],[1568902310951,["GJX@GJXAIOU",[[1,4769,"`"]],[4769,4769],[4770,4770]]],[1568902313883,["GJX@GJXAIOU",[[1,4796,"`"]],[4796,4796],[4797,4797]]],[1568902316069,["GJX@GJXAIOU",[[1,4816,"`"]],[4816,4816],[4817,4817]]],[1568902317457,["GJX@GJXAIOU",[[-1,4830,"."]],[4831,4831],[4830,4830]]],[1568902317907,["GJX@GJXAIOU",[[1,4830,";"]],[4830,4830],[4831,4831]]],[1568902318720,["GJX@GJXAIOU",[[-1,4830,";"]],[4831,4831],[4830,4830]]],[1568902319215,["GJX@GJXAIOU",[[1,4830,"；"]],[4830,4830],[4831,4831]]],[1568902322736,["GJX@GJXAIOU",[[-1,4743,"."]],[4744,4744],[4743,4743]]],[1568902325575,["GJX@GJXAIOU",[[1,4752,"；"]],[4752,4752],[4753,4753]]],[1568902328777,["GJX@GJXAIOU",[[-1,4734,","]],[4735,4735],[4734,4734]]],[1568902329645,["GJX@GJXAIOU",[[1,4734,"，"]],[4734,4734],[4735,4735]]],[1568902331253,["GJX@GJXAIOU",[[1,4734,"·"]],[4734,4734],[4735,4735]]],[1568902332960,["GJX@GJXAIOU",[[-1,4734,"·"]],[4735,4735],[4734,4734]]],[1568902333452,["GJX@GJXAIOU",[[1,4734,"`"]],[4734,4734],[4735,4735]]],[1568902336533,["GJX@GJXAIOU",[[1,4701,"`"]],[4701,4701],[4702,4702]]],[1568902337170,["GJX@GJXAIOU",[[1,4701," "]],[4701,4701],[4702,4702]]],[1568902401330,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568902401330,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568902344571,["GJX@GJXAIOU",[[-1,4836,"4. "]],[4836,4839],[4836,4836]]],[1568902346488,["GJX@GJXAIOU",[[1,4836,"**"],[1,4841,"**"]],[4836,4841],[4836,4845]]],[1568902361623,["GJX@GJXAIOU",[[-1,4847,"4.1 "]],[4847,4851],[4847,4847]]],[1568902362136,["GJX@GJXAIOU",[[-1,4846,"\n"]],[4847,4847],[4846,4846]]],[1568902363896,["GJX@GJXAIOU",[[1,4846,"- s "]],[4846,4846],[4849,4849]]],[1568902364185,["GJX@GJXAIOU",[[1,4849,"hou"]],[4849,4849],[4852,4852]]],[1568902366120,["GJX@GJXAIOU",[[-1,4848,"shou "]],[4852,4852],[4848,4848]]],[1568902367920,["GJX@GJXAIOU",[[1,4848,"首先"]],[4848,4848],[4850,4850]]],[1568902374382,["GJX@GJXAIOU",[[1,4915,"；"]],[4915,4915],[4916,4916]]],[1568902377697,["GJX@GJXAIOU",[[-1,4918,"4.2 "]],[4918,4922],[4918,4918]]],[1568902381632,["GJX@GJXAIOU",[[1,4918,"- 然后"]],[4918,4918],[4922,4922]]],[1568902761338,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568902761338,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568902728457,["GJX@GJXAIOU",[[-1,4933,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif)"]],[4933,5013],[4933,4933]]],[1568902728921,["GJX@GJXAIOU",[[-1,4934,"\n"]],[4933,4933],[4932,4932]]],[1568902730501,["GJX@GJXAIOU",[[1,4932,"```"]],[4932,4932],[4935,4935]]],[1568902730536,["GJX@GJXAIOU",[[1,4935,"language\n```\n"]],[4935,4935],[4935,4943]]],[1568902733013,["GJX@GJXAIOU",[[-1,4935,"language"],[1,4943,"j"]],[4935,4943],[4936,4936]]],[1568902733341,["GJX@GJXAIOU",[[1,4936,"dp"]],[4936,4936],[4938,4938]]],[1568902734154,["GJX@GJXAIOU",[[-1,4936,"dp"]],[4938,4938],[4936,4936]]],[1568902734701,["GJX@GJXAIOU",[[1,4936,"sp"]],[4936,4936],[4938,4938]]],[1568902735124,["GJX@GJXAIOU",[[1,4939,"\n"]],[4938,4938],[4939,4939]]],[1568902738441,["GJX@GJXAIOU",[[1,4939,"<body>\n<form action=\"upload\" enctype=\"multipart/form-data\" method=\"post\">\n\t姓名:<input type=\"text\" name=\"name\"/><br/>\n\t文件:<input type=\"file\" name=\"file\"/><br/>\n\t<input type=\"submit\" value=\"提交\"/>\n</form>\n</body>"]],[4939,4939],[5147,5147]]],[1568902881344,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568902881344,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568902847701,["GJX@GJXAIOU",[[1,5153,"- ranh"]],[5153,5153],[5159,5159]]],[1568902848657,["GJX@GJXAIOU",[[-1,5155,"ranh"]],[5159,5159],[5155,5155]]],[1568902858341,["GJX@GJXAIOU",[[1,5155,"然后配置 springmvc.xml"]],[5155,5155],[5173,5173]]],[1568902858937,["GJX@GJXAIOU",[[1,5174,"- \n"]],[5173,5173],[5176,5176]]],[1568902859785,["GJX@GJXAIOU",[[-1,5174,"- "]],[5176,5176],[5174,5174]]],[1568902861169,["GJX@GJXAIOU",[[1,5174,"···"]],[5174,5174],[5177,5177]]],[1568902863241,["GJX@GJXAIOU",[[-1,5174,"···"]],[5177,5177],[5174,5174]]],[1568902864637,["GJX@GJXAIOU",[[1,5174,"```"]],[5174,5174],[5177,5177]]],[1568902864672,["GJX@GJXAIOU",[[1,5177,"language\n```\n"]],[5177,5177],[5177,5185]]],[1568902866325,["GJX@GJXAIOU",[[-1,5177,"language"],[1,5185,"x"]],[5177,5185],[5178,5178]]],[1568902866611,["GJX@GJXAIOU",[[1,5178,"ml"]],[5178,5178],[5180,5180]]],[1568902867017,["GJX@GJXAIOU",[[1,5181,"\n"]],[5180,5180],[5181,5181]]],[1568902941345,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568902941345,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568902917932,["GJX@GJXAIOU",[[1,5181,"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n\txmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/mvc\n        http://www.springframework.org/schema/mvc/spring-mvc.xsd\">\n    <!-- 扫描注解 -->\n\t<context:component-scan base-package=\"com.bjsxt.controller\"></context:component-scan>\n\t<!-- 注解驱动 -->\n\t<!-- org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping -->\n\t<!-- org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter -->\n\t<mvc:annotation-driven></mvc:annotation-driven>\n\t<!-- 静态资源 -->\n\t<mvc:resources location=\"/js/\" mapping=\"/js/**\"></mvc:resources>\n\t<mvc:resources location=\"/css/\" mapping=\"/css/**\"></mvc:resources>\n\t<mvc:resources location=\"/images/\" mapping=\"/images/**\"></mvc:resources>\n\t<mvc:resources location=\"/files/\" mapping=\"/files/**\"></mvc:resources>\n\t<!-- MultipartResovler解析器 -->\n\t<bean id=\"multipartResolver\" class=\"org.springframework.web.multipart.commons.CommonsMultipartResolver\">\n\t\t<property name=\"maxUploadSize\" value=\"50\"></property>\n\t</bean>\n\t<!-- 异常解析器 -->\n\t<bean id=\"exceptionResolver\" class=\"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver\">\n\t\t<property name=\"exceptionMappings\">\n\t\t\t<props>\n\t\t\t\t<prop key=\"org.springframework.web.multipart.MaxUploadSizeExceededException\">/error.jsp</prop>\n\t\t\t</props>\n\t\t</property>\n\t</bean>\n</beans>"]],[5181,5181],[6991,6991]]],[1568902923770,["GJX@GJXAIOU",[[1,6473,"\n\t"]],[6471,6471],[6473,6473]]],[1568902923898,["GJX@GJXAIOU",[[-1,6472,"\t"],[1,6473,"\n"]],[6473,6473],[6473,6473]]],[1568902934325,["GJX@GJXAIOU",[[1,5173,";"]],[5173,5173],[5174,5174]]],[1568902935190,["GJX@GJXAIOU",[[-1,5173,";"]],[5174,5174],[5173,5173]]],[1568902940107,["GJX@GJXAIOU",[[1,5173,"；主要是增加了"]],[5173,5173],[5180,5180]]],[1568903001344,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568903001344,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568902954693,["GJX@GJXAIOU",[[1,5180," MultipartResovler解析器"]],[5180,5180],[5201,5201]]],[1568902954732,["GJX@GJXAIOU",[[1,5198," "]],[5201,5201],[5202,5202]]],[1568902963066,["GJX@GJXAIOU",[[1,5202,"和异常解析器"]],[5202,5202],[5208,5208]]],[1568903181350,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568903181350,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568903129873,["GJX@GJXAIOU",[[-1,7034,"4.3     |  |\n|  | ![文本框: <!--  MultipartResovler 解析器  -->\n\n<bean  id=\"multipartResolver\" class=\"org.springframework.web.multipart.commons.Comm onsMultipartResolver\">\n\n<property  name=\"maxUploadSize\" value=\"50\"></property>\n\n</bean>\n\n<!--  异常解析器  -->\n\n<bean  id=\"exceptionResolver\" class=\"org.springframework.web.servlet.handler.Simple MappingExceptionResolver\">\n\n<property  name=\"exceptionMappings\">\n\n\n<props>\n\n\n<prop key=\"org.springframework.web.multipart.MaxUploadSizeE xceededException\">/error.jsp</prop>\n\n</props>\n\n\n</property>\n\n\n</bean>\n\n](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image013.gif) | \n配置 springmvc.xml"]],[7034,7674],[7034,7034]]],[1568903132322,["GJX@GJXAIOU",[[-1,7035,"\n"]],[7034,7034],[7033,7033]]],[1568903134017,["GJX@GJXAIOU",[[-1,7035,"4.4"]],[7035,7038],[7035,7035]]],[1568903134411,["GJX@GJXAIOU",[[-1,7034,"\n"]],[7035,7035],[7034,7034]]],[1568903135450,["GJX@GJXAIOU",[[1,7034,"-"]],[7034,7034],[7035,7035]]],[1568903146505,["GJX@GJXAIOU",[[1,7036,"最后"]],[7036,7036],[7038,7038]]],[1568903152425,["GJX@GJXAIOU",[[-1,7046,"4.4.1"]],[7046,7051],[7046,7046]]],[1568903152795,["GJX@GJXAIOU",[[-1,7045,"\n"]],[7046,7046],[7045,7045]]],[1568903160474,["GJX@GJXAIOU",[[-1,7674,"性值相同"],[1,7678,"\n"]],[7674,7678],[7674,7674]]],[1568903162921,["GJX@GJXAIOU",[[1,7094,"性值相同"]],[7094,7094],[7098,7098]]],[1568903179921,["GJX@GJXAIOU",[[-1,7100," |  |\n|  | ![文本框: @RequestMapping(\"upload\")\n\n\npublic  String  upload(MultipartFile  file,String  name)\n\n\nthrows  IOException{\n\n\nString  fileName  =  file.getOriginalFilename(); String  suffix  =\n\nfileName.substring(fileName.lastIndexOf(\".\"));\n\n//判断上传文件类型\n\nif(suffix.equalsIgnoreCase(\".png\")){\n\n\nString  uuid  =  UUID.randomUUID().toString();\n\n\nFileUtils.copyInputStreamToFile(file.getInputStream (),  new  File(\"E:/\"+uuid+suffix));\n\nreturn  \"/index.jsp\";\n\n\n}else{\n\n\nreturn  \"error.jsp\";\n\n\n}\n\n\n}\n\n](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image014.gif) | \n"]],[7100,7678],[7100,7100]]],[1568903241366,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568903241366,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568903183248,["GJX@GJXAIOU",[[1,7099,"·"]],[7099,7099],[7100,7100]]],[1568903184291,["GJX@GJXAIOU",[[-1,7099,"·"]],[7100,7100],[7099,7099]]],[1568903185109,["GJX@GJXAIOU",[[1,7099,"```"]],[7099,7099],[7102,7102]]],[1568903185145,["GJX@GJXAIOU",[[1,7102,"language\n```\n"]],[7102,7102],[7102,7110]]],[1568903186621,["GJX@GJXAIOU",[[-1,7102,"language"],[1,7110,"j"]],[7102,7110],[7103,7103]]],[1568903187039,["GJX@GJXAIOU",[[1,7103,"ava"]],[7103,7103],[7106,7106]]],[1568903187538,["GJX@GJXAIOU",[[1,7107,"\n"]],[7106,7106],[7107,7107]]],[1568903192043,["GJX@GJXAIOU",[[1,7107,"@RequestMapping(\"upload\")\npublic String upload(MultipartFile file,String name)\nthrows IOException{\nString fileName = file.getOriginalFilename();\nString suffix =\nfileName.substring(fileName.lastIndexOf(\".\"));\n//判断上传文件类型\nif(suffix.equalsIgnoreCase(\".png\")){\nString uuid = UUID.randomUUID().toString();\nFileUtils.copyInputStreamToFile(file.getInputStream\n(), new File(\"E:/\"+uuid+suffix));\nreturn \"/index.jsp\";\n}else{\nreturn \"error.jsp\";\n}\n}"]],[7107,7107],[7544,7544]]],[1568903198185,["GJX@GJXAIOU",[[-1,7107,"@RequestMapping(\"upload\")\npublic String upload(MultipartFile file,String name)\nthrows IOException{\nString fileName = file.getOriginalFilename();\nString suffix =\nfileName.substring(fileName.lastIndexOf(\".\"));\n//判断上传文件类型\nif(suffix.equalsIgnoreCase(\".png\")){\nString uuid = UUID.randomUUID().toString();\nFileUtils.copyInputStreamToFile(file.getInputStream\n(), new File(\"E:/\"+uuid+suffix));\nreturn \"/index.jsp\";\n}else{\nreturn \"error.jsp\";\n}\n}"]],[7107,7544],[7107,7107]]],[1568903207581,["GJX@GJXAIOU",[[1,7107,"@Controller\npublic class DemoController {\n\t@RequestMapping(\"download\")\n\tpublic void download(String fileName,HttpServletResponse res,HttpServletRequest req) throws IOException{\n\t\t// 设置响应流中文件进行下载\n\t\tres.setHeader(\"Content-Disposition\",\"attachment;filename=\"+fileName);\n\t\t// 把二进制流放入到响应体中\n\t\tServletOutputStream os = res.getOutputStream();\n\t\tString path = req.getServletContext().getRealPath(\"files\");\n\t\tSystem.out.println(path);\n\t\tFile file = new File(path, fileName);\n\t\t// 把这个文件直接读成字节数组\n\t\tbyte[] bytes = FileUtils.readFileToByteArray(file);\n\t\tos.write(bytes);\n\t\tos.flush();\n\t\tos.close();\n\t}\n}"]],[7107,7107],[7696,7696]]],[1568903213921,["GJX@GJXAIOU",[[-1,7167,"down"],[1,7171,"up"],[-1,7178,"\t"],[-1,7186,"void download("],[-1,7207,"fileName,HttpServletResponse res,HttpServletRequest req) "],[1,7264,"upload(MultipartFile file,String name)\n"],[-1,7284,"\t\t// 设置响应流中文件进行下载\n\t\tres.setHeader(\"Content-Disposition\",\"attachment;filename=\"+"],[1,7363,"String "],[-1,7371,");\n\t\t// 把二进制流放入到响应体中\n\t\tServletOutputStream os"],[-1,7419,"res"],[1,7422,"file"],[-1,7427,"utputSt"],[1,7435,"iginalFil"],[1,7436,"n"],[1,7438,"e"],[-1,7442,"\t\t"],[-1,7451,"path = req.getServletContext().getRealPath(\"files\");\n\t\tSystem.out.println(path"],[1,7529,"suffix =\nfileName.substring(fileName.lastIndexOf(\".\"));\n//判断上传文件类型\nif(suffix.equalsIgnoreCase(\".png\")){\nString uuid = UUID.randomUUID().toString("],[-1,7532,"\t\t"],[-1,7538," file = new "],[1,7550,"Utils.copyInputStreamTo"],[-1,7555,"path, "],[-1,7565,"Name);\n\t\t// 把这个文件直接读成字节数组\n\t\tbyte[] bytes ="],[1,7607,".getInputStream\n(), new"],[-1,7612,"Utils.readFileToByteArray(file);\n\t\tos.write(bytes);\n\t\tos.flush();\n\t\tos.close();\n\t"],[1,7693,"(\"E:/\"+uuid+suffix));\nreturn \"/index.jsp\";\n}else{\nreturn \"error.jsp\";\n}\n"]],[7150,7694],[7587,7587]]],[1568903220308,["GJX@GJXAIOU",[[-1,7150,"@RequestMapping(\"upload\")\npublic String upload(MultipartFile file,String name)\nthrows IOException{\nString fileName = file.getOriginalFilename();\nString suffix =\nfileName.substring(fileName.lastIndexOf(\".\"));\n//判断上传文件类型\nif(suffix.equalsIgnoreCase(\".png\")){\nString uuid = UUID.randomUUID().toString();\nFileUtils.copyInputStreamToFile(file.getInputStream\n(), new File(\"E:/\"+uuid+suffix));\nreturn \"/index.jsp\";\n}else{\nreturn \"error.jsp\";\n}\n}"]],[7150,7587],[7150,7150]]],[1568903232891,["GJX@GJXAIOU",[[1,7150,"@RequestMapping(\"upload\")\npublic String upload(MultipartFile file,String name)\nthrows IOException{\nString fileName = file.getOriginalFilename();\nString suffix =\nfileName.substring(fileName.lastIndexOf(\".\"));\n//判断上传文件类型\nif(suffix.equalsIgnoreCase(\".png\")){\nString uuid = UUID.randomUUID().toString();\nFileUtils.copyInputStreamToFile(file.getInputStream\n(), new File(\"E:/\"+uuid+suffix));\nreturn \"/index.jsp\";\n}else{\nreturn \"error.jsp\";\n}\n}"]],[7150,7150],[7587,7587]]],[1568903301350,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568903301350,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568903299483,["GJX@GJXAIOU",[[1,7176,"    "]],[7176,7176],[7180,7180]]],[1568903361353,[null,[[-1,3380," "],[1,3386,"m"]],[3380,3380],[3387,3387]]],[1568903361353,[null,[[1,3380," "],[-1,3385,"m"]],[3387,3387],[3380,3380]]],[1568903301561,["GJX@GJXAIOU",[[-1,7232,"\n"]],[7233,7233],[7232,7232]]],[1568903304916,["GJX@GJXAIOU",[[1,7252,"        "]],[7252,7252],[7260,7260]]],[1568903307156,["GJX@GJXAIOU",[[1,7306,"        "]],[7306,7306],[7314,7314]]],[1568903309898,["GJX@GJXAIOU",[[-1,7329,"\n"]],[7330,7330],[7329,7329]]],[1568903311078,["GJX@GJXAIOU",[[1,7329," "]],[7329,7329],[7330,7330]]],[1568903315570,["GJX@GJXAIOU",[[1,7377,"  "],[1,7388,"  "],[1,7425,"  "],[1,7469,"  "],[1,7521,"  "],[1,7555,"  "],[1,7576,"  "],[1,7583,"  "],[1,7603,"  "],[1,7605,"  "]],[7377,7606],[7377,7626]]],[1568903315905,["GJX@GJXAIOU",[[1,7379,"  "],[1,7390,"  "],[1,7429," "],[1,7431," "],[1,7475,"  "],[1,7529,"  "],[1,7567,"  "],[1,7590,"  "],[1,7597," "],[1,7599," "],[1,7621,"  "],[1,7623,"  "]],[7377,7626],[7377,7646]]],[1568903316490,["GJX@GJXAIOU",[[1,7381,"  "],[1,7392,"  "],[1,7433," "],[1,7437," "],[1,7481,"  "],[1,7537,"  "],[1,7579,"  "],[1,7604,"  "],[1,7611," "],[1,7615," "],[1,7639,"  "],[1,7641,"  "]],[7377,7646],[7377,7666]]],[1568903316857,["GJX@GJXAIOU",[[1,7383,"  "],[1,7394,"  "],[1,7437," "],[1,7443," "],[1,7487,"  "],[1,7545,"  "],[1,7591,"  "],[1,7618,"  "],[1,7625," "],[1,7631," "],[1,7657,"  "],[1,7659,"  "]],[7377,7666],[7377,7686]]],[1568903324753,["GJX@GJXAIOU",[[-1,7681,"    "]],[7681,7684],[7680,7680]]],[1568903332483,["GJX@GJXAIOU",[[-1,7553,"        "]],[7561,7561],[7553,7553]]],[1568903332921,["GJX@GJXAIOU",[[-1,7552,"\n"]],[7553,7553],[7552,7552]]],[1568903338609,["GJX@GJXAIOU",[[1,7449,"  "],[1,7493,"  "],[1,7594,"  "],[1,7623,"  "],[1,7630,"  "]],[7449,7657],[7451,7667]]],[1568903339233,["GJX@GJXAIOU",[[1,7451,"  "],[1,7495,"  "],[1,7600,"  "],[1,7631,"  "],[1,7638,"  "]],[7451,7667],[7453,7677]]],[1568903342709,["GJX@GJXAIOU",[[1,7658,"    "]],[7658,7658],[7662,7662]]],[1568903344030,["GJX@GJXAIOU",[[1,7606,"    "]],[7606,7606],[7610,7610]]],[1568903355857,["GJX@GJXAIOU",[[-1,7607,"   "]],[7607,7610],[7607,7607]]],[1568903359649,["GJX@GJXAIOU",[[-1,7660,"   "]],[7660,7663],[7660,7660]]]],null,"GJX@GJXAIOU"],["7b65d660-a134-459a-8b52-615db492d100",1568937562229,"# FrameDay03_1 SpringMVC \n这里的信息\n\n**主要内容：**\n\n* JSP 九大内置对象和四大作用域复习\n* SpringMVC 作用域传值\n* 文件下载\n* 文件上传\n\n\n\n## 一、 JSP 九大内置对象和四大作用域复习\n\n### （一）九大内置对象\n名称 | 类型 | 含义 | 获取方式\n---|---|---|---\nrequest |HttpSevletRequest |封装所有请求信息| 在方法参数\nresponse|HttpServletResponse|封装所有响应信息|在方法参数\nsession |HttpSession |封装所有会话信息|req.getSession()\napplication| ServletContext |所有信息|getServletContext();和 request.getServletContext();\nout |PrintWriter |输出对象 |response.getWriter()\nexception |Exception |异常对象 |\npage| Object |当前页面对象 |\npageContext | PageContext | 作用是获取其他对象 |\nconfig |ServletConfig | 配置信息 | \n\n\n### （二）四大作用域\n\n- page：在当前页面不会重新实例化；\n- request：在一次请求中同一个对象，下次请求重新实例化一个request 对象；\n- session：作用域在一次会话，只要客户端 Cookie 中传递的 Jsessionid 不变，Session 不会重新实例化(不超过默认时间)；\n- application：只有在 tomcat 启动项目时才实例化，关闭 tomcat 时销毁application，所以在整个应用程序内都是单例的。\n\n**实际有效时间:**\n- 浏览器关闭则 Cookie 失效；\n- 默认时间，在时间范围内无任何交互；可以在 tomcat 的web.xml 中配置\n```xml\n<session-config>\n    <session-timeout>30</session-timeout>\n</session-config>\n```\n\n## 二、SpringMVC 作用域传值的几种方式\n\n### （一）使用原生 Servlet\n\n- 首先在 HanlderMethod 参数中添加作用域对象（即在 Controller 中配置）\n```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"demo10\")\n\tpublic String demo10(HttpServletRequest abc, HttpSession sessionParam){\n\t\t// request 作用域\n\t\tabc.setAttribute(\"req\", \"req 的值\");\n\n\t\t// session 作用域\n\t\tHttpSession session = abc.getSession();\n\t\tsession.setAttribute(\"session\", \"session 的值\");\n\n\t\t// 下面这句话是结合方法中的 HTTPSession 参数进行使用，两个加起来等效于上面两句\n\t\tsessionParam.setAttribute(\"sessionParam\",\"sessionParam的值\");\n\n\t\t// appliaction 作用域\n\t\tServletContext application =  abc.getServletContext();\n\t\tapplication.setAttribute(\"application\",\"application的值\");\n\t\treturn  \"/index.jsp\";\n\t}\n}\n```\n执行之后的对应参数值在 index.jsp 中取出进行显示：\n```jsp\n<body>\n    request:${requestScope.req} <br/>\n    session:${sessionScope.session} <br/>\n    sessionParam:${sessionScope.sessionParam}<br/>\n    application:${applicationScope.application}<br/>\n</body>\n```\n通过访问：`http://localhost:8080/SpringMVC03_war_exploded/demo10` 得到结果为：\n```java\nrequest:req 的值 \nsession:session 的值 \nsessionParam:sessionParam的值\napplication:application的值\n```\n\n### （二）使用 Map 集合\n\n- 本质上是把 map 中内容放在 request 作用域中；\n- spring 会对 map 集合通过 BindingAwareModelMap 类进行实例化；\n```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"demo11\")\n    public String demo11(Map<String,Object> map){\n        System.out.println(map.getClass());\n        map.put(\"map\",\"map 的值\");\n        return \"/index.jsp\";\n    }\n}\n```\n执行之后的对应参数值在 index.jsp 中取出进行显示：\n```jsp\n<body>\n   map:${requestScope.map}\n</body>\n```\n通过访问：`http://localhost:8080/SpringMVC03_war_exploded/demo10`得到结果为：`map:map 的值`\n\n\n### （三）使用 SpringMVC 中 Model 接口 \n\n该接口的本质把内容最终放入到 request 作用域中。\n```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"demo12\")\n    public String demo12(Model model){\n        model.addAttribute(\"model\", \"model 的值\");\n        return \"/index.jsp\";\n    }\n}\n```\n执行之后的对应参数值在 index.jsp 中取出进行显示：\n```jsp\n<body>\n   <!--下面两种方式都是可以的-->\n   model:${requestScope.model}\n   model:${model}\n</body>\n```\n\n\n### （四）使用 SpringMVC 中 ModelAndView 类\n\n```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"demo13\")\n\tpublic ModelAndView demo13(){\n        //参数表示跳转视图\n        ModelAndView mav = new ModelAndView(\"/index.jsp\");\n        mav.addObject(\"mav\", \"mav 的值\");\n        return mav;\n    }\n}\n```\n执行之后的对应参数值在 index.jsp 中取出进行显示：\n```jsp\n<body>\n   mav:${requestScope.mav}\n</body>\n```\n\n## 三、文件下载\n\n**注意在 springmvc.xml 中配置放行 files 文件夹**\n\n- 访问资源时，响应头如果没有设置 Content-Disposition 的值，浏览器默认按照 inline 值进行处理；\n  - inline 作用是能显示就显示,不能显示就下载；\n- 只需要修改相应头中 `Context-Disposition= ”attachment;filename=文件名”`；\n  - 其中 `attachment` 表示下载，以附件形式下载；\n  - `filename=值` 中的值就是下载时显示的下载文件名；\n\n**实现步骤**\n\n- 导入 apache 的两个 jar\n  - commons-fileupload.jar\n  - commons-io.jar\n- 在 jsp 中添加超链接，设置要下载文件，实现点击超链接就下载对应的文件；\n  - 在 springmvc.xml 中放行静态资源 files 文件夹，文件夹中放置的是要下载的文件；\n```xml\n<a  href=\"download?fileName=a.rar\">下载</a>\n```\n\n- 编写对应的控制器方法\n```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"download\")\n\tpublic void download(String fileName,HttpServletResponse res,HttpServletRequest req) throws IOException{\n\t\t// 设置响应流中文件进行下载\n\t\tres.setHeader(\"Content-Disposition\",\"attachment;filename=\"+fileName);\n\t\t// 把二进制流放入到响应体中\n\t\tServletOutputStream os = res.getOutputStream();\n\t\tString path = req.getServletContext().getRealPath(\"files\");\n\t\tSystem.out.println(path);\n\t\tFile file = new File(path, fileName);\n\t\t// 把这个文件直接读成字节数组\n\t\tbyte[] bytes = FileUtils.readFileToByteArray(file);\n\t\tos.write(bytes);\n\t\tos.flush();\n\t\tos.close();\n\t}\n}\n```\n\n\n## 四、文件上传\n\n- 首先是基于 apache 的 commons-fileupload.jar 完成文件上传；\n- 使用 MultipartResovler，是SpringMVC中负责文件上传的组件，\n  - 作用: 把客户端上传的文件流转换成 MutipartFile 封装类；\n  - 然后可以通过 MutipartFile 封装类获取到文件流；\n- 表单数据类型分类：\n在<form>的 enctype 属性是控制表单类型的；\n  * 默认值为 `application/x-www-form-urlencoded`，表示普通表单数据(即少量文字信息)；\n  * `text/plain` 表示大文字量时使用的类型.例如邮件,论文\n  * `multipart/form-data` 表单中包含二进制文件内容；\n\n**实现步骤:**\n- 首先导入 springmvc 包和 apache 文件上传 commons-fileupload 和commons-io 两个 jar；\n\n- 然后编写 JSP 页面\n```jsp\n<body>\n<form action=\"upload\" enctype=\"multipart/form-data\" method=\"post\">\n\t姓名:<input type=\"text\" name=\"name\"/><br/>\n\t文件:<input type=\"file\" name=\"file\"/><br/>\n\t<input type=\"submit\" value=\"提交\"/>\n</form>\n</body>\n```\n\n- 然后配置 springmvc.xml；主要是增加了 MultipartResovler 解析器和异常解析器\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n\txmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/mvc\n        http://www.springframework.org/schema/mvc/spring-mvc.xsd\">\n    <!-- 扫描注解 -->\n\t<context:component-scan base-package=\"com.bjsxt.controller\"></context:component-scan>\n\t<!-- 注解驱动 -->\n\t<!-- org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping -->\n\t<!-- org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter -->\n\t<mvc:annotation-driven></mvc:annotation-driven>\n\t<!-- 静态资源 -->\n\t<mvc:resources location=\"/js/\" mapping=\"/js/**\"></mvc:resources>\n\t<mvc:resources location=\"/css/\" mapping=\"/css/**\"></mvc:resources>\n\t<mvc:resources location=\"/images/\" mapping=\"/images/**\"></mvc:resources>\n\t<mvc:resources location=\"/files/\" mapping=\"/files/**\"></mvc:resources>\n\n\n\t<!-- MultipartResovler解析器 -->\n\t<bean id=\"multipartResolver\" class=\"org.springframework.web.multipart.commons.CommonsMultipartResolver\">\n\t\t<property name=\"maxUploadSize\" value=\"50\"></property>\n\t</bean>\n\t<!-- 异常解析器 -->\n\t<bean id=\"exceptionResolver\" class=\"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver\">\n\t\t<property name=\"exceptionMappings\">\n\t\t\t<props>\n\t\t\t\t<prop key=\"org.springframework.web.multipart.MaxUploadSizeExceededException\">/error.jsp</prop>\n\t\t\t</props>\n\t\t</property>\n\t</bean>\n</beans>\n```\n\n- 最后编写控制器类\n MultipartFile 对象名必须和<input type=”file”/>的 name 属性值相同\n```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"upload\")\n    public String upload(MultipartFile file,String name)throws IOException{\n        String fileName = file.getOriginalFilename();\n        String suffix = fileName.substring(fileName.lastIndexOf(\".\"));\n        //判断上传文件类型\n        if(suffix.equalsIgnoreCase(\".png\")){\n            String uuid = UUID.randomUUID().toString();\n            FileUtils.copyInputStreamToFile(file.getInputStream(), new File(\"E:/\"+uuid+suffix));\n             return \"/index.jsp\";\n            }else{\n             return \"error.jsp\";\n        }\n    }\n}\n```\n\n\n",[[1568937531488,["GJX@GJXAIOU",[[-1,13,"1"]],[14,14],[13,13]]],[1568937531540,["GJX@GJXAIOU",[[1,13,"2"]],[13,13],[14,14]]]],null,"GJX@GJXAIOU"],["33d41ad4-f447-4c8f-a218-fc28710792ac",1568938714420,"# FrameDay03_2 SpringMVC \n\n**主要内容：**\n\n* JSP 九大内置对象和四大作用域复习\n* SpringMVC 作用域传值\n* 文件下载\n* 文件上传\n\n\n\n## 一、 JSP 九大内置对象和四大作用域复习\n\n### （一）九大内置对象\n名称 | 类型 | 含义 | 获取方式\n---|---|---|---\nrequest |HttpSevletRequest |封装所有请求信息| 在方法参数\nresponse|HttpServletResponse|封装所有响应信息|在方法参数\nsession |HttpSession |封装所有会话信息|req.getSession()\napplication| ServletContext |所有信息|getServletContext();和 request.getServletContext();\nout |PrintWriter |输出对象 |response.getWriter()\nexception |Exception |异常对象 |\npage| Object |当前页面对象 |\npageContext | PageContext | 作用是获取其他对象 |\nconfig |ServletConfig | 配置信息 | \n\n\n### （二）四大作用域\n\n- page：在当前页面不会重新实例化；\n- request：在一次请求中同一个对象，下次请求重新实例化一个request 对象；\n- session：作用域在一次会话，只要客户端 Cookie 中传递的 Jsessionid 不变，Session 不会重新实例化(不超过默认时间)；\n- application：只有在 tomcat 启动项目时才实例化，关闭 tomcat 时销毁application，所以在整个应用程序内都是单例的。\n\n**实际有效时间:**\n- 浏览器关闭则 Cookie 失效；\n- 默认时间，在时间范围内无任何交互；可以在 tomcat 的web.xml 中配置\n```xml\n<session-config>\n    <session-timeout>30</session-timeout>\n</session-config>\n```\n\n## 二、SpringMVC 作用域传值的几种方式\n\n### （一）使用原生 Servlet\n\n- 首先在 HanlderMethod 参数中添加作用域对象（即在 Controller 中配置）\n```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"demo10\")\n\tpublic String demo10(HttpServletRequest abc, HttpSession sessionParam){\n\t\t// request 作用域\n\t\tabc.setAttribute(\"req\", \"req 的值\");\n\n\t\t// session 作用域\n\t\tHttpSession session = abc.getSession();\n\t\tsession.setAttribute(\"session\", \"session 的值\");\n\n\t\t// 下面这句话是结合方法中的 HTTPSession 参数进行使用，两个加起来等效于上面两句\n\t\tsessionParam.setAttribute(\"sessionParam\",\"sessionParam的值\");\n\n\t\t// appliaction 作用域\n\t\tServletContext application =  abc.getServletContext();\n\t\tapplication.setAttribute(\"application\",\"application的值\");\n\t\treturn  \"/index.jsp\";\n\t}\n}\n```\n执行之后的对应参数值在 index.jsp 中取出进行显示：\n```jsp\n<body>\n    request:${requestScope.req} <br/>\n    session:${sessionScope.session} <br/>\n    sessionParam:${sessionScope.sessionParam}<br/>\n    application:${applicationScope.application}<br/>\n</body>\n```\n通过访问：`http://localhost:8080/SpringMVC03_war_exploded/demo10` 得到结果为：\n```java\nrequest:req 的值 \nsession:session 的值 \nsessionParam:sessionParam的值\napplication:application的值\n```\n\n### （二）使用 Map 集合\n\n- 本质上是把 map 中内容放在 request 作用域中；\n- spring 会对 map 集合通过 BindingAwareModelMap 类进行实例化；\n```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"demo11\")\n    public String demo11(Map<String,Object> map){\n        System.out.println(map.getClass());\n        map.put(\"map\",\"map 的值\");\n        return \"/index.jsp\";\n    }\n}\n```\n执行之后的对应参数值在 index.jsp 中取出进行显示：\n```jsp\n<body>\n   map:${requestScope.map}\n</body>\n```\n通过访问：`http://localhost:8080/SpringMVC03_war_exploded/demo10`得到结果为：`map:map 的值`\n\n\n### （三）使用 SpringMVC 中 Model 接口 \n\n该接口的本质把内容最终放入到 request 作用域中。\n```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"demo12\")\n    public String demo12(Model model){\n        model.addAttribute(\"model\", \"model 的值\");\n        return \"/index.jsp\";\n    }\n}\n```\n执行之后的对应参数值在 index.jsp 中取出进行显示：\n```jsp\n<body>\n   <!--下面两种方式都是可以的-->\n   model:${requestScope.model}\n   model:${model}\n</body>\n```\n\n\n### （四）使用 SpringMVC 中 ModelAndView 类\n\n```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"demo13\")\n\tpublic ModelAndView demo13(){\n        //参数表示跳转视图\n        ModelAndView mav = new ModelAndView(\"/index.jsp\");\n        mav.addObject(\"mav\", \"mav 的值\");\n        return mav;\n    }\n}\n```\n执行之后的对应参数值在 index.jsp 中取出进行显示：\n```jsp\n<body>\n   mav:${requestScope.mav}\n</body>\n```\n\n## 三、文件下载\n\n**注意在 springmvc.xml 中配置放行 files 文件夹**\n\n- 访问资源时，响应头如果没有设置 Content-Disposition 的值，浏览器默认按照 inline 值进行处理；\n  - inline 作用是能显示就显示,不能显示就下载；\n- 只需要修改相应头中 `Context-Disposition= ”attachment;filename=文件名”`；\n  - 其中 `attachment` 表示下载，以附件形式下载；\n  - `filename=值` 中的值就是下载时显示的下载文件名；\n\n**实现步骤**\n\n- 导入 apache 的两个 jar\n  - commons-fileupload.jar\n  - commons-io.jar\n- 在 jsp 中添加超链接，设置要下载文件，实现点击超链接就下载对应的文件；\n  - 在 springmvc.xml 中放行静态资源 files 文件夹，文件夹中放置的是要下载的文件；\n```xml\n<a  href=\"download?fileName=a.rar\">下载</a>\n```\n\n- 编写对应的控制器方法\n```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"download\")\n\tpublic void download(String fileName,HttpServletResponse res,HttpServletRequest req) throws IOException{\n\t\t// 设置响应流中文件进行下载\n\t\tres.setHeader(\"Content-Disposition\",\"attachment;filename=\"+fileName);\n\t\t// 把二进制流放入到响应体中\n\t\tServletOutputStream os = res.getOutputStream();\n\t\tString path = req.getServletContext().getRealPath(\"files\");\n\t\tSystem.out.println(path);\n\t\tFile file = new File(path, fileName);\n\t\t// 把这个文件直接读成字节数组\n\t\tbyte[] bytes = FileUtils.readFileToByteArray(file);\n\t\tos.write(bytes);\n\t\tos.flush();\n\t\tos.close();\n\t}\n}\n```\n\n\n## 四、文件上传\n\n- 首先是基于 apache 的 commons-fileupload.jar 完成文件上传；\n- 使用 MultipartResovler，是SpringMVC中负责文件上传的组件，\n  - 作用: 把客户端上传的文件流转换成 MutipartFile 封装类；\n  - 然后可以通过 MutipartFile 封装类获取到文件流；\n- 表单数据类型分类：\n在<form>的 enctype 属性是控制表单类型的；\n  * 默认值为 `application/x-www-form-urlencoded`，表示普通表单数据(即少量文字信息)；\n  * `text/plain` 表示大文字量时使用的类型.例如邮件,论文\n  * `multipart/form-data` 表单中包含二进制文件内容；\n\n**实现步骤:**\n- 首先导入 springmvc 包和 apache 文件上传 commons-fileupload 和commons-io 两个 jar；\n\n- 然后编写 JSP 页面\n```jsp\n<body>\n<form action=\"upload\" enctype=\"multipart/form-data\" method=\"post\">\n\t姓名:<input type=\"text\" name=\"name\"/><br/>\n\t文件:<input type=\"file\" name=\"file\"/><br/>\n\t<input type=\"submit\" value=\"提交\"/>\n</form>\n</body>\n```\n\n- 然后配置 springmvc.xml；主要是增加了 MultipartResovler 解析器和异常解析器\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n\txmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/mvc\n        http://www.springframework.org/schema/mvc/spring-mvc.xsd\">\n    <!-- 扫描注解 -->\n\t<context:component-scan base-package=\"com.bjsxt.controller\"></context:component-scan>\n\t<!-- 注解驱动 -->\n\t<!-- org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping -->\n\t<!-- org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter -->\n\t<mvc:annotation-driven></mvc:annotation-driven>\n\t<!-- 静态资源 -->\n\t<mvc:resources location=\"/js/\" mapping=\"/js/**\"></mvc:resources>\n\t<mvc:resources location=\"/css/\" mapping=\"/css/**\"></mvc:resources>\n\t<mvc:resources location=\"/images/\" mapping=\"/images/**\"></mvc:resources>\n\t<mvc:resources location=\"/files/\" mapping=\"/files/**\"></mvc:resources>\n\n\n\t<!-- MultipartResovler解析器 -->\n\t<bean id=\"multipartResolver\" class=\"org.springframework.web.multipart.commons.CommonsMultipartResolver\">\n\t\t<property name=\"maxUploadSize\" value=\"50\"></property>\n\t</bean>\n\t<!-- 异常解析器 -->\n\t<bean id=\"exceptionResolver\" class=\"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver\">\n\t\t<property name=\"exceptionMappings\">\n\t\t\t<props>\n\t\t\t\t<prop key=\"org.springframework.web.multipart.MaxUploadSizeExceededException\">/error.jsp</prop>\n\t\t\t</props>\n\t\t</property>\n\t</bean>\n</beans>\n```\n\n- 最后编写控制器类\n MultipartFile 对象名必须和<input type=”file”/>的 name 属性值相同\n```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"upload\")\n    public String upload(MultipartFile file,String name)throws IOException{\n        String fileName = file.getOriginalFilename();\n        String suffix = fileName.substring(fileName.lastIndexOf(\".\"));\n        //判断上传文件类型\n        if(suffix.equalsIgnoreCase(\".png\")){\n            String uuid = UUID.randomUUID().toString();\n            FileUtils.copyInputStreamToFile(file.getInputStream(), new File(\"E:/\"+uuid+suffix));\n             return \"/index.jsp\";\n            }else{\n             return \"error.jsp\";\n        }\n    }\n}\n```\n\n\n",[[1568938684174,["GJX@GJXAIOU",[[1,3406,"·"]],[3406,3406],[3407,3407]]],[1568938685441,["GJX@GJXAIOU",[[-1,3406,"·"]],[3407,3407],[3406,3406]]],[1568938686374,["GJX@GJXAIOU",[[1,3406,"``"]],[3406,3406],[3408,3408]]],[1568938688981,["GJX@GJXAIOU",[[1,3407,"\t<mvc:resources location=\"/files/\" mapping=\"/files/**\"></mvc:resources>\n"]],[3407,3407],[3479,3479]]],[1568938691082,["GJX@GJXAIOU",[[-1,3478,"\n"]],[3479,3479],[3478,3478]]],[1568938695435,["GJX@GJXAIOU",[[-1,3407,"\t"]],[3408,3408],[3407,3407]]]],null,"GJX@GJXAIOU"],["c5a96691-6682-4f2a-a1f4-44e7f4733d6c",1572260009972,"# FrameDay03_2 SpringMVC \n\n**主要内容：**\n\n* JSP 九大内置对象和四大作用域复习\n* SpringMVC 作用域传值\n* 文件下载\n* 文件上传\n\n\n\n## 一、 JSP 九大内置对象和四大作用域复习\n\n### （一）九大内置对象\n名称 | 类型 | 含义 | 获取方式\n---|---|---|---\nrequest |HttpSevletRequest |封装所有请求信息| 在方法参数\nresponse|HttpServletResponse|封装所有响应信息|在方法参数\nsession |HttpSession |封装所有会话信息|req.getSession()\napplication| ServletContext |所有信息|getServletContext();和 request.getServletContext();\nout |PrintWriter |输出对象 |response.getWriter()\nexception |Exception |异常对象 |\npage| Object |当前页面对象 |\npageContext | PageContext | 作用是获取其他对象 |\nconfig |ServletConfig | 配置信息 | \n\n\n### （二）四大作用域\n\n- page：在当前页面不会重新实例化；\n- request：在一次请求中同一个对象，下次请求重新实例化一个request 对象；\n- session：作用域在一次会话，只要客户端 Cookie 中传递的 Jsessionid 不变，Session 不会重新实例化(不超过默认时间)；\n- application：只有在 tomcat 启动项目时才实例化，关闭 tomcat 时销毁application，所以在整个应用程序内都是单例的。\n\n**实际有效时间:**\n- 浏览器关闭则 Cookie 失效；\n- 默认时间，在时间范围内无任何交互；可以在 tomcat 的web.xml 中配置\n```xml\n<session-config>\n    <session-timeout>30</session-timeout>\n</session-config>\n```\n\n## 二、SpringMVC 作用域传值的几种方式\n\n### （一）使用原生 Servlet\n\n- 首先在 HanlderMethod 参数中添加作用域对象（即在 Controller 中配置）\n```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"demo10\")\n\tpublic String demo10(HttpServletRequest abc, HttpSession sessionParam){\n\t\t// request 作用域\n\t\tabc.setAttribute(\"req\", \"req 的值\");\n\n\t\t// session 作用域\n\t\tHttpSession session = abc.getSession();\n\t\tsession.setAttribute(\"session\", \"session 的值\");\n\n\t\t// 下面这句话是结合方法中的 HTTPSession 参数进行使用，两个加起来等效于上面两句\n\t\tsessionParam.setAttribute(\"sessionParam\",\"sessionParam的值\");\n\n\t\t// appliaction 作用域\n\t\tServletContext application =  abc.getServletContext();\n\t\tapplication.setAttribute(\"application\",\"application的值\");\n\t\treturn  \"/index.jsp\";\n\t}\n}\n```\n执行之后的对应参数值在 index.jsp 中取出进行显示：\n```jsp\n<body>\n    request:${requestScope.req} <br/>\n    session:${sessionScope.session} <br/>\n    sessionParam:${sessionScope.sessionParam}<br/>\n    application:${applicationScope.application}<br/>\n</body>\n```\n通过访问：`http://localhost:8080/SpringMVC03_war_exploded/demo10` 得到结果为：\n```java\nrequest:req 的值 \nsession:session 的值 \nsessionParam:sessionParam的值\napplication:application的值\n```\n\n### （二）使用 Map 集合\n\n- 本质上是把 map 中内容放在 request 作用域中；\n- spring 会对 map 集合通过 BindingAwareModelMap 类进行实例化；\n```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"demo11\")\n    public String demo11(Map<String,Object> map){\n        System.out.println(map.getClass());\n        map.put(\"map\",\"map 的值\");\n        return \"/index.jsp\";\n    }\n}\n```\n执行之后的对应参数值在 index.jsp 中取出进行显示：\n```jsp\n<body>\n   map:${requestScope.map}\n</body>\n```\n通过访问：`http://localhost:8080/SpringMVC03_war_exploded/demo10`得到结果为：`map:map 的值`\n\n\n### （三）使用 SpringMVC 中 Model 接口 \n\n该接口的本质把内容最终放入到 request 作用域中。\n```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"demo12\")\n    public String demo12(Model model){\n        model.addAttribute(\"model\", \"model 的值\");\n        return \"/index.jsp\";\n    }\n}\n```\n执行之后的对应参数值在 index.jsp 中取出进行显示：\n```jsp\n<body>\n   <!--下面两种方式都是可以的-->\n   model:${requestScope.model}\n   model:${model}\n</body>\n```\n\n\n### （四）使用 SpringMVC 中 ModelAndView 类\n\n```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"demo13\")\n\tpublic ModelAndView demo13(){\n        //参数表示跳转视图\n        ModelAndView mav = new ModelAndView(\"/index.jsp\");\n        mav.addObject(\"mav\", \"mav 的值\");\n        return mav;\n    }\n}\n```\n执行之后的对应参数值在 index.jsp 中取出进行显示：\n```jsp\n<body>\n   mav:${requestScope.mav}\n</body>\n```\n\n## 三、文件下载\n\n**注意在 springmvc.xml 中配置放行 files 文件夹**\n`<mvc:resources location=\"/files/\" mapping=\"/files/**\"></mvc:resources>`\n- 访问资源时，响应头如果没有设置 Content-Disposition 的值，浏览器默认按照 inline 值进行处理；\n  - inline 作用是能显示就显示,不能显示就下载；\n- 只需要修改相应头中 `Context-Disposition= ”attachment;filename=文件名”`；\n  - 其中 `attachment` 表示下载，以附件形式下载；\n  - `filename=值` 中的值就是下载时显示的下载文件名；\n\n**实现步骤**\n\n- 导入 apache 的两个 jar\n  - commons-fileupload.jar\n  - commons-io.jar\n- 在 jsp 中添加超链接，设置要下载文件，实现点击超链接就下载对应的文件；\n  - 在 springmvc.xml 中放行静态资源 files 文件夹，文件夹中放置的是要下载的文件；\n```xml\n<a  href=\"download?fileName=a.rar\">下载</a>\n```\n\n- 编写对应的控制器方法\n```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"download\")\n\tpublic void download(String fileName,HttpServletResponse res,HttpServletRequest req) throws IOException{\n\t\t// 设置响应流中文件进行下载\n\t\tres.setHeader(\"Content-Disposition\",\"attachment;filename=\"+fileName);\n\t\t// 把二进制流放入到响应体中\n\t\tServletOutputStream os = res.getOutputStream();\n\t\tString path = req.getServletContext().getRealPath(\"files\");\n\t\tSystem.out.println(path);\n\t\tFile file = new File(path, fileName);\n\t\t// 把这个文件直接读成字节数组\n\t\tbyte[] bytes = FileUtils.readFileToByteArray(file);\n\t\tos.write(bytes);\n\t\tos.flush();\n\t\tos.close();\n\t}\n}\n```\n\n\n## 四、文件上传\n\n- 首先是基于 apache 的 commons-fileupload.jar 完成文件上传；\n- 使用 MultipartResovler，是SpringMVC中负责文件上传的组件，\n  - 作用: 把客户端上传的文件流转换成 MutipartFile 封装类；\n  - 然后可以通过 MutipartFile 封装类获取到文件流；\n- 表单数据类型分类：\n在<form>的 enctype 属性是控制表单类型的；\n  * 默认值为 `application/x-www-form-urlencoded`，表示普通表单数据(即少量文字信息)；\n  * `text/plain` 表示大文字量时使用的类型.例如邮件,论文\n  * `multipart/form-data` 表单中包含二进制文件内容；\n\n**实现步骤:**\n- 首先导入 springmvc 包和 apache 文件上传 commons-fileupload 和commons-io 两个 jar；\n\n- 然后编写 JSP 页面\n```jsp\n<body>\n<form action=\"upload\" enctype=\"multipart/form-data\" method=\"post\">\n\t姓名:<input type=\"text\" name=\"name\"/><br/>\n\t文件:<input type=\"file\" name=\"file\"/><br/>\n\t<input type=\"submit\" value=\"提交\"/>\n</form>\n</body>\n```\n\n- 然后配置 springmvc.xml；主要是增加了 MultipartResovler 解析器和异常解析器\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n\txmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/mvc\n        http://www.springframework.org/schema/mvc/spring-mvc.xsd\">\n    <!-- 扫描注解 -->\n\t<context:component-scan base-package=\"com.bjsxt.controller\"></context:component-scan>\n\t<!-- 注解驱动 -->\n\t<!-- org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping -->\n\t<!-- org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter -->\n\t<mvc:annotation-driven></mvc:annotation-driven>\n\t<!-- 静态资源 -->\n\t<mvc:resources location=\"/js/\" mapping=\"/js/**\"></mvc:resources>\n\t<mvc:resources location=\"/css/\" mapping=\"/css/**\"></mvc:resources>\n\t<mvc:resources location=\"/images/\" mapping=\"/images/**\"></mvc:resources>\n\t<mvc:resources location=\"/files/\" mapping=\"/files/**\"></mvc:resources>\n\n\n\t<!-- MultipartResovler解析器 -->\n\t<bean id=\"multipartResolver\" class=\"org.springframework.web.multipart.commons.CommonsMultipartResolver\">\n\t\t<property name=\"maxUploadSize\" value=\"50\"></property>\n\t</bean>\n\t<!-- 异常解析器 -->\n\t<bean id=\"exceptionResolver\" class=\"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver\">\n\t\t<property name=\"exceptionMappings\">\n\t\t\t<props>\n\t\t\t\t<prop key=\"org.springframework.web.multipart.MaxUploadSizeExceededException\">/error.jsp</prop>\n\t\t\t</props>\n\t\t</property>\n\t</bean>\n</beans>\n```\n\n- 最后编写控制器类\n MultipartFile 对象名必须和<input type=”file”/>的 name 属性值相同\n```java\n@Controller\npublic class DemoController {\n\t@RequestMapping(\"upload\")\n    public String upload(MultipartFile file,String name)throws IOException{\n        String fileName = file.getOriginalFilename();\n        String suffix = fileName.substring(fileName.lastIndexOf(\".\"));\n        //判断上传文件类型\n        if(suffix.equalsIgnoreCase(\".png\")){\n            String uuid = UUID.randomUUID().toString();\n            FileUtils.copyInputStreamToFile(file.getInputStream(), new File(\"E:/\"+uuid+suffix));\n             return \"/index.jsp\";\n            }else{\n             return \"error.jsp\";\n        }\n    }\n}\n```\n\n\n",[[1572259959296,["GJX@GJXAIOU",[[-1,5999,"bjsxt"],[1,6004,"gjxaiou"]],[5999,6004],[5999,6006]]]],null,"GJX@GJXAIOU"]]}