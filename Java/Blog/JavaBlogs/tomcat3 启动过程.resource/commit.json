{"compress":true,"commitItems":[["35abad01-44f2-4723-ac94-491c3fe40016",1565830014509,"# **从已知startup.bat/sh入手**\n\nwindows上启动是:startup.bat\nlinux/mac上启动是startup.sh\n\n![](https://mmbiz.qpic.cn/mmbiz_png/8sl8s4eiazL6Lc4PzZzCawkRaGI7YqsJcKN1a7TYiabnpP7JRNicSXuyRq0Dqbwo8Hf2zaYuOMXcyzoXadWAIlH1Q/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n## **startup.sh**\n\n重点在于最后一行:\n\n```\n# PRGDIR 是当前tomcat下的bin目录\n```\n\n## catalina.sh\n\n我们通过参数start进行追踪:\n\n![](https://mmbiz.qpic.cn/mmbiz_png/8sl8s4eiazL6Lc4PzZzCawkRaGI7YqsJcAN0gmphhKr6jeHs7IOR1eXSlneia7ZglribdIMaqHlicia874guicNoOZvw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n在这里看到了对start参数进行判断,然后走不同的分支逻辑\n经过一大堆的判断,最后达到可启动的状态时,就开始执行启动的命令:\n\n![](https://mmbiz.qpic.cn/mmbiz_png/8sl8s4eiazL6Lc4PzZzCawkRaGI7YqsJc6IaR4BOILKria1XkBOg1K5JEOBWJ8Ulkmp5d5l63a7To8SMiaWgKIlmg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\nnohup: 是linux 系统中,可以后台运行程序的命令,窗口关掉也会存在\n\nENDORSED_PROP: 可以覆盖部分jvm bootstarp类加载器加载的类\n\norg.apache.catalina.startup.Bootstrap: 最后会执行这个类\n\n## Bootstrap\n\n根据上文,我们可以找到Bootstrap这个类的main函数\n\n![](https://mmbiz.qpic.cn/mmbiz_png/8sl8s4eiazL6Lc4PzZzCawkRaGI7YqsJcJTLom741MFwvYhfZkapd4MgvzPLVadricich6jcMgIm8oJJ1GnVsUh8Q/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n如上图所示,只要执行了以下几步:\n1\\. 初始化bootstrap实例\n2\\. 调用bootstrap的init方法,去初始化类加载器,以及catalina实例\n3\\. 调用bootstrap的start方法,然后通过反射去调用catalina的start 方法\n\ninit():\n\n```\n public void init() throws Exception {\n```\n\nstart():\n\n```\npublic void start()\n```\n\n# 最后说两句\n\n这样就完成了tomcat 从命令行到bootstrap以及catalina的初步初始化.后面还有server,service , Engine , host 等组件的加载",[[1565829989342,["GJX@GJXAIOU",[[-1,76,"![](https://mmbiz.qpic.cn/mmbiz_png/8sl8s4eiazL6Lc4PzZzCawkRaGI7YqsJcKN1a7TYiabnpP7JRNicSXuyRq0Dqbwo8Hf2zaYuOMXcyzoXadWAIlH1Q/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)"]],[76,252],[76,76]]],[1565830016022,["GJX@GJXAIOU",[[1,76,"![1]($resource/1.png)"]],[76,76],[98,98]]],[1565830033251,["GJX@GJXAIOU",[[1,133,"\n"],[1,158,"\nPRGDIR=`dirname \"$PRG\"`\n\nEXECUTABLE=catalina.sh\n\n执行tomcat/bin/catalina.sh start \n$@ 是代表全部的参数,\nexec \"$PRGDIR\"/\"$EXECUTABLE\" start \"$@\""]],[133,158],[293,293]]],[1565830035460,["GJX@GJXAIOU",[[-1,133,"\n"]],[133,133],[132,132]]],[1565830045101,["GJX@GJXAIOU",[[-1,332,"![](https://mmbiz.qpic.cn/mmbiz_png/8sl8s4eiazL6Lc4PzZzCawkRaGI7YqsJcAN0gmphhKr6jeHs7IOR1eXSlneia7ZglribdIMaqHlicia874guicNoOZvw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)"]],[332,511],[332,332]]],[1565830051908,["GJX@GJXAIOU",[[1,332,"![2]($resource/2.png)"]],[332,332],[354,354]]],[1565830056116,["GJX@GJXAIOU",[[-1,419,"![](https://mmbiz.qpic.cn/mmbiz_png/8sl8s4eiazL6Lc4PzZzCawkRaGI7YqsJc6IaR4BOILKria1XkBOg1K5JEOBWJ8Ulkmp5d5l63a7To8SMiaWgKIlmg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)"]],[419,595],[419,419]]],[1565830061401,["GJX@GJXAIOU",[[1,419,"![3]($resource/3.png)"]],[419,419],[441,441]]],[1565830067396,["GJX@GJXAIOU",[[-1,621,"![](https://mmbiz.qpic.cn/mmbiz_png/8sl8s4eiazL6Lc4PzZzCawkRaGI7YqsJcJTLom741MFwvYhfZkapd4MgvzPLVadricich6jcMgIm8oJJ1GnVsUh8Q/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)"]],[621,797],[621,621]]],[1565830073425,["GJX@GJXAIOU",[[1,621,"![4]($resource/4.png)"]],[621,621],[643,643]]],[1565830089373,["GJX@GJXAIOU",[[-1,790," "],[1,828,"\n        // 初始化类加载器\n        initClassLoaders();\n        // 设置当前线程的类加载器为catalinaLoader\n        // 当前线程:初始化Catalina的线程,初始化Servlet容器的这个线程\n        Thread.currentThread().setContextClassLoader(catalinaLoader);\n\n        SecurityClassLoad.securityClassLoad(catalinaLoader);\n\n        // Load our startup class and call its process() method\n        if (log.isDebugEnabled()){\n            log.debug(\"Loading startup class\");\n        }\n        // 寻找到 Catalina 类,然后用反射进行实例化\n        Class<?> startupClass = catalinaLoader.loadClass(\"org.apache.catalina.startup.Catalina\");\n        Object startupInstance = startupClass.getConstructor().newInstance();\n\n        // Set the shared extensions class loader\n        if (log.isDebugEnabled()){\n            log.debug(\"Setting startup class properties\");\n        }\n        // 获取到Catalina.setParentClassLoader的方法\n        String methodName = \"setParentClassLoader\";\n        Class<?> paramTypes[] = new Class[1];\n        paramTypes[0] = Class.forName(\"java.lang.ClassLoader\");\n        Object paramValues[] = new Object[1];\n        paramValues[0] = sharedLoader;\n        // 通过反射设置 Catalina实例使用的父类加载器为sharedLoader\n        Method method =\n            startupInstance.getClass().getMethod(methodName, paramTypes);\n        method.invoke(startupInstance, paramValues);\n\n        catalinaDaemon = startupInstance;\n\n    }"]],[790,828],[2164,2164]]],[1565830100253,["GJX@GJXAIOU",[[1,2184,"\n"],[1,2203,"\n        throws Exception {\n        if( catalinaDaemon==null ) init();\n        // 使用反射去调用Catalina 的 start 方法\n        Method method = catalinaDaemon.getClass().getMethod(\"start\", (Class [] )null);\n        method.invoke(catalinaDaemon, (Object [])null);\n\n    }"]],[2184,2203],[2462,2462]]],[1565830102125,["GJX@GJXAIOU",[[-1,2184,"\n"]],[2184,2184],[2183,2183]]]],null,"GJX@GJXAIOU"]]}