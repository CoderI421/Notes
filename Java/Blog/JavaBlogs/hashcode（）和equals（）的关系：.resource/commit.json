{"compress":true,"commitItems":[["0471148a-8165-4921-acc5-7c6ec29bc6a7",1563517182561,"首先如果hashcode相等的话，这两个类也是不一定相等的，如果是反过来的话（通常情况下，如果两个对象的内容相同，两个对象的hashcode也是相同的）\n\n## hashcode（）和equals（）的关系：\n\n**（1）如果不创建“类对应的散列表的话”（就是当我们不会把一个类放到在HashSet, Hashtable, HashMap这种底层实现是以hashcode来去定位存储位置的话），如果不是这种情况下的话，此时这个类的hashcode（）和equals（）是没有一点关系的**\n\n**（2）如果恰好用到了上面所说的“创建了类对应的散列表的话”，那么也就是你把这个类作为key来去存储其他的value的话，这种情况下是可以进行比较的**\n\n*   如果两个对象相等，那么它们的hashCode()值一定相同。这里的相等是指，通过equals()比较两个对象时返回true。\n*   如果两个对象hashCode()相等，它们并不一定相等。\n    因为在散列表中，hashCode()相等，即两个键值对的哈希值相等。然而哈希值相等，并不一定能得出键值对相等。补充说一句：“两个不同的键值对，哈希值相等”，这就是哈希冲突。**（若要判断两个对象是否相等，除了要覆盖equals()之外，也要覆盖hashCode()函数。否则，equals()无效。 ）**\n\n```\npublic class test {\n\n    public static void main(String[] args) {\n        // 新建Person对象，\n        Person p1 = new Person(\"eee\", 100);\n        Person p2 = new Person(\"eee\", 100);\n        Person p3 = new Person(\"aaa\", 200);\n\n        // 新建HashSet对象\n        HashMap map = new HashMap();\n        map.put(p1,\"woshi---p1\");\n        map.put(p2,\"woshi---p2\");\n        map.put(p3,\"我是P3\");\n\n        System.out.println(map.get(p1)+\"---------------------\");\n        System.out.println(map.get(p2)+\"---------------------\");\n        System.out.println(map.get(p3));\n\n        // 比较p1 和 p2， 并打印它们的hashCode()\n        System.out.printf(\"p1.equals(p2) : %s; p1(%d) p2(%d)\\n\", p1.equals(p2), p1.hashCode(), p2.hashCode());\n\n    }\n\n    /**\n     * @desc Person类。\n     */\n    private static class Person {\n        int age;\n        String name;\n\n        public Person(String name, int age) {\n            this.name = name;\n            this.age = age;\n        }\n\n        public String toString() {\n            return \"(\"+name + \", \" +age+\")\";\n        }\n    }\n}\n\n```\n\n**输出结果：**\nwoshi—p1---------------------\nwoshi—p2---------------------\n我是P3\np1.equals(p2) : false; p1(821270929) p2(1160460865)",[[1563517146203,["GJX@GJXAIOU",[[-1,79,"#"]],[80,80],[79,79]]],[1563517151067,["GJX@GJXAIOU",[[-1,78,"# hashcode（）和equals（）的关系："]],[78,103],[78,78]]],[1563517152411,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1563517152499,["GJX@GJXAIOU",[[1,0,"\n"]],[1,1],[2,2]]],[1563517153483,["GJX@GJXAIOU",[[1,1,"# hashcode（）和equals（）的关系："]],[1,1],[26,26]]],[1563517156739,["GJX@GJXAIOU",[[-1,0,"\n"]],[0,0],[0,0]]],[1563517158781,["GJX@GJXAIOU",[[1,26,"\n"]],[25,25],[26,26]]],[1563517161283,["GJX@GJXAIOU",[[-1,106,"\n"]],[105,105],[104,104]]]],null,"GJX@GJXAIOU"]]}