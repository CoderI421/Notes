{"compress":true,"commitItems":[["0fbfe781-1a97-4bf3-91f7-a0071d10be92",1565482376588,"# Java 重写(Override)与重载(Overload)\n\n* * *\n\n## 重写(Override)\n\n重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。**即外壳不变，核心重写！**\n\n重写的好处在于子类可以根据需要，定义特定于自己的行为。 也就是说子类能够根据需要实现父类的方法。\n\n重写方法不能抛出新的检查异常或者比被重写方法申明更加宽泛的异常。例如： 父类的一个方法申明了一个检查异常 IOException，但是在重写这个方法的时候不能抛出 Exception 异常，因为 Exception 是 IOException 的父类，只能抛出 IOException 的子类异常。\n\n在面向对象原则里，重写意味着可以重写任何现有方法。实例如下：\n\n## TestDog.java 文件代码：\n\nclass  Animal{  public  void  move(){  System.out.println(\"动物可以移动\"); }  }  class  Dog  extends  Animal{  public  void  move(){  System.out.println(\"狗可以跑和走\"); }  }  public  class  TestDog{  public  static  void  main(String  args[]){  Animal  a = new  Animal(); // Animal 对象  Animal  b = new  Dog(); // Dog 对象  a.move();// 执行 Animal 类的方法  b.move();//执行 Dog 类的方法  }  }\n\n以上实例编译运行结果如下：\n\n动物可以移动  狗可以跑和走\n\n在上面的例子中可以看到，尽管b属于Animal类型，但是它运行的是Dog类的move方法。\n\n这是由于在编译阶段，只是检查参数的引用类型。\n\n然而在运行时，Java虚拟机(JVM)指定对象的类型并且运行该对象的方法。\n\n因此在上面的例子中，之所以能编译成功，是因为Animal类中存在move方法，然而运行时，运行的是特定对象的方法。\n\n思考以下例子：\n\n## TestDog.java 文件代码：\n\nclass  Animal{  public  void  move(){  System.out.println(\"动物可以移动\"); }  }  class  Dog  extends  Animal{  public  void  move(){  System.out.println(\"狗可以跑和走\"); }  public  void  bark(){  System.out.println(\"狗可以吠叫\"); }  }  public  class  TestDog{  public  static  void  main(String  args[]){  Animal  a = new  Animal(); // Animal 对象  Animal  b = new  Dog(); // Dog 对象  a.move();// 执行 Animal 类的方法  b.move();//执行 Dog 类的方法  b.bark(); }  }\n\n以上实例编译运行结果如下：\n\nTestDog.java:30: cannot find symbol\nsymbol : method bark() location:  class  Animal b.bark();  ^\n\n该程序将抛出一个编译错误，因为b的引用类型Animal没有bark方法。\n\n* * *\n\n## 方法的重写规则\n\n*   参数列表必须完全与被重写方法的相同。\n\n*   返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）。\n\n*   访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。\n\n*   父类的成员方法只能被它的子类重写。\n\n*   声明为 final 的方法不能被重写。\n\n*   声明为 static 的方法不能被重写，但是能够被再次声明。\n\n*   子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。\n\n*   子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。\n\n*   重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。\n\n*   构造方法不能被重写。\n\n*   如果不能继承一个方法，则不能重写这个方法。\n\n* * *\n\n## Super 关键字的使用\n\n当需要在子类中调用父类的被重写方法时，要使用 super 关键字。\n\n## TestDog.java 文件代码：\n\nclass  Animal{  public  void  move(){  System.out.println(\"动物可以移动\"); }  }  class  Dog  extends  Animal{  public  void  move(){  super.move(); // 应用super类的方法  System.out.println(\"狗可以跑和走\"); }  }  public  class  TestDog{  public  static  void  main(String  args[]){  Animal  b = new  Dog(); // Dog 对象  b.move(); //执行 Dog类的方法  }  }\n\n以上实例编译运行结果如下：\n\n动物可以移动  狗可以跑和走\n\n## 重载(Overload)\n\n重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。\n\n每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。\n\n最常用的地方就是构造器的重载。\n\n**重载规则:**\n\n*   被重载的方法必须改变参数列表(参数个数或类型不一样)；\n*   被重载的方法可以改变返回类型；\n*   被重载的方法可以改变访问修饰符；\n*   被重载的方法可以声明新的或更广的检查异常；\n*   方法能够在同一个类中或者在一个子类中被重载。\n*   无法以返回值类型作为重载函数的区分标准。\n\n### 实例\n\n## Overloading.java 文件代码：\n\npublic  class  Overloading  {  public  int  test(){  System.out.println(\"test1\"); return  1; }  public  void  test(int  a){  System.out.println(\"test2\"); }  //以下两个参数类型顺序不同  public  String  test(int  a,String  s){  System.out.println(\"test3\"); return  \"returntest3\"; }  public  String  test(String  s,int  a){  System.out.println(\"test4\"); return  \"returntest4\"; }  public  static  void  main(String[]  args){  Overloading  o = new  Overloading(); System.out.println(o.test()); o.test(1); System.out.println(o.test(1,\"test3\")); System.out.println(o.test(\"test4\",1)); }  }\n\n* * *\n\n## 重写与重载之间的区别\n\n| 区别点 | 重载方法 | 重写方法 |\n| 参数列表 | 必须修改 | 一定不能修改 |\n| 返回类型 | 可以修改 | 一定不能修改 |\n| 异常 | 可以修改 | 可以减少或删除，一定不能抛出新的或者更广的异常 |\n| 访问 | 可以修改 | 一定不能做更严格的限制（可以降低限制） |\n\n* * *\n\n## 总结\n\n方法的重写(Overriding)和重载(Overloading)是java多态性的不同表现，重写是父类与子类之间多态性的一种表现，重载可以理解成多态的具体表现形式。\n\n*   (1)方法重载是一个类中定义了多个方法名相同,而他们的参数的数量不同或数量相同而类型和次序不同,则称为方法的重载(Overloading)。\n*   (2)方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法,就称为重写(Overriding)。\n*   (3)方法重载是一个类的多态性表现,而方法重写是子类与父类的一种多态性表现。\n\n![](https://www.runoob.com/wp-content/uploads/2013/12/overloading-vs-overriding.png)\n\n![](https://www.runoob.com/wp-content/uploads/2013/12/20171102-1.jpg)\n\n[](https://www.runoob.com/java/java-inheritance.html)",[[1565482337655,["GJX@GJXAIOU",[[-1,372,"class  Animal{  public  void  move(){  System.out.println(\"动物可以移动\"); }  }  class  Dog  extends  Animal{  public  void  move(){  System.out.println(\"狗可以跑和走\"); }  }  public  class  TestDog{  public  static  void  main(String  args[]){  Animal  a = new  Animal(); // Animal 对象  Animal  b = new  Dog(); // Dog 对象  a.move();// 执行 Animal 类的方法  b.move();//执行 Dog 类的方法  }  }"]],[372,738],[372,372]]],[1565482338569,["GJX@GJXAIOU",[[1,372,"···"]],[372,372],[375,375]]],[1565482342349,["GJX@GJXAIOU",[[-1,372,"···"]],[375,375],[372,372]]],[1565482343782,["GJX@GJXAIOU",[[1,372,"```"]],[372,372],[375,375]]],[1565482343811,["GJX@GJXAIOU",[[1,375,"language\n```\n"]],[375,375],[375,383]]],[1565482344871,["GJX@GJXAIOU",[[-1,375,"language"],[1,383,"j"]],[375,383],[376,376]]],[1565482345286,["GJX@GJXAIOU",[[1,376,"ava"]],[376,376],[379,379]]],[1565482345382,["GJX@GJXAIOU",[[1,380,"\n"]],[379,379],[380,380]]],[1565482348018,["GJX@GJXAIOU",[[1,380,"class Animal{\n   public void move(){\n      System.out.println(\"动物可以移动\");\n   }\n}\n \nclass Dog extends Animal{\n   public void move(){\n      System.out.println(\"狗可以跑和走\");\n   }\n}\n \npublic class TestDog{\n   public static void main(String args[]){\n      Animal a = new Animal(); // Animal 对象\n      Animal b = new Dog(); // Dog 对象\n \n      a.move();// 执行 Animal 类的方法\n \n      b.move();//执行 Dog 类的方法\n   }\n}"]],[380,380],[775,775]]],[1565482357790,["GJX@GJXAIOU",[[1,805,"\n"]],[805,805],[806,806]]],[1565482359853,["GJX@GJXAIOU",[[-1,796,"\n"]],[796,796],[795,795]]],[1565482362005,["GJX@GJXAIOU",[[-1,781,"\n"]],[781,781],[780,780]]],[1565482364453,["GJX@GJXAIOU",[[-1,858,"\n"]],[858,858],[857,857]]],[1565482366253,["GJX@GJXAIOU",[[-1,881,"\n"]],[881,881],[880,880]]],[1565482368941,["GJX@GJXAIOU",[[-1,919,"\n"]],[919,919],[918,918]]],[1565482380117,["GJX@GJXAIOU",[[-1,987,"## "]],[987,990],[987,987]]],[1565482382941,["GJX@GJXAIOU",[[-1,1007,"class  Animal{  public  void  move(){  System.out.println(\"动物可以移动\"); }  }  class  Dog  extends  Animal{  public  void  move(){  System.out.println(\"狗可以跑和走\"); }  public  void  bark(){  System.out.println(\"狗可以吠叫\"); }  }  public  class  TestDog{  public  static  void  main(String  args[]){  Animal  a = new  Animal(); // Animal 对象  Animal  b = new  Dog(); // Dog 对象  a.move();// 执行 Animal 类的方法  b.move();//执行 Dog 类的方法  b.bark(); }  }\n"]],[1007,1439],[1007,1007]]],[1565482385128,["GJX@GJXAIOU",[[1,1006,"```"]],[1006,1006],[1009,1009]]],[1565482385157,["GJX@GJXAIOU",[[1,1009,"language\n```\n"]],[1009,1009],[1009,1017]]],[1565482386039,["GJX@GJXAIOU",[[-1,1009,"language"],[1,1017,"j"]],[1009,1017],[1010,1010]]],[1565482387222,["GJX@GJXAIOU",[[1,1010,"ava"]],[1010,1010],[1013,1013]]],[1565482387565,["GJX@GJXAIOU",[[1,1014,"\n"]],[1013,1013],[1014,1014]]],[1565482390468,["GJX@GJXAIOU",[[1,1014,"class Animal{\n   public void move(){\n      System.out.println(\"动物可以移动\");\n   }\n}\n \nclass Dog extends Animal{\n   public void move(){\n      System.out.println(\"狗可以跑和走\");\n   }\n   public void bark(){\n      System.out.println(\"狗可以吠叫\");\n   }\n}\n \npublic class TestDog{\n   public static void main(String args[]){\n      Animal a = new Animal(); // Animal 对象\n      Animal b = new Dog(); // Dog 对象\n \n      a.move();// 执行 Animal 类的方法\n      b.move();//执行 Dog 类的方法\n      b.bark();\n   }\n}"]],[1014,1014],[1486,1486]]],[1565482399110,["GJX@GJXAIOU",[[1,1507,"```"]],[1507,1507],[1510,1510]]],[1565482399140,["GJX@GJXAIOU",[[1,1510,"language\n```\n"]],[1510,1510],[1510,1518]]],[1565482400422,["GJX@GJXAIOU",[[-1,1510,"language"],[1,1518,"j"]],[1510,1518],[1511,1511]]],[1565482400823,["GJX@GJXAIOU",[[1,1511,"ava"]],[1511,1511],[1514,1514]]],[1565482406967,["GJX@GJXAIOU",[[1,1515,"\n"]],[1514,1514],[1515,1515]]],[1565482409375,["GJX@GJXAIOU",[[1,1515,"TestDog.java:30: cannot find symbol\nsymbol  : method bark()\nlocation: class Animal\n                b.bark();\n                 ^"]],[1515,1515],[1642,1642]]],[1565482413829,["GJX@GJXAIOU",[[-1,1648,"TestDog.java:30: cannot find symbol\nsymbol : method bark() location:  class  Animal b.bark();  ^\n"]],[1648,1745],[1648,1648]]],[1565482414189,["GJX@GJXAIOU",[[-1,1648,"\n"]],[1648,1648],[1647,1647]]],[1565482428269,["GJX@GJXAIOU",[[-1,2308,"class  Animal{  public  void  move(){  System.out.println(\"动物可以移动\"); }  }  class  Dog  extends  Animal{  public  void  move(){  super.move(); // 应用super类的方法  System.out.println(\"狗可以跑和走\"); }  }  public  class  TestDog{  public  static  void  main(String  args[]){  Animal  b = new  Dog(); // Dog 对象  b.move(); //执行 Dog类的方法  }  }\n"]],[2308,2636],[2308,2308]]],[1565482428829,["GJX@GJXAIOU",[[-1,2308,"\n"]],[2308,2308],[2307,2307]]],[1565482430217,["GJX@GJXAIOU",[[1,2307,"```"]],[2307,2307],[2310,2310]]],[1565482430247,["GJX@GJXAIOU",[[1,2310,"language\n```\n"]],[2310,2310],[2310,2318]]],[1565482431182,["GJX@GJXAIOU",[[-1,2310,"language"],[1,2318,"j"]],[2310,2318],[2311,2311]]],[1565482432075,["GJX@GJXAIOU",[[1,2311,"ava"]],[2311,2311],[2314,2314]]],[1565482432293,["GJX@GJXAIOU",[[1,2315,"\n"]],[2314,2314],[2315,2315]]],[1565482435352,["GJX@GJXAIOU",[[1,2315,"class Animal{\n   public void move(){\n      System.out.println(\"动物可以移动\");\n   }\n}\n \nclass Dog extends Animal{\n   public void move(){\n      super.move(); // 应用super类的方法\n      System.out.println(\"狗可以跑和走\");\n   }\n}\n \npublic class TestDog{\n   public static void main(String args[]){\n \n      Animal b = new Dog(); // Dog 对象\n      b.move(); //执行 Dog类的方法\n \n   }\n}"]],[2315,2315],[2668,2668]]],[1565482440263,["GJX@GJXAIOU",[[1,2697,"\n"]],[2697,2697],[2698,2698]]],[1565482454500,["GJX@GJXAIOU",[[-1,3026,"public  class  Overloading  {  public  int  test(){  System.out.println(\"test1\"); return  1; }  public  void  test(int  a){  System.out.println(\"test2\"); }  //以下两个参数类型顺序不同  public  String  test(int  a,String  s){  System.out.println(\"test3\"); return  \"returntest3\"; }  public  String  test(String  s,int  a){  System.out.println(\"test4\"); return  \"returntest4\"; }  public  static  void  main(String[]  args){  Overloading  o = new  Overloading(); System.out.println(o.test()); o.test(1); System.out.println(o.test(1,\"test3\")); System.out.println(o.test(\"test4\",1)); }  }\n\n"]],[3025,3597],[3025,3025]]],[1565482456872,["GJX@GJXAIOU",[[1,3025,"```"]],[3025,3025],[3028,3028]]],[1565482456902,["GJX@GJXAIOU",[[1,3028,"language\n```\n"]],[3028,3028],[3028,3036]]],[1565482457711,["GJX@GJXAIOU",[[-1,3028,"language"],[1,3036,"j"]],[3028,3036],[3029,3029]]],[1565482458183,["GJX@GJXAIOU",[[1,3029,"ava"]],[3029,3029],[3032,3032]]],[1565482458405,["GJX@GJXAIOU",[[1,3033,"\n"]],[3032,3032],[3033,3033]]],[1565482461774,["GJX@GJXAIOU",[[1,3033,"public class Overloading {\n    public int test(){\n        System.out.println(\"test1\");\n        return 1;\n    }\n \n    public void test(int a){\n        System.out.println(\"test2\");\n    }   \n \n    //以下两个参数类型顺序不同\n    public String test(int a,String s){\n        System.out.println(\"test3\");\n        return \"returntest3\";\n    }   \n \n    public String test(String s,int a){\n        System.out.println(\"test4\");\n        return \"returntest4\";\n    }   \n \n    public static void main(String[] args){\n        Overloading o = new Overloading();\n        System.out.println(o.test());\n        o.test(1);\n        System.out.println(o.test(1,\"test3\"));\n        System.out.println(o.test(\"test4\",1));\n    }\n}"]],[3033,3033],[3723,3723]]],[1565482468750,["GJX@GJXAIOU",[[1,3773,"\n"]],[3772,3772],[3773,3773]]],[1565482474911,["GJX@GJXAIOU",[[1,3773,"|---|---|---|"]],[3773,3773],[3786,3786]]]],null,"GJX@GJXAIOU"]]}