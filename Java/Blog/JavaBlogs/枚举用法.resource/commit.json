{"compress":true,"commitItems":[["0c84910c-262e-4473-b57a-2ca3c2bc05c1",1564810531364,"",[[1564810477788,["GJX@GJXAIOU",[[1,0,"# 枚举用法\n\n\n\n"]],[0,0],[9,9]]],[1564810544360,["GJX@GJXAIOU",[[1,8,"本篇主要是深入对Java中枚举类型进行分析，主要内容如下：\n\n*   [理解枚举类型](https://blog.csdn.net/javazejian/article/details/71333103#%E7%90%86%E8%A7%A3%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B)\n    *   [枚举的定义](https://blog.csdn.net/javazejian/article/details/71333103#%E6%9E%9A%E4%B8%BE%E7%9A%84%E5%AE%9A%E4%B9%89)\n    *   [枚举实现原理](https://blog.csdn.net/javazejian/article/details/71333103#%E6%9E%9A%E4%B8%BE%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86)\n    *   [枚举的常见方法](https://blog.csdn.net/javazejian/article/details/71333103#%E6%9E%9A%E4%B8%BE%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95)\n        *   [Enum抽象类常见方法](https://blog.csdn.net/javazejian/article/details/71333103#enum%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95)\n        *   [编译器生成的Values方法与ValueOf方法](https://blog.csdn.net/javazejian/article/details/71333103#%E7%BC%96%E8%AF%91%E5%99%A8%E7%94%9F%E6%88%90%E7%9A%84values%E6%96%B9%E6%B3%95%E4%B8%8Evalueof%E6%96%B9%E6%B3%95)\n*   [枚举与Class对象](https://blog.csdn.net/javazejian/article/details/71333103#%E6%9E%9A%E4%B8%BE%E4%B8%8Eclass%E5%AF%B9%E8%B1%A1)\n*   [枚举的进阶用法](https://blog.csdn.net/javazejian/article/details/71333103#%E6%9E%9A%E4%B8%BE%E7%9A%84%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95)\n    *   [向enum类添加方法与自定义构造函数](https://blog.csdn.net/javazejian/article/details/71333103#%E5%90%91enum%E7%B1%BB%E6%B7%BB%E5%8A%A0%E6%96%B9%E6%B3%95%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0)\n    *   [关于覆盖enum类方法](https://blog.csdn.net/javazejian/article/details/71333103#%E5%85%B3%E4%BA%8E%E8%A6%86%E7%9B%96enum%E7%B1%BB%E6%96%B9%E6%B3%95)\n    *   [enum类中定义抽象方法](https://blog.csdn.net/javazejian/article/details/71333103#enum%E7%B1%BB%E4%B8%AD%E5%AE%9A%E4%B9%89%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95)\n    *   [enum类与接口](https://blog.csdn.net/javazejian/article/details/71333103#enum%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3)\n*   [枚举与switch](https://blog.csdn.net/javazejian/article/details/71333103#%E6%9E%9A%E4%B8%BE%E4%B8%8Eswitch)\n*   [枚举与单例模式](https://blog.csdn.net/javazejian/article/details/71333103#%E6%9E%9A%E4%B8%BE%E4%B8%8E%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F)\n*   [EnumMap](https://blog.csdn.net/javazejian/article/details/71333103#enummap)\n    *   [EnumMap基本用法](https://blog.csdn.net/javazejian/article/details/71333103#enummap%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95)\n    *   [EnumMap实现原理剖析](https://blog.csdn.net/javazejian/article/details/71333103#enummap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90)\n*   [EnumSet](https://blog.csdn.net/javazejian/article/details/71333103#enumset)\n    *   [EnumSet用法](https://blog.csdn.net/javazejian/article/details/71333103#enumset%E7%94%A8%E6%B3%95)\n    *   [EnumSet实现原理剖析](https://blog.csdn.net/javazejian/article/details/71333103#enumset%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90)\n        *   [理解位向量](https://blog.csdn.net/javazejian/article/details/71333103#%E7%90%86%E8%A7%A3%E4%BD%8D%E5%90%91%E9%87%8F)\n        *   [EnumSet原理](https://blog.csdn.net/javazejian/article/details/71333103#enumset%E5%8E%9F%E7%90%86)\n\n# 理解枚举类型\n\n枚举类型是Java 5中新增特性的一部分，它是一种特殊的数据类型，之所以特殊是因为它既是一种类(class)类型却又比类类型多了些特殊的约束，但是这些约束的存在也造就了枚举类型的简洁性、安全性以及便捷性。下面先来看看什么是枚举？如何定义枚举？\n\n## 枚举的定义\n\n回忆一下下面的程序，这是在没有枚举类型时定义常量常见的方式\n\n```\n/**\n * Created by zejian on 2017/5/7.\n * Blog : http://blog.csdn.net/javazejian [原文地址,请尊重原创]\n * 使用普通方式定义日期常量\n */\npublic class DayDemo {\n\n    public static final int MONDAY =1;\n\n    public static final int TUESDAY=2;\n\n    public static final int WEDNESDAY=3;\n\n    public static final int THURSDAY=4;\n\n    public static final int FRIDAY=5;\n\n    public static final int SATURDAY=6;\n\n    public static final int SUNDAY=7;\n\n}\n```\n\n上述的常量定义常量的方式称为int枚举模式，这样的定义方式并没有什么错，但它存在许多不足，如在类型安全和使用方便性上并没有多少好处，如果存在定义int值相同的变量，混淆的几率还是很大的，编译器也不会提出任何警告，因此这种方式在枚举出现后并不提倡，现在我们利用枚举类型来重新定义上述的常量，同时也感受一把枚举定义的方式，如下定义周一到周日的常量\n\n```\n//枚举类型，使用关键字enum\nenum Day {\n    MONDAY, TUESDAY, WEDNESDAY,\n    THURSDAY, FRIDAY, SATURDAY, SUNDAY\n}\n```\n\n相当简洁，在定义枚举类型时我们使用的关键字是enum，与class关键字类似，只不过前者是定义枚举类型，后者是定义类类型。枚举类型Day中分别定义了从周一到周日的值，这里要注意，值一般是大写的字母，多个值之间以逗号分隔。同时我们应该知道的是枚举类型可以像类(class)类型一样，定义为一个单独的文件，当然也可以定义在其他类内部，更重要的是枚举常量在类型安全性和便捷性都很有保证，如果出现类型问题编译器也会提示我们改进，但务必记住枚举表示的类型其取值是必须有限的，也就是说每个值都是可以枚举出来的，比如上述描述的一周共有七天。那么该如何使用呢？如下：\n\n```\n/**\n * Created by zejian on 2017/5/7.\n * Blog : http://blog.csdn.net/javazejian [原文地址,请尊重原创]\n */\npublic class EnumDemo {\n\n    public static void main(String[] args){\n        //直接引用\n        Day day =Day.MONDAY;\n    }\n\n}\n//定义枚举类型\nenum Day {\n    MONDAY, TUESDAY, WEDNESDAY,\n    THURSDAY, FRIDAY, SATURDAY, SUNDAY\n}\n```\n\n就像上述代码那样，直接引用枚举的值即可，这便是枚举类型的最简单模型。\n\n## 枚举实现原理\n\n我们大概了解了枚举类型的定义与简单使用后，现在有必要来了解一下枚举类型的基本实现原理。实际上在使用关键字enum创建枚举类型并编译后，编译器会为我们生成一个相关的类，这个类继承了Java API中的java.lang.Enum类，也就是说通过关键字enum创建枚举类型在编译后事实上也是一个类类型而且该类继承自java.lang.Enum类。下面我们编译前面定义的EnumDemo.java并查看生成的class文件来验证这个结论：\n\n```\n//查看目录下的java文件\nzejian@zejiandeMBP enumdemo$ ls\nEnumDemo.java\n//利用javac命令编译EnumDemo.java\nzejian@zejiandeMBP enumdemo$ javac EnumDemo.java \n//查看生成的class文件，注意有Day.class和EnumDemo.class 两个\nzejian@zejiandeMBP enumdemo$ ls\nDay.class  EnumDemo.class  EnumDemo.java\n```\n\n利用javac编译前面定义的EnumDemo.java文件后分别生成了Day.class和EnumDemo.class文件，而Day.class就是枚举类型，这也就验证前面所说的使用关键字enum定义枚举类型并编译后，编译器会自动帮助我们生成一个与枚举相关的类。我们再来看看反编译Day.class文件：\n\n```java\n//反编译Day.class\nfinal class Day extends Enum\n{\n    //编译器为我们添加的静态的values()方法\n    public static Day[] values()\n    {\n        return (Day[])$VALUES.clone();\n    }\n    //编译器为我们添加的静态的valueOf()方法，注意间接调用了Enum也类的valueOf方法\n    public static Day valueOf(String s)\n    {\n        return (Day)Enum.valueOf(com/zejian/enumdemo/Day, s);\n    }\n    //私有构造函数\n    private Day(String s, int i)\n    {\n        super(s, i);\n    }\n     //前面定义的7种枚举实例\n    public static final Day MONDAY;\n    public static final Day TUESDAY;\n    public static final Day WEDNESDAY;\n    public static final Day THURSDAY;\n    public static final Day FRIDAY;\n    public static final Day SATURDAY;\n    public static final Day SUNDAY;\n    private static final Day $VALUES[];\n\n    static \n    {    \n        //实例化枚举实例\n        MONDAY = new Day(\"MONDAY\", 0);\n        TUESDAY = new Day(\"TUESDAY\", 1);\n        WEDNESDAY = new Day(\"WEDNESDAY\", 2);\n        THURSDAY = new Day(\"THURSDAY\", 3);\n        FRIDAY = new Day(\"FRIDAY\", 4);\n        SATURDAY = new Day(\"SATURDAY\", 5);\n        SUNDAY = new Day(\"SUNDAY\", 6);\n        $VALUES = (new Day[] {\n            MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY\n        });\n    }\n}12345678910111213141516171819202122232425262728293031323334353637383940414243\n```\n\n从反编译的代码可以看出编译器确实帮助我们生成了一个Day类(注意该类是final类型的，将无法被继承)而且该类继承自java.lang.Enum类，该类是一个抽象类(稍后我们会分析该类中的主要方法)，除此之外，编译器还帮助我们生成了7个Day类型的实例对象分别对应枚举中定义的7个日期，这也充分说明了我们前面使用关键字enum定义的Day类型中的每种日期枚举常量也是实实在在的Day实例对象，只不过代表的内容不一样而已。注意编译器还为我们生成了两个静态方法，分别是values()和 valueOf()，稍后会分析它们的用法，到此我们也就明白了，使用关键字enum定义的枚举类型，在编译期后，也将转换成为一个实实在在的类，而在该类中，会存在每个在枚举类型中定义好变量的对应实例对象，如上述的MONDAY枚举类型对应`public static final Day MONDAY;`，同时编译器会为该类创建两个方法，分别是values()和valueOf()。ok~，到此相信我们对枚举的实现原理也比较清晰，下面我们深入了解一下java.lang.Enum类以及values()和valueOf()的用途。\n\n## 枚举的常见方法\n\n### Enum抽象类常见方法\n\nEnum是所有 Java 语言枚举类型的公共基本类（注意Enum是抽象类），以下是它的常见方法：\n\n| 返回类型 | 方法名称 | 方法说明 |\n| :-: | :-: | --- |\n| `int` | `compareTo(E o)` | 比较此枚举与指定对象的顺序 |\n| `boolean` | `equals(Object other)` | 当指定对象等于此枚举常量时，返回 true。 |\n| `Class<?>` | `getDeclaringClass()` | 返回与此枚举常量的枚举类型相对应的 Class 对象 |\n| `String` | `name()` | 返回此枚举常量的名称，在其枚举声明中对其进行声明 |\n| `int` | `ordinal()` | 返回枚举常量的序数（它在枚举声明中的位置，其中初始常量序数为零） |\n| `String` | `toString()` | 返回枚举常量的名称，它包含在声明中 |\n| `static<T extends Enum<T>> T` | `static valueOf(Class<T> enumType, String name)` | `返回带指定名称的指定枚举类型的枚举常量。` |\n\n这里主要说明一下`ordinal()`方法，该方法获取的是枚举变量在枚举类中声明的顺序，下标从0开始，如日期中的MONDAY在第一个位置，那么MONDAY的ordinal值就是0，如果MONDAY的声明位置发生变化，那么ordinal方法获取到的值也随之变化，注意在大多数情况下我们都不应该首先使用该方法，毕竟它总是变幻莫测的。`compareTo(E o)`方法则是比较枚举的大小，注意其内部实现是根据每个枚举的ordinal值大小进行比较的。`name()`方法与`toString()`几乎是等同的，都是输出变量的字符串形式。至于`valueOf(Class<T> enumType, String name)`方法则是根据枚举类的Class对象和枚举名称获取枚举常量，注意该方法是静态的，后面在枚举单例时，我们还会详细分析该方法，下面的代码演示了上述方法：\n\n```java\npackage com.zejian.enumdemo;\n\n/**\n * Created by zejian on 2017/5/7.\n * Blog : http://blog.csdn.net/javazejian [原文地址,请尊重原创]\n */\npublic class EnumDemo {\n\n    public static void main(String[] args){\n\n        //创建枚举数组\n        Day[] days=new Day[]{Day.MONDAY, Day.TUESDAY, Day.WEDNESDAY,\n                Day.THURSDAY, Day.FRIDAY, Day.SATURDAY, Day.SUNDAY};\n\n        for (int i = 0; i <days.length ; i++) {\n            System.out.println(\"day[\"+i+\"].ordinal():\"+days[i].ordinal());\n        }\n\n        System.out.println(\"-------------------------------------\");\n        //通过compareTo方法比较,实际上其内部是通过ordinal()值比较的\n        System.out.println(\"days[0].compareTo(days[1]):\"+days[0].compareTo(days[1]));\n        System.out.println(\"days[0].compareTo(days[1]):\"+days[0].compareTo(days[2]));\n\n        //获取该枚举对象的Class对象引用,当然也可以通过getClass方法\n        Class<?> clazz = days[0].getDeclaringClass();\n        System.out.println(\"clazz:\"+clazz);\n\n        System.out.println(\"-------------------------------------\");\n\n        //name()\n        System.out.println(\"days[0].name():\"+days[0].name());\n        System.out.println(\"days[1].name():\"+days[1].name());\n        System.out.println(\"days[2].name():\"+days[2].name());\n        System.out.println(\"days[3].name():\"+days[3].name());\n\n        System.out.println(\"-------------------------------------\");\n\n        System.out.println(\"days[0].toString():\"+days[0].toString());\n        System.out.println(\"days[1].toString():\"+days[1].toString());\n        System.out.println(\"days[2].toString():\"+days[2].toString());\n        System.out.println(\"days[3].toString():\"+days[3].toString());\n\n        System.out.println(\"-------------------------------------\");\n\n        Day d=Enum.valueOf(Day.class,days[0].name());\n        Day d2=Day.valueOf(Day.class,days[0].name());\n        System.out.println(\"d:\"+d);\n        System.out.println(\"d2:\"+d2);\n    }\n /**\n 执行结果:\n   day[0].ordinal():0\n   day[1].ordinal():1\n   day[2].ordinal():2\n   day[3].ordinal():3\n   day[4].ordinal():4\n   day[5].ordinal():5\n   day[6].ordinal():6\n   -------------------------------------\n   days[0].compareTo(days[1]):-1\n   days[0].compareTo(days[1]):-2\n   clazz:class com.zejian.enumdemo.Day\n   -------------------------------------\n   days[0].name():MONDAY\n   days[1].name():TUESDAY\n   days[2].name():WEDNESDAY\n   days[3].name():THURSDAY\n   -------------------------------------\n   days[0].toString():MONDAY\n   days[1].toString():TUESDAY\n   days[2].toString():WEDNESDAY\n   days[3].toString():THURSDAY\n   -------------------------------------\n   d:MONDAY\n   d2:MONDAY\n   */\n\n}\nenum Day {\n    MONDAY, TUESDAY, WEDNESDAY,\n    THURSDAY, FRIDAY, SATURDAY, SUNDAY\n}\n1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283\n```\n\n到此对于抽象类Enum类的基本内容就介绍完了，这里提醒大家一点，Enum类内部会有一个构造函数，该构造函数只能有编译器调用，我们是无法手动操作的，不妨看看Enum类的主要源码：\n\n```java\n//实现了Comparable\npublic abstract class Enum<E extends Enum<E>>\n        implements Comparable<E>, Serializable {\n\n    private final String name; //枚举字符串名称\n\n    public final String name() {\n        return name;\n    }\n\n    private final int ordinal;//枚举顺序值\n\n    public final int ordinal() {\n        return ordinal;\n    }\n\n    //枚举的构造方法，只能由编译器调用\n    protected Enum(String name, int ordinal) {\n        this.name = name;\n        this.ordinal = ordinal;\n    }\n\n    public String toString() {\n        return name;\n    }\n\n    public final boolean equals(Object other) {\n        return this==other;\n    }\n\n    //比较的是ordinal值\n    public final int compareTo(E o) {\n        Enum<?> other = (Enum<?>)o;\n        Enum<E> self = this;\n        if (self.getClass() != other.getClass() && // optimization\n            self.getDeclaringClass() != other.getDeclaringClass())\n            throw new ClassCastException();\n        return self.ordinal - other.ordinal;//根据ordinal值比较大小\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public final Class<E> getDeclaringClass() {\n        //获取class对象引用，getClass()是Object的方法\n        Class<?> clazz = getClass();\n        //获取父类Class对象引用\n        Class<?> zuper = clazz.getSuperclass();\n        return (zuper == Enum.class) ? (Class<E>)clazz : (Class<E>)zuper;\n    }\n\n    public static <T extends Enum<T>> T valueOf(Class<T> enumType,\n                                                String name) {\n        //enumType.enumConstantDirectory()获取到的是一个map集合，key值就是name值，value则是枚举变量值   \n        //enumConstantDirectory是class对象内部的方法，根据class对象获取一个map集合的值       \n        T result = enumType.enumConstantDirectory().get(name);\n        if (result != null)\n            return result;\n        if (name == null)\n            throw new NullPointerException(\"Name is null\");\n        throw new IllegalArgumentException(\n            \"No enum constant \" + enumType.getCanonicalName() + \".\" + name);\n    }\n\n    //.....省略其他没用的方法\n}1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465\n```\n\n通过Enum源码，可以知道，Enum实现了Comparable接口，这也是可以使用compareTo比较的原因，当然Enum构造函数也是存在的，该函数只能由编译器调用，毕竟我们只能使用enum关键字定义枚举，其他事情就放心交给编译器吧。\n\n```\n//由编译器调用\nprotected Enum(String name, int ordinal) {\n        this.name = name;\n        this.ordinal = ordinal;\n    }\n\n```\n\n### 编译器生成的Values方法与ValueOf方法\n\nvalues()方法和valueOf(String name)方法是编译器生成的static方法，因此从前面的分析中，在Enum类中并没出现values()方法，但valueOf()方法还是有出现的，只不过编译器生成的valueOf()方法需传递一个name参数，而Enum自带的静态方法valueOf()则需要传递两个方法，从前面反编译后的代码可以看出，编译器生成的valueOf方法最终还是调用了Enum类的valueOf方法，下面通过代码来演示这两个方法的作用：\n\n```java\nDay[] days2 = Day.values();\nSystem.out.println(\"day2:\"+Arrays.toString(days2));\nDay day = Day.valueOf(\"MONDAY\");\nSystem.out.println(\"day:\"+day);\n\n/**\n 输出结果:\n day2:[MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY]\n day:MONDAY\n */12345678910\n```\n\n从结果可知道，values()方法的作用就是获取枚举类中的所有变量，并作为数组返回，而valueOf(String name)方法与Enum类中的valueOf方法的作用类似根据名称获取枚举变量，只不过编译器生成的valueOf方法更简洁些只需传递一个参数。这里我们还必须注意到，由于values()方法是由编译器插入到枚举类中的static方法，所以如果我们将枚举实例向上转型为Enum，那么values()方法将无法被调用，因为Enum类中并没有values()方法，valueOf()方法也是同样的道理，注意是一个参数的。\n\n```java\n //正常使用\nDay[] ds=Day.values();\n//向上转型Enum\nEnum e = Day.MONDAY;\n//无法调用,没有此方法\n//e.values();123456\n```\n\n# 枚举与Class对象\n\n上述我们提到当枚举实例向上转型为Enum类型后，values()方法将会失效，也就无法一次性获取所有枚举实例变量，但是由于Class对象的存在，即使不使用values()方法，还是有可能一次获取到所有枚举实例变量的，在Class对象中存在如下方法：\n\n| 返回类型 | 方法名称 | 方法说明 |\n| :-: | :-: | --- |\n| `T[]` | `getEnumConstants()` | 返回该枚举类型的所有元素，如果Class对象不是枚举类型，则返回null。 |\n| `boolean` | `isEnum()` | 当且仅当该类声明为源代码中的枚举时返回 true |\n\n因此通过getEnumConstants()方法，同样可以轻而易举地获取所有枚举实例变量下面通过代码来演示这个功能：\n\n```java\n//正常使用\nDay[] ds=Day.values();\n//向上转型Enum\nEnum e = Day.MONDAY;\n//无法调用,没有此方法\n//e.values();\n//获取class对象引用\nClass<?> clasz = e.getDeclaringClass();\nif(clasz.isEnum()) {\n    Day[] dsz = (Day[]) clasz.getEnumConstants();\n    System.out.println(\"dsz:\"+Arrays.toString(dsz));\n}\n\n/**\n   输出结果:\n   dsz:[MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY]\n */1234567891011121314151617\n```\n\n正如上述代码所展示，通过Enum的class对象的getEnumConstants方法，我们仍能一次性获取所有的枚举实例常量。\n\n# 枚举的进阶用法\n\n在前面的分析中，我们都是基于简单枚举类型的定义，也就是在定义枚举时只定义了枚举实例类型，并没定义方法或者成员变量，实际上使用关键字enum定义的枚举类，除了不能使用继承(因为编译器会自动为我们继承Enum抽象类而Java只支持单继承，因此枚举类是无法手动实现继承的)，可以把enum类当成常规类，也就是说我们可以向enum类中添加方法和变量，甚至是mian方法，下面就来感受一把。\n\n## 向enum类添加方法与自定义构造函数\n\n重新定义一个日期枚举类，带有desc成员变量描述该日期的对于中文描述，同时定义一个getDesc方法，返回中文描述内容，自定义私有构造函数，在声明枚举实例时传入对应的中文描述，代码如下：\n\n```\npackage com.zejian.enumdemo;\n\n/**\n * Created by zejian on 2017/5/8.\n * Blog : http://blog.csdn.net/javazejian [原文地址,请尊重原创]\n */\npublic enum Day2 {\n    MONDAY(\"星期一\"),\n    TUESDAY(\"星期二\"),\n    WEDNESDAY(\"星期三\"),\n    THURSDAY(\"星期四\"),\n    FRIDAY(\"星期五\"),\n    SATURDAY(\"星期六\"),\n    SUNDAY(\"星期日\");//记住要用分号结束\n\n    private String desc;//中文描述\n\n    /**\n     * 私有构造,防止被外部调用\n     * @param desc\n     */\n    private Day2(String desc){\n        this.desc=desc;\n    }\n\n    /**\n     * 定义方法,返回描述,跟常规类的定义没区别\n     * @return\n     */\n    public String getDesc(){\n        return desc;\n    }\n\n    public static void main(String[] args){\n        for (Day2 day:Day2.values()) {\n            System.out.println(\"name:\"+day.name()+\n                    \",desc:\"+day.getDesc());\n        }\n    }\n\n    /**\n     输出结果:\n     name:MONDAY,desc:星期一\n     name:TUESDAY,desc:星期二\n     name:WEDNESDAY,desc:星期三\n     name:THURSDAY,desc:星期四\n     name:FRIDAY,desc:星期五\n     name:SATURDAY,desc:星期六\n     name:SUNDAY,desc:星期日\n     */\n}\n```\n\n从上述代码可知，在enum类中确实可以像定义常规类一样声明变量或者成员方法。但是我们必须注意到，如果打算在enum类中定义方法，务必在声明完枚举实例后使用分号分开，倘若在枚举实例前定义任何方法，编译器都将会报错，无法编译通过，同时即使自定义了构造函数且enum的定义结束，我们也永远无法手动调用构造函数创建枚举实例，毕竟这事只能由编译器执行。\n\n## 关于覆盖enum类方法\n\n既然enum类跟常规类的定义没什么区别（实际上enum还是有些约束的），那么覆盖父类的方法也不会是什么难说，可惜的是父类Enum中的定义的方法只有toString方法没有使用final修饰，因此只能覆盖toString方法，如下通过覆盖toString省去了getDesc方法：\n\n```\npackage com.zejian.enumdemo;\n\n/**\n * Created by zejian on 2017/5/8.\n * Blog : http://blog.csdn.net/javazejian [原文地址,请尊重原创]\n */\npublic enum Day2 {\n    MONDAY(\"星期一\"),\n    TUESDAY(\"星期二\"),\n    WEDNESDAY(\"星期三\"),\n    THURSDAY(\"星期四\"),\n    FRIDAY(\"星期五\"),\n    SATURDAY(\"星期六\"),\n    SUNDAY(\"星期日\");//记住要用分号结束\n\n    private String desc;//中文描述\n\n    /**\n     * 私有构造,防止被外部调用\n     * @param desc\n     */\n    private Day2(String desc){\n        this.desc=desc;\n    }\n\n    /**\n     * 覆盖\n     * @return\n     */\n    @Override\n    public String toString() {\n        return desc;\n    }\n\n    public static void main(String[] args){\n        for (Day2 day:Day2.values()) {\n            System.out.println(\"name:\"+day.name()+\n                    \",desc:\"+day.toString());\n        }\n    }\n\n    /**\n     输出结果:\n     name:MONDAY,desc:星期一\n     name:TUESDAY,desc:星期二\n     name:WEDNESDAY,desc:星期三\n     name:THURSDAY,desc:星期四\n     name:FRIDAY,desc:星期五\n     name:SATURDAY,desc:星期六\n     name:SUNDAY,desc:星期日\n     */\n}\n```\n\n## enum类中定义抽象方法\n\n与常规抽象类一样，enum类允许我们为其定义抽象方法，然后使每个枚举实例都实现该方法，以便产生不同的行为方式，注意abstract关键字对于枚举类来说并不是必须的如下：\n\n```java\npackage com.zejian.enumdemo;\n\n/**\n * Created by zejian on 2017/5/9.\n * Blog : http://blog.csdn.net/javazejian [原文地址,请尊重原创]\n */\npublic enum EnumDemo3 {\n\n    FIRST{\n        @Override\n        public String getInfo() {\n            return \"FIRST TIME\";\n        }\n    },\n    SECOND{\n        @Override\n        public String getInfo() {\n            return \"SECOND TIME\";\n        }\n    }\n\n    ;\n\n    /**\n     * 定义抽象方法\n     * @return\n     */\n    public abstract String getInfo();\n\n    //测试\n    public static void main(String[] args){\n        System.out.println(\"F:\"+EnumDemo3.FIRST.getInfo());\n        System.out.println(\"S:\"+EnumDemo3.SECOND.getInfo());\n        /**\n         输出结果:\n         F:FIRST TIME\n         S:SECOND TIME\n         */\n    }\n}12345678910111213141516171819202122232425262728293031323334353637383940\n```\n\n通过这种方式就可以轻而易举地定义每个枚举实例的不同行为方式。我们可能注意到，enum类的实例似乎表现出了多态的特性，可惜的是枚举类型的实例终究不能作为类型传递使用，就像下面的使用方式，编译器是不可能答应的：\n\n```\n//无法通过编译,毕竟EnumDemo3.FIRST是个实例对象\n public void text(EnumDemo3.FIRST instance){ }\n```\n\n在枚举实例常量中定义抽象方法\n\n## enum类与接口\n\n由于Java单继承的原因，enum类并不能再继承其它类，但并不妨碍它实现接口，因此enum类同样是可以实现多接口的，如下：\n\n```java\npackage com.zejian.enumdemo;\n\n/**\n * Created by zejian on 2017/5/8.\n * Blog : http://blog.csdn.net/javazejian [原文地址,请尊重原创]\n */\n\ninterface food{\n    void eat();\n}\n\ninterface sport{\n    void run();\n}\n\npublic enum EnumDemo2 implements food ,sport{\n    FOOD,\n    SPORT,\n    ; //分号分隔\n\n    @Override\n    public void eat() {\n        System.out.println(\"eat.....\");\n    }\n\n    @Override\n    public void run() {\n        System.out.println(\"run.....\");\n    }\n}123456789101112131415161718192021222324252627282930\n```\n\n有时候，我们可能需要对一组数据进行分类，比如进行食物菜单分类而且希望这些菜单都属于food类型，appetizer(开胃菜)、mainCourse(主菜)、dessert(点心)、Coffee等，每种分类下有多种具体的菜式或食品，此时可以利用接口来组织，如下(代码引用自Thinking in Java)：\n\n```java\npublic interface Food {\n  enum Appetizer implements Food {\n    SALAD, SOUP, SPRING_ROLLS;\n  }\n  enum MainCourse implements Food {\n    LASAGNE, BURRITO, PAD_THAI,\n    LENTILS, HUMMOUS, VINDALOO;\n  }\n  enum Dessert implements Food {\n    TIRAMISU, GELATO, BLACK_FOREST_CAKE,\n    FRUIT, CREME_CARAMEL;\n  }\n  enum Coffee implements Food {\n    BLACK_COFFEE, DECAF_COFFEE, ESPRESSO,\n    LATTE, CAPPUCCINO, TEA, HERB_TEA;\n  }\n}\n\npublic class TypeOfFood {\n  public static void main(String[] args) {\n    Food food = Appetizer.SALAD;\n    food = MainCourse.LASAGNE;\n    food = Dessert.GELATO;\n    food = Coffee.CAPPUCCINO;\n  }\n} 1234567891011121314151617181920212223242526\n```\n\n通过这种方式可以很方便组织上述的情景，同时确保每种具体类型的食物也属于Food，现在我们利用一个枚举嵌套枚举的方式，把前面定义的菜谱存放到一个Meal菜单中，通过这种方式就可以统一管理菜单的数据了。\n\n```java\npublic enum Meal{\n  APPETIZER(Food.Appetizer.class),\n  MAINCOURSE(Food.MainCourse.class),\n  DESSERT(Food.Dessert.class),\n  COFFEE(Food.Coffee.class);\n  private Food[] values;\n  private Meal(Class<? extends Food> kind) {\n    //通过class对象获取枚举实例\n    values = kind.getEnumConstants();\n  }\n  public interface Food {\n    enum Appetizer implements Food {\n      SALAD, SOUP, SPRING_ROLLS;\n    }\n    enum MainCourse implements Food {\n      LASAGNE, BURRITO, PAD_THAI,\n      LENTILS, HUMMOUS, VINDALOO;\n    }\n    enum Dessert implements Food {\n      TIRAMISU, GELATO, BLACK_FOREST_CAKE,\n      FRUIT, CREME_CARAMEL;\n    }\n    enum Coffee implements Food {\n      BLACK_COFFEE, DECAF_COFFEE, ESPRESSO,\n      LATTE, CAPPUCCINO, TEA, HERB_TEA;\n    }\n  }\n} 12345678910111213141516171819202122232425262728\n```\n\n# 枚举与switch\n\n关于枚举与switch是个比较简单的话题，使用switch进行条件判断时，条件参数一般只能是整型，字符型。而枚举型确实也被switch所支持，在java 1.7后switch也对字符串进行了支持。这里我们简单看一下switch与枚举类型的使用：\n\n```\n\n/**\n * Created by zejian on 2017/5/9.\n * Blog : http://blog.csdn.net/javazejian [原文地址,请尊重原创]\n */\n\nenum Color {GREEN,RED,BLUE}\n\npublic class EnumDemo4 {\n\n    public static void printName(Color color){\n        switch (color){\n            case BLUE: //无需使用Color进行引用\n                System.out.println(\"蓝色\");\n                break;\n            case RED:\n                System.out.println(\"红色\");\n                break;\n            case GREEN:\n                System.out.println(\"绿色\");\n                break;\n        }\n    }\n\n    public static void main(String[] args){\n        printName(Color.BLUE);\n        printName(Color.RED);\n        printName(Color.GREEN);\n\n        //蓝色\n        //红色\n        //绿色\n    }\n}\n```\n\n需要注意的是使用在于switch条件进行结合使用时，无需使用Color引用。\n\n# 枚举与单例模式\n\n单例模式可以说是最常使用的设计模式了，它的作用是确保某个类只有一个实例，自行实例化并向整个系统提供这个实例。在实际应用中，线程池、缓存、日志对象、对话框对象常被设计成单例，总之，选择单例模式就是为了避免不一致状态，下面我们将会简单说明单例模式的几种主要编写方式，从而对比出使用枚举实现单例模式的优点。首先看看饿汉式的单例模式：\n\n```\n/**\n * Created by wuzejian on 2017/5/9.\n * 饿汉式（基于classloder机制避免了多线程的同步问题）\n */\npublic class SingletonHungry {\n\n    private static SingletonHungry instance = new SingletonHungry();\n\n    private SingletonHungry() {\n    }\n\n    public static SingletonHungry getInstance() {\n        return instance;\n    }\n}\n```\n\n显然这种写法比较简单，但问题是无法做到延迟创建对象，事实上如果该单例类涉及资源较多，创建比较耗时间时，我们更希望它可以尽可能地延迟加载，从而减小初始化的负载，于是便有了如下的懒汉式单例：\n\n```\n/**\n * Created by wuzejian on 2017/5/9..\n * 懒汉式单例模式（适合多线程安全）\n */\npublic class SingletonLazy {\n\n    private static volatile SingletonLazy instance;\n\n    private SingletonLazy() {\n    }\n\n    public static synchronized SingletonLazy getInstance() {\n        if (instance == null) {\n            instance = new SingletonLazy();\n        }\n        return instance;\n    }\n}\n```\n\n这种写法能够在多线程中很好的工作避免同步问题，同时也具备lazy loading机制，遗憾的是，由于synchronized的存在，效率很低，在单线程的情景下，完全可以去掉synchronized，为了兼顾效率与性能问题，改进后代码如下：\n\n```\npublic class Singleton {\n    private static volatile Singleton singleton = null;\n\n    private Singleton(){}\n\n    public static Singleton getSingleton(){\n        if(singleton == null){\n            synchronized (Singleton.class){\n                if(singleton == null){\n                    singleton = new Singleton();\n                }\n            }\n        }\n        return singleton;\n    }    \n}\n```\n\n这种编写方式被称为“双重检查锁”，主要在getSingleton()方法中，进行两次null检查。这样可以极大提升并发度，进而提升性能。毕竟在单例中new的情况非常少，绝大多数都是可以并行的读操作，因此在加锁前多进行一次null检查就可以减少绝大多数的加锁操作，也就提高了执行效率。但是必须注意的是volatile关键字，该关键字有两层语义。第一层语义是可见性，可见性是指在一个线程中对该变量的修改会马上由工作内存（Work Memory）写回主内存（Main Memory），所以其它线程会马上读取到已修改的值，关于工作内存和主内存可简单理解为高速缓存（直接与CPU打交道）和主存（日常所说的内存条），注意工作内存是线程独享的，主存是线程共享的。volatile的第二层语义是禁止指令重排序优化，我们写的代码（特别是多线程代码），由于编译器优化，在实际执行的时候可能与我们编写的顺序不同。编译器只保证程序执行结果与源代码相同，却不保证实际指令的顺序与源代码相同，这在单线程并没什么问题，然而一旦引入多线程环境，这种乱序就可能导致严重问题。volatile关键字就可以从语义上解决这个问题，值得关注的是volatile的禁止指令重排序优化功能在Java 1.5后才得以实现，因此1.5前的版本仍然是不安全的，即使使用了volatile关键字。或许我们可以利用静态内部类来实现更安全的机制，静态内部类单例模式如下：\n\n```\n/**\n * Created by wuzejian on 2017/5/9.\n * 静态内部类\n */\npublic class SingletonInner {\n    private static class Holder {\n        private static SingletonInner singleton = new SingletonInner();\n    }\n\n    private SingletonInner(){}\n\n    public static SingletonInner getSingleton(){\n        return Holder.singleton;\n    }\n}\n```\n\n正如上述代码所展示的，我们把Singleton实例放到一个静态内部类中，这样可以避免了静态实例在Singleton类的加载阶段（类加载过程的其中一个阶段的，此时只创建了Class对象，关于Class对象可以看博主另外一篇博文，[ 深入理解Java类型信息(Class对象)与反射机制](http://blog.csdn.net/javazejian/article/details/70768369)）就创建对象，毕竟静态变量初始化是在SingletonInner类初始化时触发的，并且由于静态内部类只会被加载一次，所以这种写法也是线程安全的。从上述4种单例模式的写法中，似乎也解决了效率与懒加载的问题，但是它们都有两个共同的缺点：\n\n*   序列化可能会破坏单例模式，比较每次反序列化一个序列化的对象实例时都会创建一个新的实例，解决方案如下：\n\n    ```java\n    //测试例子(四种写解决方式雷同)\n    public class Singleton implements java.io.Serializable {     \n       public static Singleton INSTANCE = new Singleton();     \n\n       protected Singleton() {     \n       }  \n\n       //反序列时直接返回当前INSTANCE\n       private Object readResolve() {     \n                return INSTANCE;     \n          }    \n    }   123456789101112\n    ```\n\n*   使用反射强行调用私有构造器，解决方式可以修改构造器，让它在创建第二个实例的时候抛异常，如下：\n\n    ```\n    public static Singleton INSTANCE = new Singleton();     \n    private static volatile  boolean  flag = true;\n    private Singleton(){\n        if(flag){\n        flag = false;   \n        }else{\n            throw new RuntimeException(\"The instance  already exists ！\");\n        }\n    }\n    ```\n\n如上所述，问题确实也得到了解决，但问题是我们为此付出了不少努力，即添加了不少代码，还应该注意到如果单例类维持了其他对象的状态时还需要使他们成为transient的对象，这种就更复杂了，那有没有更简单更高效的呢？当然是有的，那就是枚举单例了，先来看看如何实现：\n\n```\n/**\n * Created by wuzejian on 2017/5/9.\n * 枚举单利\n */\npublic enum  SingletonEnum {\n    INSTANCE;\n    private String name;\n    public String getName(){\n        return name;\n    }\n    public void setName(String name){\n        this.name = name;\n    }\n}\n```\n\n代码相当简洁，我们也可以像常规类一样编写enum类，为其添加变量和方法，访问方式也更简单，使用`SingletonEnum.INSTANCE`进行访问，这样也就避免调用getInstance方法，更重要的是使用枚举单例的写法，我们完全不用考虑序列化和反射的问题。枚举序列化是由jvm保证的，每一个枚举类型和定义的枚举变量在JVM中都是唯一的，在枚举类型的序列化和反序列化上，Java做了特殊的规定：在序列化时Java仅仅是将枚举对象的name属性输出到结果中，反序列化的时候则是通过java.lang.Enum的valueOf方法来根据名字查找枚举对象。同时，编译器是不允许任何对这种序列化机制的定制的并禁用了writeObject、readObject、readObjectNoData、writeReplace和readResolve等方法，从而保证了枚举实例的唯一性，这里我们不妨再次看看Enum类的valueOf方法：\n\n```\npublic static <T extends Enum<T>> T valueOf(Class<T> enumType,\n                                              String name) {\n      T result = enumType.enumConstantDirectory().get(name);\n      if (result != null)\n          return result;\n      if (name == null)\n          throw new NullPointerException(\"Name is null\");\n      throw new IllegalArgumentException(\n          \"No enum constant \" + enumType.getCanonicalName() + \".\" + name);\n  }\n```\n\n实际上通过调用enumType(Class对象的引用)的enumConstantDirectory方法获取到的是一个Map集合，在该集合中存放了以枚举name为key和以枚举实例变量为value的Key&Value数据，因此通过name的值就可以获取到枚举实例，看看enumConstantDirectory方法源码：\n\n```java\nMap<String, T> enumConstantDirectory() {\n        if (enumConstantDirectory == null) {\n            //getEnumConstantsShared最终通过反射调用枚举类的values方法\n            T[] universe = getEnumConstantsShared();\n            if (universe == null)\n                throw new IllegalArgumentException(\n                    getName() + \" is not an enum type\");\n            Map<String, T> m = new HashMap<>(2 * universe.length);\n            //map存放了当前enum类的所有枚举实例变量，以name为key值\n            for (T constant : universe)\n                m.put(((Enum<?>)constant).name(), constant);\n            enumConstantDirectory = m;\n        }\n        return enumConstantDirectory;\n    }\n    private volatile transient Map<String, T> enumConstantDirectory = null;12345678910111213141516\n```\n\n到这里我们也就可以看出枚举序列化确实不会重新创建新实例，jvm保证了每个枚举实例变量的唯一性。再来看看反射到底能不能创建枚举，下面试图通过反射获取构造器并创建枚举\n\n```java\npublic static void main(String[] args) throws IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException {\n  //获取枚举类的构造函数(前面的源码已分析过)\n   Constructor<SingletonEnum> constructor=SingletonEnum.class.getDeclaredConstructor(String.class,int.class);\n   constructor.setAccessible(true);\n   //创建枚举\n   SingletonEnum singleton=constructor.newInstance(\"otherInstance\",9);\n  }1234567\n```\n\n执行报错\n\n```java\nException in thread \"main\" java.lang.IllegalArgumentException: Cannot reflectively create enum objects\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:417)\n    at zejian.SingletonEnum.main(SingletonEnum.java:38)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)12345678\n```\n\n显然告诉我们不能使用反射创建枚举类，这是为什么呢？不妨看看newInstance方法源码：\n\n```java\n public T newInstance(Object ... initargs)\n        throws InstantiationException, IllegalAccessException,\n               IllegalArgumentException, InvocationTargetException\n    {\n        if (!override) {\n            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n                Class<?> caller = Reflection.getCallerClass();\n                checkAccess(caller, clazz, null, modifiers);\n            }\n        }\n        //这里判断Modifier.ENUM是不是枚举修饰符，如果是就抛异常\n        if ((clazz.getModifiers() & Modifier.ENUM) != 0)\n            throw new IllegalArgumentException(\"Cannot reflectively create enum objects\");\n        ConstructorAccessor ca = constructorAccessor;   // read volatile\n        if (ca == null) {\n            ca = acquireConstructorAccessor();\n        }\n        @SuppressWarnings(\"unchecked\")\n        T inst = (T) ca.newInstance(initargs);\n        return inst;\n    }123456789101112131415161718192021\n```\n\n源码很了然，确实无法使用反射创建枚举实例，也就是说明了创建枚举实例只有编译器能够做到而已。显然枚举单例模式确实是很不错的选择，因此我们推荐使用它。但是这总不是万能的，对于android平台这个可能未必是最好的选择，在android开发中，内存优化是个大块头，而使用枚举时占用的内存常常是静态变量的两倍还多，因此android官方在内存优化方面给出的建议是尽量避免在android中使用enum。但是不管如何，关于单例，我们总是应该记住：线程安全，延迟加载，序列化与反序列化安全，反射安全是很重重要的。\n\n# EnumMap\n\n## EnumMap基本用法\n\n先思考这样一个问题，现在我们有一堆size大小相同而颜色不同的数据，需要统计出每种颜色的数量是多少以便将数据录入仓库，定义如下枚举用于表示颜色Color:\n\n```java\nenum Color {\n    GREEN,RED,BLUE,YELLOW\n}123\n```\n\n我们有如下解决方案，使用Map集合来统计，key值作为颜色名称，value代表衣服数量，如下：\n\n```java\npackage com.zejian.enumdemo;\n\nimport java.util.*;\n\n/**\n * Created by zejian on 2017/5/10.\n * Blog : http://blog.csdn.net/javazejian [原文地址,请尊重原创]\n */\npublic class EnumMapDemo {\n    public static void main(String[] args){\n        List<Clothes> list = new ArrayList<>();\n        list.add(new Clothes(\"C001\",Color.BLUE));\n        list.add(new Clothes(\"C002\",Color.YELLOW));\n        list.add(new Clothes(\"C003\",Color.RED));\n        list.add(new Clothes(\"C004\",Color.GREEN));\n        list.add(new Clothes(\"C005\",Color.BLUE));\n        list.add(new Clothes(\"C006\",Color.BLUE));\n        list.add(new Clothes(\"C007\",Color.RED));\n        list.add(new Clothes(\"C008\",Color.YELLOW));\n        list.add(new Clothes(\"C009\",Color.YELLOW));\n        list.add(new Clothes(\"C010\",Color.GREEN));\n        //方案1:使用HashMap\n        Map<String,Integer> map = new HashMap<>();\n        for (Clothes clothes:list){\n           String colorName=clothes.getColor().name();\n           Integer count = map.get(colorName);\n            if(count!=null){\n                map.put(colorName,count+1);\n            }else {\n                map.put(colorName,1);\n            }\n        }\n\n        System.out.println(map.toString());\n\n        System.out.println(\"---------------\");\n\n        //方案2:使用EnumMap\n        Map<Color,Integer> enumMap=new EnumMap<>(Color.class);\n\n        for (Clothes clothes:list){\n            Color color=clothes.getColor();\n            Integer count = enumMap.get(color);\n            if(count!=null){\n                enumMap.put(color,count+1);\n            }else {\n                enumMap.put(color,1);\n            }\n        }\n\n        System.out.println(enumMap.toString());\n    }\n\n    /**\n     输出结果:\n     {RED=2, BLUE=3, YELLOW=3, GREEN=2}\n     ---------------\n     {GREEN=2, RED=2, BLUE=3, YELLOW=3}\n     */\n}123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960\n```\n\n代码比较简单，我们使用两种解决方案，一种是HashMap，一种EnumMap，虽然都统计出了正确的结果，但是EnumMap作为枚举的专属的集合，我们没有理由再去使用HashMap，毕竟EnumMap要求其Key必须为Enum类型，因而使用Color枚举实例作为key是最恰当不过了，也避免了获取name的步骤，更重要的是EnumMap效率更高，因为其内部是通过数组实现的（稍后分析），注意EnumMap的key值不能为null，虽说是枚举专属集合，但其操作与一般的Map差不多，概括性来说EnumMap是专门为枚举类型量身定做的Map实现，虽然使用其它的Map（如HashMap）也能完成相同的功能，但是使用EnumMap会更加高效，它只能接收同一枚举类型的实例作为键值且不能为null，由于枚举类型实例的数量相对固定并且有限，所以EnumMap使用数组来存放与枚举类型对应的值，毕竟数组是一段连续的内存空间，根据程序局部性原理，效率会相当高。下面我们来进一步了解EnumMap的用法，先看构造函数：\n\n```java\n//创建一个具有指定键类型的空枚举映射。\nEnumMap(Class<K> keyType) \n//创建一个其键类型与指定枚举映射相同的枚举映射，最初包含相同的映射关系（如果有的话）。     \nEnumMap(EnumMap<K,? extends V> m) \n//创建一个枚举映射，从指定映射对其初始化。\nEnumMap(Map<K,? extends V> m)       123456\n```\n\n与HashMap不同，它需要传递一个类型信息，即Class对象，通过这个参数EnumMap就可以根据类型信息初始化其内部数据结构，另外两只是初始化时传入一个Map集合，代码演示如下：\n\n```\n//使用第一种构造\nMap<Color,Integer> enumMap=new EnumMap<>(Color.class);\n//使用第二种构造\nMap<Color,Integer> enumMap2=new EnumMap<>(enumMap);\n//使用第三种构造\nMap<Color,Integer> hashMap = new HashMap<>();\nhashMap.put(Color.GREEN, 2);\nhashMap.put(Color.BLUE, 3);\nMap<Color, Integer> enumMap = new EnumMap<>(hashMap);\n```\n\n至于EnumMap的方法，跟普通的map几乎没有区别，注意与HashMap的主要不同在于构造方法需要传递类型参数和EnumMap保证Key顺序与枚举中的顺序一致，但请记住Key不能为null。\n\n## EnumMap实现原理剖析\n\nEnumMap的源码有700多行，这里我们主要分析其内部存储结构，添加查找的实现，了解这几点，对应EnumMap内部实现原理也就比较清晰了，先看数据结构和构造函数\n\n```\npublic class EnumMap<K extends Enum<K>, V> extends AbstractMap<K, V>\n    implements java.io.Serializable, Cloneable\n{\n    //Class对象引用\n    private final Class<K> keyType;\n\n    //存储Key值的数组\n    private transient K[] keyUniverse;\n\n    //存储Value值的数组\n    private transient Object[] vals;\n\n    //map的size\n    private transient int size = 0;\n\n    //空map\n    private static final Enum<?>[] ZERO_LENGTH_ENUM_ARRAY = new Enum<?>[0];\n\n    //构造函数\n    public EnumMap(Class<K> keyType) {\n        this.keyType = keyType;\n        keyUniverse = getKeyUniverse(keyType);\n        vals = new Object[keyUniverse.length];\n    }\n\n}\n```\n\nEnumMap继承了AbstractMap类，因此EnumMap具备一般map的使用方法，keyType表示类型信息，keyUniverse表示键数组，存储的是所有可能的枚举值，vals数组表示键对应的值，size表示键值对个数。在构造函数中通过`keyUniverse = getKeyUniverse(keyType);`初始化了keyUniverse数组的值，内部存储的是所有可能的枚举值，接着初始化了存在Value值得数组vals，其大小与枚举实例的个数相同，getKeyUniverse方法实现如下\n\n```\n//返回枚举数组\nprivate static <K extends Enum<K>> K[] getKeyUniverse(Class<K> keyType) {\n        //最终调用到枚举类型的values方法，values方法返回所有可能的枚举值\n        return SharedSecrets.getJavaLangAccess()\n                                        .getEnumConstantsShared(keyType);\n    }\n```\n\n从方法的返回值来看，返回类型是枚举数组，事实也是如此，最终返回值正是枚举类型的values方法的返回值，前面我们分析过values方法返回所有可能的枚举值，因此keyUniverse数组存储就是枚举类型的所有可能的枚举值。接着看put方法的实现\n\n```\n public V put(K key, V value) {\n        typeCheck(key);//检测key的类型\n        //获取存放value值得数组下标\n        int index = key.ordinal();\n        //获取旧值\n        Object oldValue = vals[index];\n        //设置value值\n        vals[index] = maskNull(value);\n        if (oldValue == null)\n            size++;\n        return unmaskNull(oldValue);//返回旧值\n    }\n```\n\n这里通过typeCheck方法进行了key类型检测，判断是否为枚举类型，如果类型不对，会抛出异常\n\n```\nprivate void typeCheck(K key) {\n   Class<?> keyClass = key.getClass();//获取类型信息\n   if (keyClass != keyType && keyClass.getSuperclass() != keyType)\n       throw new ClassCastException(keyClass + \" != \" + keyType);\n}\n```\n\n接着通过`int index = key.ordinal()`的方式获取到该枚举实例的顺序值，利用此值作为下标，把值存储在vals数组对应下标的元素中即`vals[index]`，这也是为什么EnumMap能维持与枚举实例相同存储顺序的原因，我们发现在对vals[]中元素进行赋值和返回旧值时分别调用了maskNull方法和unmaskNull方法\n\n```\n //代表NULL值得空对象实例\n  private static final Object NULL = new Object() {\n        public int hashCode() {\n            return 0;\n        }\n\n        public String toString() {\n            return \"java.util.EnumMap.NULL\";\n        }\n    };\n\n    private Object maskNull(Object value) {\n        //如果值为空，返回NULL对象，否则返回value\n        return (value == null ? NULL : value);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private V unmaskNull(Object value) {\n        //将NULL对象转换为null值\n        return (V)(value == NULL ? null : value);\n    }\n```\n\n由此看来EnumMap还是允许存放null值的，但key绝对不能为null，对于null值，EnumMap进行了特殊处理,将其包装为NULL对象，毕竟vals[]存的是Object，maskNull方法和unmaskNull方法正是用于null的包装和解包装的。这就是EnumMap集合的添加过程。下面接着看获取方法\n\n```\n public V get(Object key) {\n        return (isValidKey(key) ?\n                unmaskNull(vals[((Enum<?>)key).ordinal()]) : null);\n    }\n\n //对Key值的有效性和类型信息进行判断\n private boolean isValidKey(Object key) {\n      if (key == null)\n          return false;\n\n      // Cheaper than instanceof Enum followed by getDeclaringClass\n      Class<?> keyClass = key.getClass();\n      return keyClass == keyType || keyClass.getSuperclass() == keyType;\n  }\n```\n\n相对应put方法，get方法显示相当简洁，key有效的话，直接通过ordinal方法取索引，然后在值数组vals里通过索引获取值返回。remove方法如下：\n\n```\n public V remove(Object key) {\n        //判断key值是否有效\n        if (!isValidKey(key))\n            return null;\n        //直接获取索引\n        int index = ((Enum<?>)key).ordinal();\n\n        Object oldValue = vals[index];\n        //对应下标元素值设置为null\n        vals[index] = null;\n        if (oldValue != null)\n            size--;//减size\n        return unmaskNull(oldValue);\n    }\n```\n\n非常简单，key值有效，通过key获取下标索引值，把vals[]对应下标值设置为null，size减一。查看是否包含某个值，\n\n```\n判断是否包含某value\npublic boolean containsValue(Object value) {\n    value = maskNull(value);\n    //遍历数组实现\n    for (Object val : vals)\n        if (value.equals(val))\n            return true;\n\n    return false;\n}\n//判断是否包含key\npublic boolean containsKey(Object key) {\n    return isValidKey(key) && vals[((Enum<?>)key).ordinal()] != null;\n}\n```\n\n判断value直接通过遍历数组实现，而判断key就更简单了，判断key是否有效和对应vals[]中是否存在该值。ok~，这就是EnumMap的主要实现原理，即内部有两个数组，长度相同，一个表示所有可能的键(枚举值)，一个表示对应的值，不允许keynull，但允许value为null，键都有一个对应的索引，根据索引直接访问和操作其键数组和值数组，由于操作都是数组，因此效率很高。\n\n# EnumSet\n\nEnumSet是与枚举类型一起使用的专用 Set 集合，EnumSet 中所有元素都必须是枚举类型。与其他Set接口的实现类HashSet/TreeSet(内部都是用对应的HashMap/TreeMap实现的)不同的是，EnumSet在内部实现是位向量(稍后分析)，它是一种极为高效的位运算操作，由于直接存储和操作都是bit，因此EnumSet空间和时间性能都十分可观，足以媲美传统上基于 int 的“位标志”的运算，重要的是我们可像操作set集合一般来操作位运算，这样使用代码更简单易懂同时又具备类型安全的优势。注意EnumSet不允许使用 null 元素。试图插入 null 元素将抛出 NullPointerException，但试图测试判断是否存在null 元素或移除 null 元素则不会抛出异常，与大多数collection 实现一样，EnumSet不是线程安全的，因此在多线程环境下应该注意数据同步问题，ok~，下面先来简单看看EnumSet的使用方式。\n\n## EnumSet用法\n\n创建EnumSet并不能使用new关键字，因为它是个抽象类，而应该使用其提供的静态工厂方法，EnumSet的静态工厂方法比较多，如下：\n\n```java\n创建一个具有指定元素类型的空EnumSet。\nEnumSet<E>  noneOf(Class<E> elementType)       \n//创建一个指定元素类型并包含所有枚举值的EnumSet\n<E extends Enum<E>> EnumSet<E> allOf(Class<E> elementType)\n// 创建一个包括枚举值中指定范围元素的EnumSet\n<E extends Enum<E>> EnumSet<E> range(E from, E to)\n// 初始集合包括指定集合的补集\n<E extends Enum<E>> EnumSet<E> complementOf(EnumSet<E> s)\n// 创建一个包括参数中所有元素的EnumSet\n<E extends Enum<E>> EnumSet<E> of(E e)\n<E extends Enum<E>> EnumSet<E> of(E e1, E e2)\n<E extends Enum<E>> EnumSet<E> of(E e1, E e2, E e3)\n<E extends Enum<E>> EnumSet<E> of(E e1, E e2, E e3, E e4)\n<E extends Enum<E>> EnumSet<E> of(E e1, E e2, E e3, E e4, E e5)\n<E extends Enum<E>> EnumSet<E> of(E first, E... rest)\n//创建一个包含参数容器中的所有元素的EnumSet\n<E extends Enum<E>> EnumSet<E> copyOf(EnumSet<E> s)\n<E extends Enum<E>> EnumSet<E> copyOf(Collection<E> c)123456789101112131415161718\n```\n\n代码演示如下：\n\n```java\npackage zejian;\n\nimport java.util.ArrayList;\nimport java.util.EnumSet;\nimport java.util.List;\n\n/**\n * Created by wuzejian on 2017/5/12.\n *\n */\nenum Color {\n    GREEN , RED , BLUE , BLACK , YELLOW\n}\n\npublic class EnumSetDemo {\n\n    public static void main(String[] args){\n\n        //空集合\n        EnumSet<Color> enumSet= EnumSet.noneOf(Color.class);\n        System.out.println(\"添加前：\"+enumSet.toString());\n        enumSet.add(Color.GREEN);\n        enumSet.add(Color.RED);\n        enumSet.add(Color.BLACK);\n        enumSet.add(Color.BLUE);\n        enumSet.add(Color.YELLOW);\n        System.out.println(\"添加后：\"+enumSet.toString());\n\n        System.out.println(\"-----------------------------------\");\n\n        //使用allOf创建包含所有枚举类型的enumSet，其内部根据Class对象初始化了所有枚举实例\n        EnumSet<Color> enumSet1= EnumSet.allOf(Color.class);\n        System.out.println(\"allOf直接填充：\"+enumSet1.toString());\n\n        System.out.println(\"-----------------------------------\");\n\n        //初始集合包括枚举值中指定范围的元素\n        EnumSet<Color> enumSet2= EnumSet.range(Color.BLACK,Color.YELLOW);\n        System.out.println(\"指定初始化范围：\"+enumSet2.toString());\n\n        System.out.println(\"-----------------------------------\");\n\n        //指定补集，也就是从全部枚举类型中去除参数集合中的元素，如下去掉上述enumSet2的元素\n        EnumSet<Color> enumSet3= EnumSet.complementOf(enumSet2);\n        System.out.println(\"指定补集：\"+enumSet3.toString());\n\n        System.out.println(\"-----------------------------------\");\n\n        //初始化时直接指定元素\n        EnumSet<Color> enumSet4= EnumSet.of(Color.BLACK);\n        System.out.println(\"指定Color.BLACK元素：\"+enumSet4.toString());\n        EnumSet<Color> enumSet5= EnumSet.of(Color.BLACK,Color.GREEN);\n        System.out.println(\"指定Color.BLACK和Color.GREEN元素：\"+enumSet5.toString());\n\n        System.out.println(\"-----------------------------------\");\n\n        //复制enumSet5容器的数据作为初始化数据\n        EnumSet<Color> enumSet6= EnumSet.copyOf(enumSet5);\n        System.out.println(\"enumSet6：\"+enumSet6.toString());\n\n        System.out.println(\"-----------------------------------\");\n\n        List<Color> list = new ArrayList<Color>();\n        list.add(Color.BLACK);\n        list.add(Color.BLACK);//重复元素\n        list.add(Color.RED);\n        list.add(Color.BLUE);\n        System.out.println(\"list:\"+list.toString());\n\n        //使用copyOf(Collection<E> c)\n        EnumSet enumSet7=EnumSet.copyOf(list);\n        System.out.println(\"enumSet7:\"+enumSet7.toString());\n\n        /**\n         输出结果：\n         添加前：[]\n         添加后：[GREEN, RED, BLUE, BLACK, YELLOW]\n         -----------------------------------\n         allOf直接填充：[GREEN, RED, BLUE, BLACK, YELLOW]\n         -----------------------------------\n         指定初始化范围：[BLACK, YELLOW]\n         -----------------------------------\n         指定补集：[GREEN, RED, BLUE]\n         -----------------------------------\n         指定Color.BLACK元素：[BLACK]\n         指定Color.BLACK和Color.GREEN元素：[GREEN, BLACK]\n         -----------------------------------\n         enumSet6：[GREEN, BLACK]\n         -----------------------------------\n         list:[BLACK, BLACK, RED, BLUE]\n         enumSet7:[RED, BLUE, BLACK]\n         */\n    }\n\n}\n12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697\n```\n\n`noneOf(Class<E> elementType)`静态方法，主要用于创建一个空的EnumSet集合，传递参数elementType代表的是枚举类型的类型信息，即Class对象。`EnumSet<E> allOf(Class<E> elementType)`静态方法则是创建一个填充了elementType类型所代表的所有枚举实例，奇怪的是EnumSet提供了多个重载形式的of方法，最后一个接受的的是可变参数，其他重载方法则是固定参数个数，EnumSet之所以这样设计是因为可变参数的运行效率低一些，所有在参数数据不多的情况下，强烈**_不建议_**使用传递参数为可变参数的of方法，即`EnumSet<E> of(E first, E... rest)`，其他方法就不分析了，看代码演示即可。至于EnumSet的操作方法，则与set集合是一样的，可以看API即可这也不过多说明。什么时候使用EnumSet比较恰当的，事实上当需要进行位域运算，就可以使用EnumSet提到位域，如下：\n\n```\npublic class EnumSetDemo {\n    //定义位域变量\n    public static final int TYPE_ONE = 1 << 0 ; //1\n    public static final int TYPE_TWO = 1 << 1 ; //2\n    public static final int TYPE_THREE = 1 << 2 ; //4\n    public static final int TYPE_FOUR = 1 << 3 ; //8\n    public static void main(String[] args){\n        //位域运算\n        int type= TYPE_ONE | TYPE_TWO | TYPE_THREE |TYPE_FOUR;\n    }\n}\n```\n\n诸如上述情况，我们都可以将上述的类型定义成枚举然后采用EnumSet来装载，进行各种操作，这样不仅不用手动编写太多冗余代码，而且使用EnumSet集合进行操作也将使代码更加简洁明了。\n\n```\nenum Type{\n    TYPE_ONE,TYPE_TWO,TYPE_THREE,TYPE_FOUR \n}\n\npublic class EnumSetDemo {\n    public static void main(String[] args){\n    EnumSet set =EnumSet.of(Type.TYPE_ONE,Type.TYPE_FOUR);\n    }\n}\n```\n\n其实博主认为EnumSet最有价值的是其内部实现原理，采用的是位向量，它体现出来的是一种高效的数据处理方式，这点很值得我们去学习它。\n\n## EnumSet实现原理剖析\n\n关于EnumSet实现原理可能会有点烧脑，内部执行几乎都是位运算，博主将尽力使用图片来分析，协助大家理解。\n\n### 理解位向量\n\n在分析EnumSet前有必要先了解以下位向量，顾名思义位向量就是用一个bit位(0或1)标记一个元素的状态，用一组bit位表示一个集合的状态，而每个位对应一个元素，每个bit位的状态只可能有两种，即0或1。位向量能表示的元素个数与向量的bit位长度有关，如一个int类型能表示32个元素，而一个long类型则可以表示64个元素，对于EnumSet而言采用的就long类型或者long类型数组。比如现在有一个文件中的数据，该文件存储了N=1000000个无序的整数，需要把这些整数读取到内存并排序再重新写回文件中，该如何解决？最简单的方式是用int类型来存储每个数，并把其存入到数组(int a[m])中，再进行排序，但是这种方式将会导致存储空间异常大，对数据操作起来效率也能成问题，那有没更高效的方式呢？的确是有的，那就是运用位向量，我们知道一个int型的数有4个字节，也就是32位，那么我们可以用N/32个int型数组来表示这N个数：\n\n```\na[0]表示第1~32个数（0~31）\na[1]表示第33~64个数（32~63）\na[2]表示第65~96个数（64~95）\n...... 以此类推\n```\n\n这样，每当输入一个数字m，我们应该先找到该数字在数组的第？个元素，也就是a[?]，然后再确定在这个元素的第几个bit位，找到后设置为1，代表存在该数字。举个例子来说，比如输入40，那么40/32为1余8，则应该将a[1]元素值的第9个bit位置为1(1的二进制左移8位后就是第9个位置)，表示该数字存在，40数字的表示原理图过程如下：\n\n![](https://img-blog.csdn.net/20170513085533480?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamF2YXplamlhbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n大概明白了位向量表示方式后，上述过程的计算方式，通过以下方式可以计算该数存储在数组的第?个元素和元素中第?个bit位置,为了演示方便，我们这里假设整第?个元素中的?为P，余值设置S\n\n```\n\n//m 除以 2^n 则商(P)表示为 m >> n \n//等同于 m / 2^5 取整数 即：40 / 32 = 1 ，那么P=1就是数组中第2个元素，即a[1]\n\n//位操作过程如下，40的二进制\n00000000 00000000 00000000 00101000\n\n//右移5位即 n=5 ， m >> 5 ，即结果转为10进制就是P=1\n00000000 00000000 00000000 00000001\n```\n\n在这里我们使用的int类型，即32位，所有2^5=32，因此n=5，由此计算出 P的值代表的是数组的第 P 个元素，接着利用下述方式计算出余数（S），以此设置该元素值的第（S+1）个bit位为1\n\n```java\n//m 除以2^n 的余数(S)表示为 m & (2^n-1) \n//等同于： m % 2^5 取余数 即：40 % 32 = 8\n\n//m=40的二进制\n00000000 00000000 00000000 00101000\n\n//2^n-1（31）的二进制\n00000000 00000000 00000000 00011111\n\n// m & (2^n-1) 即40与31进行与操作得出余数 即 S=8\n00000000 00000000 00000000 00001000 \n\n//下面是将a[1]元素值的第(8+1)个bit设置为1，为什么是(8+1)不是8？因为1左移8位就在第9个bit位了，过程如下：\n\n//1的二进制如下：\n00000000 00000000 00000000 00000001\n\n//1 << 8 利用余数8对1进行左移动\n00000000 00000000 00000001 0000000 \n\n//然后再与a[1]执行或操作后就可以将对应的bit位设置为1\n//a[P] |= 1 << S 见下述java实现的代码12345678910111213141516171819202122\n```\n\n通过上述二进制位运算过程(关于位运算可以看博主的另一篇博文~[java位运算](http://blog.csdn.net/javazejian/article/details/51181320))就可以计算出整数部分P和余数部分S，并成功设置bit位为1，现在利用java来实现这个运算过程如下：\n\n```java\n//定义变量\nprivate int[] a; //数组存储元素的数组\nprivate int BIT_LENGTH = 32;//默认使用int类型\nprivate int P; //整数部分\nprivate int S; //余数\nprivate int MASK =  0x1F;// 2^5 - 1\nprivate int SHIFT = 5; // 2^n SHIFT=n=5 表示2^5=32 即bit位长度321234567\n```\n\n计算代码\n\n```java\n/**\n * 置位操作,添加操作\n * @param i\n */\npublic void set(int i){\n     P = i >> SHIFT; //结果等同  P = i / BIT_LENGTH; 取整数 ①\n     S = i & MASK;   //结果等同  S = i % BIT_LENGTH; 取余数 ②\n\n     a[P] |= 1 << S;  //赋值设置该元素bit位为1               ③\n     //将int型变量j的第k个比特位设置为1， 即j=j|(1<<k),上述3句合并为一句\n     //a[i >> SHIFT ] |= (1 << (i & MASK));               ④\n }123456789101112\n```\n\n计算出P和S后，就可以进行赋值了，其中 a[P]代表数组中第P个元素，`a[P] |= 1 << S` 整句意思是把a[P]元素的第S+1位设置为1，注意从低位到高位设置，即从右到左，①②③合并为④，代码将更佳简洁。当然有添加操作，那么就会有删除操作，删除操作过程与添加类似，只不过删除是把相对应的bit位设置0，代表不存在该数值。\n\n```java\n/**\n* 置0操作，相当于清除元素\n* @param i\n*/\npublic void clear(int i){\n   P =  i >> SHIFT; //计算位于数组中第？个元素 P = i / BIT_LENGTH;\n   S =  i & MASK;   //计算余数  S = i % BIT_LENGTH;\n   //把a[P]元素的第S+1个(从低位到高位)bit位设置为0\n   a[P] &= ~(1 << S);\n\n   //更优写法\n   //将int型变量j的第k个比特位设置为0，即j= j&~(1<<k)\n   //a[i>>SHIFT] &= ~(1<<(i &MASK));\n}1234567891011121314\n```\n\n与添加唯一不同的是，计算出余数S，利用1左移S位，再取反(~)操作，最后进行与(&)操作，即将a[P]元素的第S+1个(从低位到高位)bit位设置为0，表示删除该数字，这个计算过程大家可以自行推算一下。这就是位向量表示法的添加和清除方法，然后我们可以利用下述的get方法判断某个bit是否存在某个数字：\n\n```\n/**\n * 读取操作，返回1代表该bit位有值，返回0代表该bit位没值\n * @param i\n * @return\n */\npublic int get(int i){\n    //a[i>>SHIFT] & (1<<(i&MASK));\n    P = i >> SHIFT;\n    S = i &  MASK;\n    return Integer.bitCount(a[P] & (1 << S));\n}\n```\n\n其中Integer.bitCount()是返回指定 int 值的二进制补码(计算机数字的二进制表示法都是使用补码表示的)表示形式的 1 位的数量。位向量运算整体代码实现如下：\n\n```java\npackage com.zejian;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\n/**\n * Created by zejian on 2017/5/13.\n * Blog : http://blog.csdn.net/javazejian [原文地址,请尊重原创]\n * 位向量存储数据\n */\npublic class BitVetory {\n    private int count;\n    private int[] a; //数组\n    private int BIT_LENGTH = 32;//默认使用int类型\n    private int P; //整数部分\n    private int S; //余数\n    private int MASK =  0x1F;// 2^5 - 1\n    private int SHIFT = 5; // 2^n SHIFT=n=5 表示2^5=32 即bit位长度32\n\n    /**\n     * 初始化位向量\n     * @param count\n     */\n    public BitVetory(int count) {\n        this.count = count;\n        a = new int[(count-1)/BIT_LENGTH + 1];\n        init();\n    }\n\n    /**\n     * 将数组中元素bit位设置为0\n     */\n    public void init(){\n        for (int i = 0; i < count; i++) {\n            clear(i);\n        }\n    }\n\n    /**\n     * 获取排序后的数组\n     * @return\n     */\n    public List<Integer> getSortedArray(){\n        List<Integer> sortedArray = new ArrayList<Integer>();\n\n        for (int i = 0; i < count; i++) {\n            if (get(i) == 1) {//判断i是否存在\n                sortedArray.add(i);\n            }\n        }\n        return sortedArray;\n    }\n    /**\n     * 置位操作,设置元素\n     * @param i\n     */\n    public void set(int i){\n        P = i >> SHIFT; //P = i / BIT_LENGTH; 取整数\n        S = i & MASK; //S = i % BIT_LENGTH; 取余数\n        a[P] |= 1 << S;\n\n        //将int型变量j的第k个比特位设置为1， 即j=j|(1<<k),上述3句合并为一句\n        //a[i >> SHIFT ] |= (1 << (i & MASK));\n    }\n\n    /**\n     * 置0操作，相当于清除元素\n     * @param i\n     */\n    public void clear(int i){\n        P =  i >> SHIFT; //计算位于数组中第？个元素 P = i / BIT_LENGTH;\n        S =  i & MASK;   //计算余数  S = i % BIT_LENGTH;\n        a[P] &= ~(1 << S);\n\n        //更优写法\n        //将int型变量j的第k个比特位设置为0，即j= j&~(1<<k)\n        //a[i>>SHIFT] &= ~(1<<(i &MASK));\n    }\n\n    /**\n     * 读取操作，返回1代表该bit位有值，返回0代表该bit位没值\n     * @param i\n     * @return\n     */\n    public int get(int i){\n        //a[i>>SHIFT] & (1<<(i&MASK));\n        P = i >> SHIFT;\n        S = i &  MASK;\n        return Integer.bitCount(a[P] & (1 << S));\n    }\n\n    //测试\n    public static void main(String[] args) {\n        int count = 25;\n        List<Integer> randoms = getRandomsList(count);\n        System.out.println(\"排序前：\");\n\n        BitVetory bitVetory = new BitVetory(count);\n        for (Integer e : randoms) {\n            System.out.print(e+\",\");\n            bitVetory.set(e);\n        }\n\n        List<Integer> sortedArray = bitVetory.getSortedArray();\n        System.out.println();\n        System.out.println(\"排序后：\");\n        for (Integer e : sortedArray) {\n            System.out.print(e+\",\");\n        }\n\n        /**\n         输出结果:\n         排序前：\n         6,3,20,10,18,15,19,16,13,4,21,22,24,2,14,5,12,7,23,8,1,17,9,11,\n         排序后：\n         1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,\n         */\n    }\n\n    private static List<Integer> getRandomsList(int count) {\n        Random random = new Random();\n\n        List<Integer> randomsList = new ArrayList<Integer>();\n        while(randomsList.size() < (count - 1)){\n            int element = random.nextInt(count - 1) + 1;//element ∈  [1,count)\n            if (!randomsList.contains(element)) {\n                randomsList.add(element);\n            }\n        }\n        return randomsList;\n    }\n}\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134\n```\n\n### EnumSet原理\n\n有前面位向量的分析，对于了解EnumSet的实现原理就相对简单些了，EnumSet内部使用的位向量实现的，前面我们说过EnumSet是一个抽象类，事实上它存在两个子类，RegularEnumSet和JumboEnumSet。RegularEnumSet使用一个long类型的变量作为位向量，long类型的位长度是64，因此可以存储64个枚举实例的标志位，一般情况下是够用的了，而JumboEnumSet使用一个long类型的数组，当枚举个数超过64时，就会采用long数组的方式存储。先看看EnumSet内部的数据结构：\n\n```java\npublic abstract class EnumSet<E extends Enum<E>> extends AbstractSet<E>\n    implements Cloneable, java.io.Serializable\n{\n    //表示枚举类型\n    final Class<E> elementType;\n    //存储该类型信息所表示的所有可能的枚举实例\n    final Enum<?>[] universe;\n    //..........\n}123456789\n```\n\nEnumSet中有两个变量，一个elementType用于表示枚举的类型信息，universe是数组类型，存储该类型信息所表示的所有可能的枚举实例，EnumSet是抽象类，因此具体的实现是由子类完成的，下面看看`noneOf(Class<E> elementType)`静态构建方法\n\n```java\n  public static <E extends Enum<E>> EnumSet<E> noneOf(Class<E> elementType) {\n        //根据EnumMap中的一样，获取所有可能的枚举实例\n        Enum<?>[] universe = getUniverse(elementType);\n        if (universe == null)\n            throw new ClassCastException(elementType + \" not an enum\");\n\n        if (universe.length <= 64)\n            //枚举个数小于64，创建RegularEnumSet\n            return new RegularEnumSet<>(elementType, universe);\n        else\n            //否则创建JumboEnumSet\n            return new JumboEnumSet<>(elementType, universe);\n    }12345678910111213\n```\n\n从源码可以看出如果枚举值个数小于等于64，则静态工厂方法中创建的就是RegularEnumSet，否则大于64的话就创建JumboEnumSet。无论是RegularEnumSet还是JumboEnumSet，其构造函数内部都间接调用了EnumSet的构造函数，因此最终的elementType和universe都传递给了父类EnumSet的内部变量。如下：\n\n```java\n//RegularEnumSet构造\nRegularEnumSet(Class<E>elementType, Enum<?>[] universe) {\n      super(elementType, universe);\n  }\n\n//JumboEnumSet构造\nJumboEnumSet(Class<E>elementType, Enum<?>[] universe) {\n      super(elementType, universe);\n      elements = new long[(universe.length + 63) >>> 6];\n  }12345678910\n```\n\n在RegularEnumSet类和JumboEnumSet类中都存在一个elements变量，用于记录位向量的操作，\n\n```\n//RegularEnumSet\nclass RegularEnumSet<E extends Enum<E>> extends EnumSet<E> {\n    private static final long serialVersionUID = 3411599620347842686L;\n    //通过long类型的elements记录位向量的操作\n    private long elements = 0L;\n    //.......\n}\n\n//对于JumboEnumSet则是：\nclass JumboEnumSet<E extends Enum<E>> extends EnumSet<E> {\n    private static final long serialVersionUID = 334349849919042784L;\n    //通过long数组类型的elements记录位向量\n    private long elements[];\n     //表示集合大小\n    private int size = 0;\n\n    //.............\n    }\n```\n\n在RegularEnumSet中elements是一个long类型的变量，共有64个bit位，因此可以记录64个枚举常量，当枚举常量的数量超过64个时，将使用JumboEnumSet，elements在该类中是一个long型的数组，每个数组元素都可以存储64个枚举常量，这个过程其实与前面位向量的分析是同样的道理，只不过前面使用的是32位的int类型，这里使用的是64位的long类型罢了。接着我们看看EnumSet是如何添加数据的，RegularEnumSet中的add实现如下\n\n```\npublic boolean add(E e) {\n    //检测是否为枚举类型\n    typeCheck(e);\n    //记录旧elements\n    long oldElements = elements;\n    //执行位向量操作，是不是很熟悉？\n    //数组版：a[i >> SHIFT ] |= (1 << (i & MASK))\n    elements |= (1L << ((Enum)e).ordinal());\n    return elements != oldElements;\n}\n```\n\n关于`elements |= (1L << ((Enum)e).ordinal());`这句跟我们前面分析位向量操作是相同的原理，只不过前面分析的是数组类型实现，这里用的long类型单一变量实现，`((Enum)e).ordinal()`通过该语句获取要添加的枚举实例的序号，然后通过1左移再与 long类型的elements进行或操作，就可以把对应位置上的bit设置为1了，也就代表该枚举实例存在。图示演示过程如下，注意universe数组在EnumSet创建时就初始化并填充了所有可能的枚举实例，而elements值的第n个bit位1时代表枚举存在，而获取的则是从universe数组中的第n个元素值。\n\n![](https://img-blog.csdn.net/20170513151544085?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamF2YXplamlhbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n这就是枚举实例的添加过程和获取原理。而对于JumboEnumSet的add实现则是如下：\n\n```\npublic boolean add(E e) {\n    typeCheck(e);\n    //计算ordinal值\n    int eOrdinal = e.ordinal();\n    int eWordNum = eOrdinal >>> 6;\n\n    long oldElements = elements[eWordNum];\n    //与前面分析的位向量相同：a[i >> SHIFT ] |= (1 << (i & MASK))\n    elements[eWordNum] |= (1L << eOrdinal);\n    boolean result = (elements[eWordNum] != oldElements);\n    if (result)\n        size++;\n    return result;\n}\n```\n\n关于JumboEnumSet的add实现与RegularEnumSet区别是一个是long数组类型，一个long变量，运算原理相同，数组的位向量运算与前面分析的是相同的，这里不再分析。接着看看如何删除元素\n\n```\n//RegularEnumSet类实现\npublic boolean remove(Object e) {\n    if (e == null)\n        return false;\n    Class eClass = e.getClass();\n    if (eClass != elementType && eClass.getSuperclass() != elementType)\n        return false;\n\n    long oldElements = elements;\n    //将int型变量j的第k个比特位设置为0，即j= j&~(1<<k)\n    //数组类型：a[i>>SHIFT] &= ~(1<<(i &MASK));\n\n    elements &= ~(1L << ((Enum)e).ordinal());//long遍历类型操作\n    return elements != oldElements;\n}\n\n//JumboEnumSet类的remove实现\npublic boolean remove(Object e) {\n        if (e == null)\n            return false;\n        Class<?> eClass = e.getClass();\n        if (eClass != elementType && eClass.getSuperclass() != elementType)\n            return false;\n        int eOrdinal = ((Enum<?>)e).ordinal();\n        int eWordNum = eOrdinal >>> 6;\n\n        long oldElements = elements[eWordNum];\n        //与a[i>>SHIFT] &= ~(1<<(i &MASK));相同\n        elements[eWordNum] &= ~(1L << eOrdinal);\n        boolean result = (elements[eWordNum] != oldElements);\n        if (result)\n            size--;\n        return result;\n    }\n```\n\n删除remove的实现，跟位向量的清空操作是同样的实现原理，如下： \n![](https://img-blog.csdn.net/20170513171112915?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamF2YXplamlhbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n至于JumboEnumSet的实现原理也是类似的，这里不再重复。下面为了简洁起见，我们以RegularEnumSet类的实现作为源码分析，毕竟JumboEnumSet的内部实现原理可以说跟前面分析过的位向量几乎一样。o~，看看如何判断是否包含某个元素\n\n```\npublic boolean contains(Object e) {\n    if (e == null)\n        return false;\n    Class eClass = e.getClass();\n    if (eClass != elementType && eClass.getSuperclass() != elementType)\n        return false;\n    //先左移再按&操作\n    return (elements & (1L << ((Enum)e).ordinal())) != 0;\n}\n\npublic boolean containsAll(Collection<?> c) {\n    if (!(c instanceof RegularEnumSet))\n        return super.containsAll(c);\n\n    RegularEnumSet<?> es = (RegularEnumSet<?>)c;\n    if (es.elementType != elementType)\n        return es.isEmpty();\n    //~elements取反相当于elements补集，再与es.elements进行&操作，如果为0，\n    //就说明elements补集与es.elements没有交集，也就是es.elements是elements的子集\n    return (es.elements & ~elements) == 0;\n}\n\n```\n\n对于contains(Object e) 方法，先左移再按位与操作，不为0，则表示包含该元素，跟位向量的get操作实现原理类似，这个比较简单。对于`containsAll(Collection<?> c)`则可能比较难懂，这里分析一下，elements变量(long类型)标记EnumSet集合中已存在元素的bit位，如果bit位为1则说明存在枚举实例，为0则不存在，现在执行`~elements` 操作后 则说明`~elements`是elements的补集，那么只要传递进来的es.elements与补集`~elements` 执行&操作为0，那么就可以证明es.elements与补集`~elements` 没有交集的可能，也就是说es.elements只能是elements的子集，这样也就可以判断出当前EnumSet集合中包含传递进来的集合c了，借着下图协助理解：\n\n![](https://img-blog.csdn.net/20170513163057795?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamF2YXplamlhbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n图中，elements代表A，`es.elements`代表S，`~elements`就是求A的补集，`(es.elements & ~elements) == 0`就是在验证A’∩B是不是空集，即S是否为A的子集。接着看retainAll方法，求两个集合交集\n\n```\npublic boolean retainAll(Collection<?> c) {\n        if (!(c instanceof RegularEnumSet))\n            return super.retainAll(c);\n\n        RegularEnumSet<?> es = (RegularEnumSet<?>)c;\n        if (es.elementType != elementType) {\n            boolean changed = (elements != 0);\n            elements = 0;\n            return changed;\n        }\n\n        long oldElements = elements;\n        //执行与操作，求交集，比较简单\n        elements &= es.elements;\n        return elements != oldElements;\n    }\n```\n\n最后来看看迭代器是如何取值的\n\n```\n public Iterator<E> iterator() {\n        return new EnumSetIterator<>();\n    }\n\n    private class EnumSetIterator<E extends Enum<E>> implements Iterator<E> {\n        //记录elements\n        long unseen;\n\n        //记录最后一个返回值\n        long lastReturned = 0;\n\n        EnumSetIterator() {\n            unseen = elements;\n        }\n\n        public boolean hasNext() {\n            return unseen != 0;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        public E next() {\n            if (unseen == 0)\n                throw new NoSuchElementException();\n            //取值过程，先与本身负执行&操作得出的就是二进制低位开始的第一个1的数值大小\n            lastReturned = unseen & -unseen;\n            //取值后减去已取得lastReturned\n            unseen -= lastReturned;\n            //返回在指定 long 值的二进制补码表示形式中最低位（最右边）的 1 位之后的零位的数量\n            return (E) universe[Long.numberOfTrailingZeros(lastReturned)];\n        }\n\n        public void remove() {\n            if (lastReturned == 0)\n                throw new IllegalStateException();\n            elements &= ~lastReturned;\n            lastReturned = 0;\n        }\n    }\n```\n\n比较晦涩的应该是\n\n```\n//取值过程，先与本身负执行&操作得出的就是二进制低位开始的第一个1的数值大小\nlastReturned = unseen & -unseen; \n//取值后减去已取得lastReturned\nunseen -= lastReturned;\nreturn (E) universe[Long.numberOfTrailingZeros(lastReturned)];\n```\n\n我们通过原理图来协助理解，现在假设集合中已保存所有可能的枚举实例变量，我们需要把它们遍历展示出来，下面的第一个枚举元素的获取过程，显然通过`unseen & -unseen;`操作，我们可以获取到二进制低位开始的第一个1的数值，该计算的结果是要么全部都是0，要么就只有一个1，然后赋值给lastReturned，通过`Long.numberOfTrailingZeros(lastReturned)`获取到该bit为1在64位的long类型中的位置，即从低位算起的第几个bit，如图，该bit的位置恰好是低位的第1个bit位置，也就指明了universe数组的第一个元素就是要获取的枚举变量。执行`unseen -= lastReturned;`后继续进行第2个元素的遍历，依次类推遍历出所有值，这就是EnumSet的取值过程，真正存储枚举变量的是universe数组，而通过long类型变量的bit位的0或1表示存储该枚举变量在universe数组的那个位置，这样做的好处是任何操作都是执行long类型变量的bit位操作，这样执行效率将特别高，毕竟是二进制直接执行，只有最终获取值时才会操作到数组universe。\n\n![](https://img-blog.csdn.net/20170513174622751?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamF2YXplamlhbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nok~，到这关于EnumSet的实现原理主要部分我们就分析完了，其内部使用位向量，存储结构很简洁，节省空间，大部分操作都是按位运算，直接操作二进制数据，因此效率极高。当然通过前面的分析，我们也掌握位向量的运算原理。好~，关于java枚举，我们暂时聊到这。"]],[8,8],[59772,59772]]],[1564810563082,["GJX@GJXAIOU",[[-1,39,"*   [理解枚举类型](https://blog.csdn.net/javazejian/article/details/71333103#%E7%90%86%E8%A7%A3%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B)\n    *   [枚举的定义](https://blog.csdn.net/javazejian/article/details/71333103#%E6%9E%9A%E4%B8%BE%E7%9A%84%E5%AE%9A%E4%B9%89)\n    *   [枚举实现原理](https://blog.csdn.net/javazejian/article/details/71333103#%E6%9E%9A%E4%B8%BE%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86)\n    *   [枚举的常见方法](https://blog.csdn.net/javazejian/article/details/71333103#%E6%9E%9A%E4%B8%BE%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95)\n        *   [Enum抽象类常见方法](https://blog.csdn.net/javazejian/article/details/71333103#enum%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95)\n        *   [编译器生成的Values方法与ValueOf方法](https://blog.csdn.net/javazejian/article/details/71333103#%E7%BC%96%E8%AF%91%E5%99%A8%E7%94%9F%E6%88%90%E7%9A%84values%E6%96%B9%E6%B3%95%E4%B8%8Evalueof%E6%96%B9%E6%B3%95)\n*   [枚举与Class对象](https://blog.csdn.net/javazejian/article/details/71333103#%E6%9E%9A%E4%B8%BE%E4%B8%8Eclass%E5%AF%B9%E8%B1%A1)\n*   [枚举的进阶用法](https://blog.csdn.net/javazejian/article/details/71333103#%E6%9E%9A%E4%B8%BE%E7%9A%84%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95)\n    *   [向enum类添加方法与自定义构造函数](https://blog.csdn.net/javazejian/article/details/71333103#%E5%90%91enum%E7%B1%BB%E6%B7%BB%E5%8A%A0%E6%96%B9%E6%B3%95%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0)\n    *   [关于覆盖enum类方法](https://blog.csdn.net/javazejian/article/details/71333103#%E5%85%B3%E4%BA%8E%E8%A6%86%E7%9B%96enum%E7%B1%BB%E6%96%B9%E6%B3%95)\n    *   [enum类中定义抽象方法](https://blog.csdn.net/javazejian/article/details/71333103#enum%E7%B1%BB%E4%B8%AD%E5%AE%9A%E4%B9%89%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95)\n    *   [enum类与接口](https://blog.csdn.net/javazejian/article/details/71333103#enum%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3)\n*   [枚举与switch](https://blog.csdn.net/javazejian/article/details/71333103#%E6%9E%9A%E4%B8%BE%E4%B8%8Eswitch)\n*   [枚举与单例模式](https://blog.csdn.net/javazejian/article/details/71333103#%E6%9E%9A%E4%B8%BE%E4%B8%8E%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F)\n*   [EnumMap](https://blog.csdn.net/javazejian/article/details/71333103#enummap)\n    *   [EnumMap基本用法](https://blog.csdn.net/javazejian/article/details/71333103#enummap%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95)\n    *   [EnumMap实现原理剖析](https://blog.csdn.net/javazejian/article/details/71333103#enummap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90)\n*   [EnumSet](https://blog.csdn.net/javazejian/article/details/71333103#enumset)\n    *   [EnumSet用法](https://blog.csdn.net/javazejian/article/details/71333103#enumset%E7%94%A8%E6%B3%95)\n    *   [EnumSet实现原理剖析](https://blog.csdn.net/javazejian/article/details/71333103#enumset%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90)\n        *   [理解位向量](https://blog.csdn.net/javazejian/article/details/71333103#%E7%90%86%E8%A7%A3%E4%BD%8D%E5%90%91%E9%87%8F)\n        *   [EnumSet原理](https://blog.csdn.net/javazejian/article/details/71333103#enumset%E5%8E%9F%E7%90%86)"]],[39,2994],[39,39]]],[1564810568350,["GJX@GJXAIOU",[[-1,8,"本篇主要是深入对Java中枚举类型进行分析，主要内容如下："]],[8,37],[8,8]]],[1564810569160,["GJX@GJXAIOU",[[-1,11,"\n"]],[8,8],[7,7]]],[1564810572153,["GJX@GJXAIOU",[[1,7,"@"],[-1,8,""],[-1,21364," "],[1,21365," "],[-1,43060," "],[1,43061," "],[-1,52466," "],[1,52467," "],[-1,53676," "],[1,53677," "],[-1,53742," "],[1,53743," "],[-1,53783," "],[1,53784," "]],[7,7],[8,8]]],[1564810575861,["GJX@GJXAIOU",[[1,8,"toc"]],[8,8],[11,11]]],[1564810580524,["GJX@GJXAIOU",[[-1,14,"\n"]],[14,14],[13,13]]],[1564810581201,["GJX@GJXAIOU",[[-1,13,"\n"]],[13,13],[12,12]]],[1564810603497,["GJX@GJXAIOU",[[1,65,"**"],[1,93,"**"]],[65,93],[65,97]]],[1564810652322,["GJX@GJXAIOU",[[-1,195,"/**\n * Created by zejian on 2017/5/7.\n * Blog : http://blog.csdn.net/javazejian [原文地址,请尊重原创]\n * 使用普通方式定义日期常量\n */"]],[195,307],[195,195]]],[1564810658307,["GJX@GJXAIOU",[[-1,219,"\n"]],[219,219],[218,218]]],[1564810659689,["GJX@GJXAIOU",[[-1,258,"\n"]],[258,258],[257,257]]],[1564810660657,["GJX@GJXAIOU",[[-1,297,"\n"]],[297,297],[296,296]]],[1564810661737,["GJX@GJXAIOU",[[-1,338,"\n"]],[338,338],[337,337]]],[1564810662801,["GJX@GJXAIOU",[[-1,378,"\n"]],[378,378],[377,377]]],[1564810663904,["GJX@GJXAIOU",[[-1,416,"\n"]],[416,416],[415,415]]],[1564810664889,["GJX@GJXAIOU",[[-1,456,"\n"]],[456,456],[455,455]]],[1564810666057,["GJX@GJXAIOU",[[-1,494,"\n"]],[494,494],[493,493]]],[1564810667761,["GJX@GJXAIOU",[[-1,195,"\n"]],[195,195],[194,194]]],[1564810690505,["GJX@GJXAIOU",[[-1,299," public static final int WEDNESDAY=3;\n    public static final int THURSDAY=4;\n    public static final int FRIDAY=5;\n    public static final int SATURDAY=6;"]],[299,454],[299,299]]],[1564810692839,["GJX@GJXAIOU",[[1,299,"。。"]],[299,299],[301,301]]],[1564810694126,["GJX@GJXAIOU",[[-1,299,"。。"]],[301,301],[299,299]]],[1564810695455,["GJX@GJXAIOU",[[1,299,"、、"]],[299,299],[301,301]]],[1564810696628,["GJX@GJXAIOU",[[-1,299,"、、"]],[301,301],[299,299]]],[1564810700045,["GJX@GJXAIOU",[[1,299,"// ...."]],[299,299],[306,306]]],[1564810702381,["GJX@GJXAIOU",[[1,299," "]],[299,299],[300,300]]],[1564810723360,["GJX@GJXAIOU",[[-1,375,"这样的定义方式并没有什么错，但它存在许多不足，如在类型安全和使用方便性上并没有多少好处，如果存在定义int值相同的变量，混淆的几率还是很大的，编译器也不会提出任何警告，因此这种方式在枚举出现后并不提倡，现在我们利用枚举类型来重新定义上述的常量，"]],[375,497],[375,375]]],[1564810726882,["GJX@GJXAIOU",[[-1,403,"\n"]],[403,403],[402,402]]],[1564810771776,["GJX@GJXAIOU",[[-1,513,"相当简洁，在定义枚举类型时我们使用的关键字是enum，与class关键字类似，只不过前者是定义枚举类型，后者是定义类类型。枚举类型Day中分别定义了从周一到周日的值，这里要注意，"]],[513,602],[513,513]]],[1564810795016,["GJX@GJXAIOU",[[-1,672,"，比如上述描述的一周共有七天。那么该如何使用呢？如下："]],[672,699],[672,672]]],[1564810798595,["GJX@GJXAIOU",[[1,672,"."]],[672,672],[673,673]]],[1564810804348,["GJX@GJXAIOU",[[1,564,"**"],[1,588,"**"]],[564,588],[564,592]]],[1564810812025,["GJX@GJXAIOU",[[1,643,"**"],[1,676,"**"]],[643,676],[643,680]]],[1564810815537,["GJX@GJXAIOU",[[-1,512,"\n"]],[512,512],[511,511]]],[1564810818791,["GJX@GJXAIOU",[[-1,681,"\n"]],[681,681],[680,680]]],[1564810822807,["GJX@GJXAIOU",[[-1,685,"/**\n * Created by zejian on 2017/5/7.\n * Blog : http://blog.csdn.net/javazejian [原文地址,请尊重原创]\n */"]],[685,781],[685,685]]],[1564810824816,["GJX@GJXAIOU",[[-1,685,"\n"]],[685,685],[684,684]]],[1564810827831,["GJX@GJXAIOU",[[-1,709,"\n"]],[709,709],[708,708]]],[1564810851576,["GJX@GJXAIOU",[[-1,903,"\n"]],[903,903],[902,902]]],[1564810884145,["GJX@GJXAIOU",[[1,997,"**"],[1,1064,"**"]],[997,1064],[997,1068]]],[1564811005281,["GJX@GJXAIOU",[[-1,1125,"下面我们编译前面定义的EnumDemo.java并查看生成的class文件来验证这个结论：\n\n```\n//查看目录下的java文件\nzejian@zejiandeMBP enumdemo$ ls\nEnumDemo.java\n//利用javac命令编译EnumDemo.java\nzejian@zejiandeMBP enumdemo$ javac EnumDemo.java \n//查看生成的class文件，注意有Day.class和EnumDemo.class 两个\nzejian@zejiandeMBP enumdemo$ ls\nDay.class  EnumDemo.class  EnumDemo.java\n```"]],[1125,1436],[1125,1125]]],[1564811022184,["GJX@GJXAIOU",[[-1,1127,"利用javac编译前面定义的EnumDemo.java文件后分别生成了Day.class和EnumDemo.class文件，而Day.class就是枚举类型，这也就验证前面所说的使用关键字enum定义枚举类型并编译后，编译器会自动帮助我们生成一个与枚举相关的类。我们再来看看"]],[1127,1264],[1127,1127]]],[1564811024365,["GJX@GJXAIOU",[[1,1127,"x "]],[1127,1127],[1128,1128]]],[1564811025150,["GJX@GJXAIOU",[[1,1128,"iam"]],[1128,1128],[1131,1131]]],[1564811026833,["GJX@GJXAIOU",[[-1,1127,"xiam"]],[1131,1131],[1127,1127]]],[1564811027496,["GJX@GJXAIOU",[[-1,1126,"\n"]],[1127,1127],[1126,1126]]],[1564811028721,["GJX@GJXAIOU",[[1,1126,"\n "]],[1126,1126],[1128,1128]]],[1564811030242,["GJX@GJXAIOU",[[-1,1128," "]],[1129,1129],[1128,1128]]],[1564811030837,["GJX@GJXAIOU",[[1,1128,"x "]],[1128,1128],[1129,1129]]],[1564811031612,["GJX@GJXAIOU",[[1,1129,"iam"]],[1129,1129],[1132,1132]]],[1564811033872,["GJX@GJXAIOU",[[-1,1128,"xiam"]],[1132,1132],[1128,1128]]],[1564811037686,["GJX@GJXAIOU",[[1,1128,"下面是"]],[1128,1128],[1131,1131]]],[1564811039409,["GJX@GJXAIOU",[[-1,1131," "]],[1132,1132],[1131,1131]]],[1564811105977,["GJX@GJXAIOU",[[-1,2336,"12345678910111213141516171819202122232425262728293031323334353637383940414243"]],[2336,2413],[2336,2336]]],[1564811229824,["GJX@GJXAIOU",[[-1,2950,":"]],[2951,2951],[2950,2950]]],[1564811231104,["GJX@GJXAIOU",[[-1,2952," "]],[2953,2953],[2952,2952]]],[1564811232096,["GJX@GJXAIOU",[[-1,2956,":"]],[2957,2957],[2956,2956]]],[1564811234571,["GJX@GJXAIOU",[[-1,2953," :"]],[2954,2954],[2953,2953]]],[1564811235544,["GJX@GJXAIOU",[[-1,2951,":"]],[2952,2952],[2951,2951]]],[1564811240872,["GJX@GJXAIOU",[[-1,2964,"`"]],[2965,2965],[2964,2964]]],[1564811246856,["GJX@GJXAIOU",[[-1,2967,"`"]],[2968,2968],[2967,2967]]],[1564811247962,["GJX@GJXAIOU",[[-1,3007,"`"]],[3008,3008],[3007,3007]]],[1564811250265,["GJX@GJXAIOU",[[-1,3014,"` "]],[3015,3016],[3014,3014]]],[1564811251888,["GJX@GJXAIOU",[[-1,3077,"`"]],[3078,3078],[3077,3077]]],[1564811253065,["GJX@GJXAIOU",[[-1,3068,"`"]],[3069,3069],[3068,3068]]],[1564811256033,["GJX@GJXAIOU",[[-1,3141,"`"]],[3142,3142],[3141,3141]]],[1564811257969,["GJX@GJXAIOU",[[-1,3134,"`"]],[3135,3135],[3134,3134]]],[1564811259048,["GJX@GJXAIOU",[[-1,3183,"`"]],[3184,3184],[3183,3183]]],[1564811261883,["GJX@GJXAIOU",[[-1,3186,"`"]],[3187,3187],[3186,3186]]],[1564811263625,["GJX@GJXAIOU",[[-1,3247,"`"]],[3248,3248],[3247,3247]]],[1564811265161,["GJX@GJXAIOU",[[-1,3240,"`"]],[3241,3241],[3240,3240]]],[1564811266216,["GJX@GJXAIOU",[[-1,3286,"`"]],[3287,3287],[3286,3286]]],[1564811268305,["GJX@GJXAIOU",[[-1,3313,"`"]],[3314,3314],[3313,3313]]],[1564811270152,["GJX@GJXAIOU",[[-1,3260,"`"]],[3261,3261],[3260,3260]]],[1564811273096,["GJX@GJXAIOU",[[-1,3249,"`"]],[3250,3250],[3249,3249]]],[1564811274216,["GJX@GJXAIOU",[[-1,3189,"`"]],[3190,3190],[3189,3189]]],[1564811275432,["GJX@GJXAIOU",[[-1,3198,"`"]],[3199,3199],[3198,3198]]],[1564811276448,["GJX@GJXAIOU",[[-1,3150,"`"]],[3151,3151],[3150,3150]]],[1564811277721,["GJX@GJXAIOU",[[-1,3143,"`"]],[3144,3144],[3143,3143]]],[1564811280376,["GJX@GJXAIOU",[[-1,2970,"`"]],[2971,2971],[2970,2970]]],[1564811283233,["GJX@GJXAIOU",[[-1,2984,"`"]],[2985,2985],[2984,2984]]],[1564811285350,["GJX@GJXAIOU",[[-1,3035,"`"]],[3036,3036],[3035,3035]]],[1564811286560,["GJX@GJXAIOU",[[-1,3096,"`"]],[3097,3097],[3096,3096]]],[1564811287664,["GJX@GJXAIOU",[[-1,3076,"`"]],[3077,3077],[3076,3076]]],[1564811288920,["GJX@GJXAIOU",[[-1,3014,"`"]],[3015,3015],[3014,3014]]],[1564811297539,["GJX@GJXAIOU",[[-1,3225," |"]],[3226,3226],[3225,3225]]],[1564811301792,["GJX@GJXAIOU",[[-1,3301," `"]],[3302,3302],[3301,3301]]],[1564811303953,["GJX@GJXAIOU",[[-1,3351,"`"]],[3352,3352],[3351,3351]]],[1564811305602,["GJX@GJXAIOU",[[-1,3371,"`"]],[3372,3372],[3371,3371]]],[1564811307017,["GJX@GJXAIOU",[[-1,3347,"`"]],[3348,3348],[3347,3347]]],[1564811376001,["GJX@GJXAIOU",[[1,3568,"**"],[1,3596,"**"]],[3568,3596],[3568,3600]]],[1564811391346,["GJX@GJXAIOU",[[-1,3800,"/**\n * Created by zejian on 2017/5/7.\n * Blog : http://blog.csdn.net/javazejian [原文地址,请尊重原创]\n */\n"]],[3799,3896],[3799,3799]]],[1564811393593,["GJX@GJXAIOU",[[-1,3824,"\n"]],[3824,3824],[3823,3823]]],[1564811395586,["GJX@GJXAIOU",[[-1,3868,"\n"]],[3868,3868],[3867,3867]]],[1564811415536,["GJX@GJXAIOU",[[-1,6320,"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283"]],[6320,6477],[6320,6320]]],[1564811427385,["GJX@GJXAIOU",[[-1,5539," /**\n 执行结果:\n   day[0].ordinal():0\n   day[1].ordinal():1\n   day[2].ordinal():2\n   day[3].ordinal():3\n   day[4].ordinal():4\n   day[5].ordinal():5\n   day[6].ordinal():6\n   -------------------------------------\n   days[0].compareTo(days[1]):-1\n   days[0].compareTo(days[1]):-2\n   clazz:class com.zejian.enumdemo.Day\n   -------------------------------------\n   days[0].name():MONDAY\n   days[1].name():TUESDAY\n   days[2].name():WEDNESDAY\n   days[3].name():THURSDAY\n   -------------------------------------\n   days[0].toString():MONDAY\n   days[1].toString():TUESDAY\n   days[2].toString():WEDNESDAY\n   days[3].toString():THURSDAY\n   -------------------------------------\n   d:MONDAY\n   d2:MONDAY\n   */"]],[5539,6232],[5539,5539]]],[1564811429409,["GJX@GJXAIOU",[[-1,5540,"\n"]],[5540,5540],[5539,5539]]],[1564811429680,["GJX@GJXAIOU",[[-1,5539,"\n"]],[5539,5539],[5538,5538]]],[1564811431801,["GJX@GJXAIOU",[[1,5631,"\n"]],[5629,5629],[5630,5630]]],[1564811433294,["GJX@GJXAIOU",[[1,5630,"·"]],[5630,5630],[5631,5631]]],[1564811434057,["GJX@GJXAIOU",[[-1,5630,"·"]],[5631,5631],[5630,5630]]],[1564811438709,["GJX@GJXAIOU",[[1,5630,"程序执行结果“"]],[5630,5630],[5637,5637]]],[1564811438959,["GJX@GJXAIOU",[[1,5639,"\n"]],[5637,5637],[5638,5638]]],[1564811440032,["GJX@GJXAIOU",[[-1,5639,"\n"]],[5638,5638],[5637,5637]]],[1564811440931,["GJX@GJXAIOU",[[-1,5636,"“"]],[5637,5637],[5636,5636]]],[1564811441396,["GJX@GJXAIOU",[[1,5636,"："]],[5636,5636],[5637,5637]]],[1564811441663,["GJX@GJXAIOU",[[1,5639,"\n"]],[5637,5637],[5638,5638]]],[1564811443302,["GJX@GJXAIOU",[[1,5638,"```"]],[5638,5638],[5641,5641]]],[1564811444604,["GJX@GJXAIOU",[[1,5643,"\n"]],[5641,5641],[5642,5642]]],[1564811444859,["GJX@GJXAIOU",[[1,5644,"\n"]],[5642,5642],[5643,5643]]],[1564811445767,["GJX@GJXAIOU",[[1,5643,"```"]],[5643,5643],[5646,5646]]],[1564811447808,["GJX@GJXAIOU",[[1,5642," /**\n 执行结果:\n   day[0].ordinal():0\n   day[1].ordinal():1\n   day[2].ordinal():2\n   day[3].ordinal():3\n   day[4].ordinal():4\n   day[5].ordinal():5\n   day[6].ordinal():6\n   -------------------------------------\n   days[0].compareTo(days[1]):-1\n   days[0].compareTo(days[1]):-2\n   clazz:class com.zejian.enumdemo.Day\n   -------------------------------------\n   days[0].name():MONDAY\n   days[1].name():TUESDAY\n   days[2].name():WEDNESDAY\n   days[3].name():THURSDAY\n   -------------------------------------\n   days[0].toString():MONDAY\n   days[1].toString():TUESDAY\n   days[2].toString():WEDNESDAY\n   days[3].toString():THURSDAY\n   -------------------------------------\n   d:MONDAY\n   d2:MONDAY\n   */"]],[5642,5642],[6335,6335]]],[1564811451168,["GJX@GJXAIOU",[[-1,5642," /**\n 执行结果:"]],[5642,5653],[5642,5642]]],[1564811452000,["GJX@GJXAIOU",[[-1,5642,"\n"]],[5642,5642],[5641,5641]]],[1564811455472,["GJX@GJXAIOU",[[-1,6318,"   */"]],[6318,6323],[6318,6318]]],[1564811458556,["GJX@GJXAIOU",[[-1,5643,"  "],[-1,5665,"  "],[-1,5686,"  "],[-1,5709,"  "],[-1,5731,"  "],[-1,5752,"  "],[-1,5775,"  "],[-1,5796,"  "],[-1,5837,"  "],[-1,5871,"  "],[-1,5903,"  "],[-1,5942,"  "],[-1,5984,"  "],[-1,6009,"  "],[-1,6034,"  "],[-1,6063,"  "],[-1,6089,"  "],[-1,6130,"  "],[-1,6160,"  "],[-1,6190,"  "],[-1,6221,"  "],[-1,6253,"  "],[-1,6294,"  "],[-1,6305,"  "]],[5643,6317],[5642,6269]]],[1564811459889,["GJX@GJXAIOU",[[1,5643,"  "],[1,5663,"  "],[1,5682,"  "],[1,5703,"  "],[1,5723,"  "],[1,5742,"  "],[1,5763,"  "],[1,5782,"  "],[1,5821,"  "],[1,5853,"  "],[1,5883,"  "],[1,5920,"  "],[1,5960,"  "],[1,5983,"  "],[1,6006,"  "],[1,6033,"  "],[1,6057,"  "],[1,6096,"  "],[1,6124,"  "],[1,6152,"  "],[1,6181,"  "],[1,6211,"  "],[1,6250,"  "],[1,6259,"  "]],[5642,6269],[5642,6317]]],[1564811461002,["GJX@GJXAIOU",[[-1,5643,"  "],[-1,5665,"  "],[-1,5686,"  "],[-1,5709,"  "],[-1,5731,"  "],[-1,5752,"  "],[-1,5775,"  "],[-1,5796,"  "],[-1,5837,"  "],[-1,5871,"  "],[-1,5903,"  "],[-1,5942,"  "],[-1,5984,"  "],[-1,6009,"  "],[-1,6034,"  "],[-1,6063,"  "],[-1,6089,"  "],[-1,6130,"  "],[-1,6160,"  "],[-1,6190,"  "],[-1,6221,"  "],[-1,6253,"  "],[-1,6294,"  "],[-1,6305,"  "]],[5642,6317],[5642,6269]]],[1564811548577,["GJX@GJXAIOU",[[-1,4413,"1"]],[4414,4414],[4413,4413]]],[1564811548931,["GJX@GJXAIOU",[[1,4413,"2"]],[4413,4413],[4414,4414]]],[1564811554161,["GJX@GJXAIOU",[[-1,5876,"1"]],[5877,5877],[5876,5876]]],[1564811554445,["GJX@GJXAIOU",[[1,5876,"2"]],[5876,5876],[5877,5877]]],[1564811576097,["GJX@GJXAIOU",[[-1,4278,"      "]],[4282,4282],[4276,4276]]],[1564811576800,["GJX@GJXAIOU",[[-1,4275,"\n"]],[4276,4276],[4275,4275]]],[1564811712736,["GJX@GJXAIOU",[[1,6318,"**"],[1,6341,"**"]],[6318,6341],[6318,6345]]],[1564811719195,["GJX@GJXAIOU",[[-1,8290,"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465"]],[8290,8411],[8290,8290]]],[1564811734824,["GJX@GJXAIOU",[[-1,8478,"  "],[-1,8498,"  "],[-1,8530,"  "]],[8480,8535],[8478,8529]]],[1564811735556,["GJX@GJXAIOU",[[-1,8476,"  "],[-1,8496,"  "],[-1,8526,"  "]],[8478,8529],[8476,8523]]],[1564811912168,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1564811912992,["GJX@GJXAIOU",[[1,0,"\n"]],[1,1],[2,2]]],[1564811915247,["GJX@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1564811915508,["GJX@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1564811915797,["GJX@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1564811916078,["GJX@GJXAIOU",[[1,5,"---\n\n\n"]],[3,3],[4,4]]],[1564811916520,["GJX@GJXAIOU",[[1,5,"\n"]],[4,4],[5,5]]],[1564811917673,["GJX@GJXAIOU",[[-1,5,"\n"]],[5,5],[4,4]]],[1564811924124,["GJX@GJXAIOU",[[1,4,"tags: []\\"]],[4,4],[13,13]]],[1564811931785,["GJX@GJXAIOU",[[-1,12,"\\"]],[13,13],[12,12]]],[1564811941383,["GJX@GJXAIOU",[[1,11,"未看完,xzhon"]],[11,11],[20,20]]],[1564811943755,["GJX@GJXAIOU",[[-1,14,",xzhon"]],[20,20],[14,14]]],[1564811944098,["GJX@GJXAIOU",[[1,14," "]],[14,14],[15,15]]],[1564811945184,["GJX@GJXAIOU",[[-1,14," "]],[15,15],[14,14]]],[1564811945980,["GJX@GJXAIOU",[[1,14,"，"]],[14,14],[15,15]]],[1564811946762,["GJX@GJXAIOU",[[-1,14,"，"]],[15,15],[14,14]]],[1564811949853,["GJX@GJXAIOU",[[1,14,", 重要"]],[14,14],[18,18]]]],null,"GJX@GJXAIOU"]]}