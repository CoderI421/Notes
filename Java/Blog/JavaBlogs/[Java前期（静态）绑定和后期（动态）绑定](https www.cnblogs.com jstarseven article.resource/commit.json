{"compress":true,"commitItems":[["faf09ab6-e7ab-461d-9aa7-d183244c819d",1562459632265,"# [Java前期（静态）绑定和后期（动态）绑定](https://www.cnblogs.com/jstarseven/articles/4631586.html)\n\n程序绑定的概念：\n_绑定指的是一个方法的调用与方法所在的类(方法主体)关联起来_。对java来说，绑定分为静态绑定和动态绑定；或者叫做前期绑定和后期绑定.\n\n静态绑定：\n_在程序执行前方法已经被绑定_（也就是说在编译过程中就已经知道这个方法到底是哪个类中的方法），此时由_编译器_或其它连接程序实现。例如：C。\n针对java简单的可以理解为程序编译期的绑定；这里特别说明一点，java当中的方法只有final，static，private和构造方法是前期绑定\n\n动态绑定：\n后期绑定：_在运行时根据具体对象的类型进行绑定_。\n若一种语言实现了后期绑定，同时必须提供一些机制，可在运行期间判断对象的类型，并分别调用适当的方法。也就是说，_编译器此时依然不知道对象的类型，但方法调用机制能自己去调查_，找到正确的方法主体。不同的语言对后期绑定的实现方法是有所区别的。但我们至少可以这样认为：它们都要在对象中安插某些特殊类型的信息。\n动态绑定的过程：\n\n1.  _虚拟机提取对象的实际类型的方法表；_\n2.  _虚拟机搜索方法签名；_\n3.  _调用方法。_\n\n关于final，static，private和构造方法是前期绑定的理解\n对于private的方法，首先一点它不能被继承，既然不能被继承那么就没办法通过它子类的对象来调用，而只能通过这个类自身的对象来调用。因此就可以说private方法和定义这个方法的类绑定在了一起。\nfinal方法虽然可以被继承，但不能被重写（覆盖），虽然子类对象可以调用，但是调用的都是父类中所定义的那个final方法，（由此我们可以知道将方法声明为final类型，一是为了防止方法被覆盖，二是为了有效地关闭java中的动态绑定)。\n构造方法也是不能被继承的（网上也有说子类无条件地继承父类的无参数构造函数作为自己的构造函数，不过个人认为这个说法不太恰当，因为我们知道子类是通过super()来调用父类的无参构造方法，来完成对父类的初始化, 而我们使用从父类继承过来的方法是不用这样做的，因此不应该说子类继承了父类的构造方法），因此编译时也可以知道这个构造方法到底是属于哪个类。\n对于static方法，具体的原理我也说不太清。不过根据网上的资料和我自己做的实验可以得出结论：static方法可以被子类继承，但是不能被子类重写（覆盖），但是可以被子类隐藏。（这里意思是说如果父类里有一个static方法，它的子类里如果没有对应的方法，那么当子类对象调用这个方法时就会使用父类中的方法。而如果子类中定义了相同的方法，则会调用子类的中定义的方法。唯一的不同就是，当子类对象上转型为父类对象时，不论子类中有没有定义这个静态方法，该对象都会使用父类中的静态方法。因此这里说静态方法可以被隐藏而不能被覆盖。这与子类隐藏父类中的成员变量是一样的。隐藏和覆盖的区别在于，子类对象转换成父类对象后，能够访问父类被隐藏的变量和方法，而不能访问父类被覆盖的方法）\n由上面我们可以得出结论，如果一个方法不可被继承或者继承后不可被覆盖，那么这个方法就采用的静态绑定。\n\njava的编译与运行\njava的编译过程是将java源文件编译成字节码（jvm可执行代码，即.class文件）的过程，在这个过程中java是不与内存打交道的，在这个过程中编译器会进行语法的分析，如果语法不正确就会报错。\nJava的运行过程是指jvm（java虚拟机）装载字节码文件并解释执行。在这个过程才是真正的创立内存布局，执行java程序。\njava字节码的执行有两种方式： （1）即时编译方式：解释器先将字节编译成机器码，然后再执行该机器码；（2）解释执行方式：解释器通过每次解释并执行一小段代码来完成java字节码程序的所有操作。（这里我们可以看出java程序在执行过程中其实是进行了两次转换，先转成字节码再转换成机器码。这也正是java能一次编译，到处运行的原因。在不同的平台上装上对应的java虚拟机，就可以实现相同的字节码转换成不同平台上的机器码，从而在不同的平台上运行）\n\n前面已经说了对于java当中的方法而言，除了final，static，private\n和构造方法是前期绑定外，其他的方法全部为动态绑定。\n而动态绑定的典型发生在父类和子类的转换声明之下：\n比如：Parent p = new Children();\n其具体过程细节如下：\n1：编译器检查对象的声明类型和方法名。\n假设我们调用x.f(args)方法，并且x已经被声明为C类的对象，那么编译器会列举出C 类中所有的名称为f 的方法和从C 类的超类继承过来的f 方法。\n2：接下来编译器检查方法调用中提供的参数类型。\n如果在所有名称为f 的方法中有一个参数类型和调用提供的参数类型最为匹配，那么就调用这个方法，这个过程叫做“重载解析”。\n\n3：当程序运行并且使用动态绑定调用方法时，虚拟机必须调用同x所指向的对象的实际类型相匹配的方法版本。\n\n假设实际类型为D(C的子类)，如果D类定义了f(String)那么该方法被调用，否则就在D的超类中搜寻方法f(String),依次类推。\n\nJAVA 虚拟机调用一个类方法时（静态方法），它会基于对象引用的类型(通常在编译时可知)来选择所调用的方法。相反，当虚拟机调用一个实例方法时，它会基于对象实际的类型(只能在运行时得知)来选择所调用的方法，这就是动态绑定，是多态的一种。动态绑定为解决实际的业务问题提供了很大的灵活性，是一种非常优美的机制。\n\n与方法不同，在处理java类中的成员变量（实例变量和类变量）时，并不是采用运行时绑定，而是一般意义上的静态绑定。所以在向上转型的情况下，对象的方法可以找到子类，而对象的属性（成员变量）还是父类的属性（子类对父类成员变量的隐藏）。\nJava代码 \n\n**[java]** [view plain](http://blog.csdn.net/zhangjk1993/article/details/24066085 \"view plain\")[copy](http://blog.csdn.net/zhangjk1993/article/details/24066085 \"copy\")[print](http://blog.csdn.net/zhangjk1993/article/details/24066085 \"print\")[?](http://blog.csdn.net/zhangjk1993/article/details/24066085 \"?\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/300657 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/300657/fork \"派生到我的代码片\")\n\n1.  public class Father {  \n2.  protected String name = \"父亲属性\";  \n3.  }  \n\n6.  public class Son extends Father {  \n7.  protected String name = \"儿子属性\";  \n\n9.  public static void main(String[] args) {  \n10.  Father sample = new Son();  \n11.  System.out.println(\"调用的属性：\" + sample.name);  \n12.  }  \n13.  }  \n\n结论，调用的成员为父亲的属性。\n这个结果表明，子类的对象(由父类的引用handle)调用到的是父类的成员变量。_所以必须明确，运行时（动态）绑定针对的范畴只是对象的方法_。\n现在试图调用子类的成员变量name，该怎么做？最简单的办法是_将该成员变量封装成方法getter形式_。\n代码如下：\nJava代码 \n\n**[java]** [view plain](http://blog.csdn.net/zhangjk1993/article/details/24066085 \"view plain\")[copy](http://blog.csdn.net/zhangjk1993/article/details/24066085 \"copy\")[print](http://blog.csdn.net/zhangjk1993/article/details/24066085 \"print\")[?](http://blog.csdn.net/zhangjk1993/article/details/24066085 \"?\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/300657 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/300657/fork \"派生到我的代码片\")\n\n1.  public class Father {  \n2.  protected String name = \"父亲属性\";  \n\n4.  public String getName() {  \n5.  return name;  \n6.  }  \n7.  }　　  \n\n9.  public class Son extends Father {  \n10.  protected String name = \"儿子属性\";  \n\n12.  public String getName() {  \n13.  return name;  \n14.  }  \n\n16.  public static void main(String[] args) {  \n17.  Father sample = new Son();  \n18.  System.out.println(\"调用的属性:\" + sample.getName());  \n19.  }  \n20.  }  \n\n结果：调用的是儿子的属性\njava因为什么对属性要采取静态的绑定方法。这是因为静态绑定是有很多的好处，它可以让我们在编译期就发现程序中的错误，而不是在运行期。这样就可以提高程序的运行效率！而对方法采取动态绑定是为了实现多态，多态是java的一大特色。多态也是面向对象的关键技术之一，所以java是以效率为代价来实现多态这是很值得的。",[[1562459576358,["GJX@GJXAIOU",[[1,2," "],[-1,2478," "],[1,2479," "],[-1,2491," "],[1,2492," "],[-1,3023," "],[1,3024," "],[-1,3029," "],[1,3030," "],[-1,3036," {  "],[1,3040," {  "],[-1,3054," "],[1,3055," "],[-1,3061," "],[1,3062," "],[-1,3066," = "],[1,3069," = "],[-1,3076,"  "],[1,3078,"  "],[-1,3084,"  "],[1,3086,"  "],[-1,3098," "],[1,3099," "],[-1,3104," Son "],[1,3109," Son "],[-1,3116," "],[1,3117," "],[-1,3123," {  "],[1,3127," {  "],[-1,3141," "],[1,3142," "],[-1,3148," "],[1,3149," "],[-1,3153," = "],[1,3156," = "],[-1,3163,"  "],[1,3165,"  "],[-1,3177," "],[1,3178," "],[-1,3184," "],[1,3185," "],[-1,3189," "],[1,3190," "],[-1,3203," "],[1,3204," "],[-1,3209," {  "],[1,3213," {  "],[-1,3225," "],[1,3226," "],[-1,3232," = new "],[1,3239," = new "],[-1,3245,"  "],[1,3247,"  "],[-1,3280," + "],[1,3283," + "],[-1,3296,"  "],[1,3298,"  "],[-1,3305,"  "],[1,3307,"  "],[-1,3314,"  "],[1,3316,"  "],[-1,3470," "],[1,3471," "],[-1,3483," "],[1,3484," "],[-1,4015," "],[1,4016," "],[-1,4021," "],[1,4022," "],[-1,4028," {  "],[1,4032," {  "],[-1,4046," "],[1,4047," "],[-1,4053," "],[1,4054," "],[-1,4058," = "],[1,4061," = "],[-1,4068,"  "],[1,4070,"  "],[-1,4082," "],[1,4083," "],[-1,4089," "],[1,4090," "],[-1,4099," {  "],[1,4103," {  "],[-1,4114," "],[1,4115," "],[-1,4120,"  "],[1,4122,"  "],[-1,4128,"  "],[1,4130,"  "],[-1,4138,"  "],[1,4140,"  "],[-1,4152," "],[1,4153," "],[-1,4158," Son "],[1,4163," Son "],[-1,4170," "],[1,4171," "],[-1,4177," {  "],[1,4181," {  "],[-1,4196," "],[1,4197," "],[-1,4203," "],[1,4204," "],[-1,4208," = "],[1,4211," = "],[-1,4218,"  "],[1,4220,"  "],[-1,4233," "],[1,4234," "],[-1,4240," "],[1,4241," "],[-1,4250," {  "],[1,4254," {  "],[-1,4266," "],[1,4267," "],[-1,4272,"  "],[1,4274,"  "],[-1,4281,"  "],[1,4283,"  "],[-1,4296," "],[1,4297," "],[-1,4303," "],[1,4304," "],[-1,4308," "],[1,4309," "],[-1,4322," "],[1,4323," "],[-1,4328," {  "],[1,4332," {  "],[-1,4344," "],[1,4345," "],[-1,4351," = new "],[1,4358," = new "],[-1,4364,"  "],[1,4366,"  "],[-1,4399," + "],[1,4402," + "],[-1,4420,"  "],[1,4422,"  "],[-1,4429,"  "],[1,4431,"  "],[-1,4438,"  "],[1,4440,"  "]],[1,1],[2,2]]],[1562459576753,["GJX@GJXAIOU",[[1,2,"Java前期（静态）绑定和后期（动态）绑定"]],[2,2],[23,23]]],[1562459581242,["GJX@GJXAIOU",[[1,24,"\n"]],[24,24],[25,25]]],[1562459596538,["GJX@GJXAIOU",[[-1,117,"_"]],[118,118],[117,117]]],[1562459599769,["GJX@GJXAIOU",[[1,117,"**"],[1,119,"**"]],[117,119],[117,123]]],[1562459603098,["GJX@GJXAIOU",[[1,123," "]],[123,123],[124,124]]],[1562459610170,["GJX@GJXAIOU",[[-1,151,"_"]],[152,152],[151,151]]],[1562459616094,["GJX@GJXAIOU",[[-1,196,"_"]],[197,197],[196,196]]],[1562459621649,["GJX@GJXAIOU",[[-1,209,"_"]],[210,210],[209,209]]],[1562459624811,["GJX@GJXAIOU",[[-1,244,"_"]],[245,245],[244,244]]],[1562459625889,["GJX@GJXAIOU",[[-1,247,"_"]],[248,248],[247,247]]],[1562459636344,["GJX@GJXAIOU",[[1,295,"**"],[1,336,"**"]],[295,336],[295,340]]],[1562459643177,["GJX@GJXAIOU",[[1,108,"## "]],[108,108],[119,119]]],[1562459645736,["GJX@GJXAIOU",[[1,193,"## "]],[193,193],[201,201]]],[1562459648776,["GJX@GJXAIOU",[[1,348,"## "]],[348,348],[356,356]]],[1562459653792,["GJX@GJXAIOU",[[-1,362,"_"]],[362,363],[362,362]]],[1562459655938,["GJX@GJXAIOU",[[-1,379,"_"]],[380,380],[379,379]]],[1562459690080,["GJX@GJXAIOU",[[-1,435,"_"]],[436,436],[435,435]]],[1562459737890,["GJX@GJXAIOU",[[-1,464,"_"]],[465,465],[464,464]]],[1562459745736,["GJX@GJXAIOU",[[-1,544,"_"]],[545,545],[544,544]]],[1562459746656,["GJX@GJXAIOU",[[-1,567,"_"]],[568,568],[567,567]]],[1562459747327,["GJX@GJXAIOU",[[-1,583,"_"]],[584,584],[583,583]]],[1562459748288,["GJX@GJXAIOU",[[-1,577,"_"]],[578,578],[577,577]]],[1562459749008,["GJX@GJXAIOU",[[-1,587,"_"]],[588,588],[587,587]]],[1562459749792,["GJX@GJXAIOU",[[-1,561,"_"]],[562,562],[561,561]]],[1562459751169,["GJX@GJXAIOU",[[-1,539,"\n"]],[539,539],[538,538]]],[1562459752728,["GJX@GJXAIOU",[[1,530,"\n"]],[530,530],[531,531]]],[1562459986400,["GJX@GJXAIOU",[[1,509,"**"],[1,529,"**"]],[509,529],[509,533]]],[1562460000313,["GJX@GJXAIOU",[[1,535,"**"],[1,543,"**"]],[535,543],[535,547]]],[1562460010353,["GJX@GJXAIOU",[[1,596,"### "]],[596,596],[635,635]]],[1562460016858,["GJX@GJXAIOU",[[1,111,"一、。"]],[111,111],[114,114]]],[1562460018080,["GJX@GJXAIOU",[[-1,113,"。"]],[114,114],[113,113]]],[1562460021125,["GJX@GJXAIOU",[[1,198,"二、"]],[198,198],[200,200]]],[1562460024892,["GJX@GJXAIOU",[[1,355,"三、"]],[355,355],[357,357]]],[1562460029722,["GJX@GJXAIOU",[[1,606,"（）"]],[606,606],[608,608]]],[1562460031894,["GJX@GJXAIOU",[[1,607,"一"]],[607,607],[608,608]]],[1562460059514,["GJX@GJXAIOU",[[1,645,"\n"]],[645,645],[646,646]]],[1562460060080,["GJX@GJXAIOU",[[1,646,"- "]],[646,646],[648,648]]],[1562460066609,["GJX@GJXAIOU",[[1,746,"- \n- "]],[746,746],[748,748]]],[1562460068751,["GJX@GJXAIOU",[[-1,746,"- "]],[748,748],[746,746]]],[1562460093799,["GJX@GJXAIOU",[[1,867,"\n"]],[867,867],[868,868]]],[1562460094552,["GJX@GJXAIOU",[[1,868,"- "]],[868,868],[870,870]]],[1562460119608,["GJX@GJXAIOU",[[1,1043,"- \n"]],[1042,1042],[1045,1045]]],[1562460121138,["GJX@GJXAIOU",[[-1,1043,"- "]],[1045,1045],[1043,1043]]],[1562460123891,["GJX@GJXAIOU",[[1,1044,"- "]],[1044,1044],[1046,1046]]],[1562460165299,["GJX@GJXAIOU",[[1,1428,"## 四 "]],[1428,1428],[1432,1432]]],[1562460165603,["GJX@GJXAIOU",[[1,1432,"、"]],[1432,1432],[1433,1433]]],[1562460172594,["GJX@GJXAIOU",[[1,1377,"\n"]],[1377,1377],[1378,1378]]],[1562460180504,["GJX@GJXAIOU",[[1,1390,"**"],[1,1426,"**"]],[1390,1426],[1390,1430]]],[1562460189656,["GJX@GJXAIOU",[[1,1549,"\n"]],[1549,1549],[1550,1550]]],[1562460191826,["GJX@GJXAIOU",[[1,1450,"\n"]],[1450,1450],[1451,1451]]],[1562460195890,["GJX@GJXAIOU",[[1,1614,"\n"]],[1614,1614],[1615,1615]]],[1562460224352,["GJX@GJXAIOU",[[1,1451,"**"],[1,1460,"**"]],[1451,1460],[1451,1464]]],[1562460229642,["GJX@GJXAIOU",[[1,1555,"**"],[1,1565,"**"]],[1555,1565],[1555,1569]]],[1562460237161,["GJX@GJXAIOU",[[-1,1566,"是"]],[1566,1567],[1566,1566]]],[1562460239287,["GJX@GJXAIOU",[[1,1568,"****"]],[1568,1568],[1570,1570]]],[1562460242832,["GJX@GJXAIOU",[[-1,1568,"****"],[1,1572,"是"]],[1568,1572],[1569,1569]]],[1562460268000,["GJX@GJXAIOU",[[-1,1623,"j"],[1,1624,"J"]],[1623,1627],[1623,1627]]],[1562460268561,["GJX@GJXAIOU",[[-1,1704,"j"],[1,1705,"J"]],[1704,1708],[1704,1708]]],[1562460268948,["GJX@GJXAIOU",[[-1,1728,"j"],[1,1729,"J"]],[1728,1732],[1728,1732]]],[1562460269548,["GJX@GJXAIOU",[[-1,1769,"j"],[1,1770,"J"]],[1769,1773],[1769,1773]]],[1562460270165,["GJX@GJXAIOU",[[-1,1799,"j"],[1,1800,"J"]],[1799,1803],[1799,1803]]],[1562460270405,["GJX@GJXAIOU",[[-1,1853,"j"],[1,1854,"J"]],[1853,1857],[1853,1857]]],[1562460270645,["GJX@GJXAIOU",[[-1,2284,"AVA"],[1,2287,"ava"]],[2283,2287],[2283,2287]]],[1562460270869,["GJX@GJXAIOU",[[-1,2446,"j"],[1,2447,"J"]],[2446,2450],[2446,2450]]],[1562460273526,["GJX@GJXAIOU",[[-1,2564,"j"],[1,2565,"J"]],[2564,2568],[2564,2568]]],[1562460274048,["GJX@GJXAIOU",[[-1,3556,"j"],[1,3557,"J"]],[3556,3560],[3556,3560]]],[1562460274289,["GJX@GJXAIOU",[[-1,4535,"j"],[1,4536,"J"]],[4535,4539],[4535,4539]]],[1562460274496,["GJX@GJXAIOU",[[-1,4637,"j"],[1,4638,"J"]],[4637,4641],[4637,4641]]],[1562460274705,["GJX@GJXAIOU",[[-1,4665,"j"],[1,4666,"J"]],[4665,4669],[4665,4669]]],[1562460275331,["GJX@GJXAIOU",[[-1,158,"j"],[1,159,"J"]],[158,162],[158,162]]],[1562460275541,["GJX@GJXAIOU",[[-1,275,"j"],[1,276,"J"]],[275,279],[275,279]]],[1562460275748,["GJX@GJXAIOU",[[-1,307,"j"],[1,308,"J"]],[307,311],[307,311]]],[1562460276004,["GJX@GJXAIOU",[[-1,854,"j"],[1,855,"J"]],[854,858],[854,858]]],[1562460276233,["GJX@GJXAIOU",[[-1,1439,"j"],[1,1440,"J"]],[1439,1443],[1439,1443]]],[1562460276453,["GJX@GJXAIOU",[[-1,1453,"j"],[1,1454,"J"]],[1453,1457],[1453,1457]]],[1562460276644,["GJX@GJXAIOU",[[-1,1466,"j"],[1,1467,"J"]],[1466,1470],[1466,1470]]],[1562460276868,["GJX@GJXAIOU",[[-1,1509,"j"],[1,1510,"J"]],[1509,1513],[1509,1513]]],[1562460277300,["GJX@GJXAIOU",[[-1,1574,"j"],[1,1575,"J"]],[1574,1578],[1574,1578]]],[1562460277524,["GJX@GJXAIOU",[[-1,1614,"j"],[1,1615,"J"]],[1614,1618],[1614,1618]]],[1562460308601,["GJX@GJXAIOU",[[1,1640,"\n"]],[1640,1640],[1641,1641]]],[1562460311521,["GJX@GJXAIOU",[[1,1623,"- "]],[1623,1623],[1625,1625]]],[1562460316145,["GJX@GJXAIOU",[[1,1643,"- "]],[1643,1643],[1645,1645]]],[1562460316729,["GJX@GJXAIOU",[[1,1643,"  "]],[1645,1645],[1647,1647]]],[1562460319617,["GJX@GJXAIOU",[[1,1681,"- "]],[1681,1681],[1683,1683]]],[1562460320392,["GJX@GJXAIOU",[[1,1645,"  "]],[1683,1683],[1685,1685]]],[1562460323136,["GJX@GJXAIOU",[[1,1683,"\n    "]],[1683,1683],[1688,1688]]],[1562460388032,["GJX@GJXAIOU",[[-1,1903,"\n"]],[1904,1904],[1903,1903]]],[1562460392504,["GJX@GJXAIOU",[[1,1929,"\n"]],[1929,1929],[1930,1930]]],[1562460414234,["GJX@GJXAIOU",[[1,1985,"**"],[1,1995,"**"]],[1985,1995],[1985,1999]]],[1562460417009,["GJX@GJXAIOU",[[-1,1985,"**"],[-1,1997,"**"]],[1985,1999],[1985,1995]]],[1562460420489,["GJX@GJXAIOU",[[1,1985,"## "]],[1985,1985],[1998,1998]]],[1562460425035,["GJX@GJXAIOU",[[-1,1988,"其"]],[1989,1989],[1988,1988]]],[1562460430107,["GJX@GJXAIOU",[[1,1988,"动态绑定"]],[1988,1988],[1992,1992]]],[1562460437250,["GJX@GJXAIOU",[[-1,1861,"前面已经说了对于Java当中的方法而言，除了final，static，private和构造方法是前期绑定外，其他的方法全部为动态绑定。\n\n而动态绑定的典型发生在父类和子类的转换声明之下：\n比如：Parent p = new Children();"]],[1861,1984],[1861,1861]]],[1562460439057,["GJX@GJXAIOU",[[1,1879,"\n"]],[1878,1878],[1879,1879]]],[1562460439193,["GJX@GJXAIOU",[[1,1880,"\n"]],[1879,1879],[1880,1880]]],[1562460440256,["GJX@GJXAIOU",[[1,1880,"前面已经说了对于Java当中的方法而言，除了final，static，private和构造方法是前期绑定外，其他的方法全部为动态绑定。\n\n而动态绑定的典型发生在父类和子类的转换声明之下：\n比如：Parent p = new Children();"]],[1880,1880],[2003,2003]]],[1562460444625,["GJX@GJXAIOU",[[1,2004,"\n"]],[2003,2003],[2004,2004]]],[1562460446981,["GJX@GJXAIOU",[[1,2004,"过程为："]],[2004,2004],[2008,2008]]],[1562460450480,["GJX@GJXAIOU",[[1,2004,"**"],[1,2008,"**"]],[2004,2008],[2004,2012]]],[1562460529095,["GJX@GJXAIOU",[[-1,2594,"**[Java]** [view plain](http://blog.csdn.net/zhangjk1993/article/details/24066085 \"view plain\")[copy](http://blog.csdn.net/zhangjk1993/article/details/24066085 \"copy\")[print](http://blog.csdn.net/zhangjk1993/article/details/24066085 \"print\")[?](http://blog.csdn.net/zhangjk1993/article/details/24066085 \"?\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/300657 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/300657/fork \"派生到我的代码片\")"]],[2594,3124],[2594,2594]]],[1562460529584,["GJX@GJXAIOU",[[-1,2595,"\n"]],[2594,2594],[2593,2593]]],[1562460529959,["GJX@GJXAIOU",[[-1,2594,"\n"]],[2593,2593],[2592,2592]]],[1562460540875,["GJX@GJXAIOU",[[1,2593,"·"]],[2593,2593],[2594,2594]]],[1562460541967,["GJX@GJXAIOU",[[-1,2593,"·"]],[2594,2594],[2593,2593]]],[1562460542784,["GJX@GJXAIOU",[[1,2593,"```"]],[2593,2593],[2596,2596]]],[1562460542815,["GJX@GJXAIOU",[[1,2596,"language\n```\n"]],[2596,2596],[2596,2604]]],[1562460543825,["GJX@GJXAIOU",[[-1,2596,"language"],[1,2604,"j"]],[2596,2604],[2597,2597]]],[1562460544250,["GJX@GJXAIOU",[[1,2597,"ava"]],[2597,2597],[2600,2600]]],[1562460544375,["GJX@GJXAIOU",[[1,2601,"\n"]],[2600,2600],[2601,2601]]],[1562460548377,["GJX@GJXAIOU",[[-1,2607,"1.  public class Father {  \n2.  protected String name = \"父亲属性\";  \n3.  }  \n\n6.  public class Son extends Father {  \n7.  protected String name = \"儿子属性\";  \n\n9.  public static void main(String[] args) {  \n10.  Father sample = new Son();  \n11.  System.out.println(\"调用的属性：\" + sample.name);  \n12.  }  \n13.  }  \n"]],[2607,2911],[2607,2607]]],[1562460550534,["GJX@GJXAIOU",[[1,2601,"1.  public class Father {  \n2.  protected String name = \"父亲属性\";  \n3.  }  \n\n6.  public class Son extends Father {  \n7.  protected String name = \"儿子属性\";  \n\n9.  public static void main(String[] args) {  \n10.  Father sample = new Son();  \n11.  System.out.println(\"调用的属性：\" + sample.name);  \n12.  }  \n13.  }  \n"]],[2601,2601],[2905,2905]]],[1562460552336,["GJX@GJXAIOU",[[-1,2601,"1. "]],[2601,2604],[2601,2601]]],[1562460555152,["GJX@GJXAIOU",[[-1,2626,"2.  "]],[2626,2630],[2626,2626]]],[1562460556383,["GJX@GJXAIOU",[[-1,2660,"3. "]],[2660,2663],[2660,2660]]],[1562460558447,["GJX@GJXAIOU",[[1,2626,"    "]],[2626,2626],[2630,2630]]],[1562460560657,["GJX@GJXAIOU",[[-1,2670,"6.  "]],[2670,2674],[2670,2670]]],[1562460563110,["GJX@GJXAIOU",[[-1,2706,"7.  "]],[2706,2710],[2706,2706]]],[1562460564545,["GJX@GJXAIOU",[[-1,2741,"9.  "]],[2741,2745],[2741,2741]]],[1562460565905,["GJX@GJXAIOU",[[-1,2784,"10.  "]],[2784,2789],[2784,2784]]],[1562460567152,["GJX@GJXAIOU",[[-1,2813,"11.  "]],[2813,2818],[2813,2813]]],[1562460568183,["GJX@GJXAIOU",[[-1,2863," "]],[2863,2863],[2862,2862]]],[1562460569391,["GJX@GJXAIOU",[[-1,2867,"13. "]],[2867,2871],[2867,2867]]],[1562460570593,["GJX@GJXAIOU",[[-1,2859,"12. "]],[2859,2863],[2859,2859]]],[1562460573201,["GJX@GJXAIOU",[[1,2784,"    "]],[2784,2784],[2788,2788]]],[1562460574095,["GJX@GJXAIOU",[[1,2817,"    "]],[2817,2817],[2821,2821]]],[1562460575217,["GJX@GJXAIOU",[[1,2867,"  "]],[2867,2867],[2869,2869]]],[1562460576447,["GJX@GJXAIOU",[[-1,2873," "]],[2874,2874],[2873,2873]]],[1562460578311,["GJX@GJXAIOU",[[1,2706,"  "]],[2706,2706],[2708,2708]]],[1562460586503,["GJX@GJXAIOU",[[-1,2970,"_"]],[2971,2971],[2970,2970]]],[1562460587375,["GJX@GJXAIOU",[[-1,2941,"_"]],[2942,2942],[2941,2941]]],[1562460588328,["GJX@GJXAIOU",[[-1,3001,"_"]],[3002,3002],[3001,3001]]],[1562460589831,["GJX@GJXAIOU",[[-1,3020,"_"]],[3021,3021],[3020,3020]]],[1562460593342,["GJX@GJXAIOU",[[-1,3037,"**[Java]** [view plain](http://blog.csdn.net/zhangjk1993/article/details/24066085 \"view plain\")[copy](http://blog.csdn.net/zhangjk1993/article/details/24066085 \"copy\")[print](http://blog.csdn.net/zhangjk1993/article/details/24066085 \"print\")[?](http://blog.csdn.net/zhangjk1993/article/details/24066085 \"?\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/300657 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/300657/fork \"派生到我的代码片\")"]],[3037,3567],[3037,3037]]],[1562460593743,["GJX@GJXAIOU",[[-1,3038,"\n"]],[3037,3037],[3036,3036]]],[1562460612506,["GJX@GJXAIOU",[[1,3036,"···"]],[3036,3036],[3039,3039]]],[1562460613679,["GJX@GJXAIOU",[[-1,3036,"···"]],[3039,3039],[3036,3036]]],[1562460614912,["GJX@GJXAIOU",[[1,3036,"```"]],[3036,3036],[3039,3039]]],[1562460614940,["GJX@GJXAIOU",[[1,3039,"language\n```\n"]],[3039,3039],[3039,3047]]],[1562460615729,["GJX@GJXAIOU",[[-1,3039,"language"],[1,3047,"j"]],[3039,3047],[3040,3040]]],[1562460616105,["GJX@GJXAIOU",[[1,3040,"ava"]],[3040,3040],[3043,3043]]],[1562460616217,["GJX@GJXAIOU",[[1,3044,"\n"]],[3043,3043],[3044,3044]]],[1562460649867,["GJX@GJXAIOU",[[1,3044,"public class Father { \n\nprotected String name = \"父亲属性\"; \n\npublic String getName() { \n\nreturn name; \n\n} \n\n}　　 \n\npublic class Son extends Father { \n\n protected String name = \"儿子属性\"; \n\n public String getName() { \n\n return name; \n\n } \n\n public static void main(String[] args) { \n\n Father sample = new Son(); \n\n System.out.println(\"调用的属性:\" + sample.getName()); \n\n } \n\n }"]],[3044,3044],[3409,3409]]],[1562460651800,["GJX@GJXAIOU",[[1,3068,"  "]],[3068,3068],[3070,3070]]],[1562460654642,["GJX@GJXAIOU",[[1,3132,"  "]],[3132,3132],[3134,3134]]],[1562460655938,["GJX@GJXAIOU",[[-1,3148,"\n"]],[3148,3148],[3147,3147]]],[1562460659288,["GJX@GJXAIOU",[[-1,3131,"\n"]],[3131,3131],[3130,3130]]],[1562460661433,["GJX@GJXAIOU",[[1,3104,"  "]],[3104,3104],[3106,3106]]],[1562460663481,["GJX@GJXAIOU",[[-1,3152,"\n"]],[3152,3152],[3151,3151]]],[1562460665408,["GJX@GJXAIOU",[[1,3149,"  "]],[3149,3149],[3151,3151]]],[1562460672743,["GJX@GJXAIOU",[[-1,3259,"\n"]],[3259,3259],[3258,3258]]],[1562460674767,["GJX@GJXAIOU",[[-1,3195,"\n"]],[3195,3195],[3194,3194]]],[1562460677040,["GJX@GJXAIOU",[[-1,3067,"\n"]],[3067,3067],[3066,3066]]],[1562460679657,["GJX@GJXAIOU",[[1,3195,"  "]],[3195,3195],[3197,3197]]],[1562460681079,["GJX@GJXAIOU",[[1,3232,"  "]],[3232,3232],[3234,3234]]],[1562460682234,["GJX@GJXAIOU",[[1,3262,"    "]],[3262,3262],[3266,3266]]],[1562460683908,["GJX@GJXAIOU",[[-1,3280,"\n"]],[3280,3280],[3279,3279]]],[1562460686744,["GJX@GJXAIOU",[[1,3412,"  "]],[3412,3412],[3414,3414]]],[1562460688552,["GJX@GJXAIOU",[[-1,3417,"\n"]],[3417,3417],[3416,3416]]],[1562460691064,["GJX@GJXAIOU",[[-1,3328,"\n"]],[3328,3328],[3327,3327]]],[1562460696600,["GJX@GJXAIOU",[[-1,3425,"1.  public class Father {  \n2.  protected String name = \"父亲属性\";  \n\n4.  public String getName() {  \n5.  return name;  \n6.  }  \n7.  }　　  \n\n9.  public class Son extends Father {  \n10.  protected String name = \"儿子属性\";  \n\n12.  public String getName() {  \n13.  return name;  \n14.  }  \n\n16.  public static void main(String[] args) {  \n17.  Father sample = new Son();  \n18.  System.out.println(\"调用的属性:\" + sample.getName());  \n19.  }  \n20.  }  "]],[3425,3860],[3425,3425]]],[1562460696728,["GJX@GJXAIOU",[[-1,3426,"\n"]],[3425,3425],[3424,3424]]],[1562460697288,["GJX@GJXAIOU",[[-1,3425,"\n"]],[3424,3424],[3423,3423]]],[1562460697632,["GJX@GJXAIOU",[[-1,3424,"\n"]],[3423,3423],[3422,3422]]]],null,"GJX@GJXAIOU"]]}